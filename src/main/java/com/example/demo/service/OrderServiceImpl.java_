package com.example.demo.service;

import java.security.MessageDigest;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;
import net.bellins.storm.biz.app.basicinfo.service.BasicInfoService;
import net.bellins.storm.biz.app.basket.model.AppliedBasketPrmtVO;
import net.bellins.storm.biz.app.basket.model.BasketPO;
import net.bellins.storm.biz.app.basket.model.BasketSO;
import net.bellins.storm.biz.app.basket.model.BasketSessionPO;
import net.bellins.storm.biz.app.basket.model.BasketVO;
import net.bellins.storm.biz.app.basket.model.GoodsSizeVO;
import net.bellins.storm.biz.app.basket.model.PrmtFreebieVO;
import net.bellins.storm.biz.app.basket.service.FrontBasketService;
import net.bellins.storm.biz.app.goods.category.service.CategoryManageService;
import net.bellins.storm.biz.app.goods.manage.model.GoodsAddOptionDtlVO;
import net.bellins.storm.biz.app.goods.manage.model.GoodsDetailSO;
import net.bellins.storm.biz.app.goods.manage.model.GoodsDetailVO;
import net.bellins.storm.biz.app.goods.manage.model.GoodsItemVO;
import net.bellins.storm.biz.app.goods.manage.service.GoodsManageService;
import net.bellins.storm.biz.app.goods.specialgoods.model.SpecialGoodsSO;
import net.bellins.storm.biz.app.goods.specialgoods.model.SpecialGoodsVO;
import net.bellins.storm.biz.app.goods.specialgoods.service.SpecialGoodsManageService;
import net.bellins.storm.biz.app.member.manage.model.MemberManageSO;
import net.bellins.storm.biz.app.member.manage.model.MemberManageVO;
import net.bellins.storm.biz.app.member.manage.service.FrontMemberService;
import net.bellins.storm.biz.app.member.manage.service.MemberManageService;
import net.bellins.storm.biz.app.operation.bbs.model.ReplaceCdVO;
import net.bellins.storm.biz.app.operation.email.model.EmailSendSO;
import net.bellins.storm.biz.app.operation.email.service.EmailSendService;
import net.bellins.storm.biz.app.operation.savedmn.model.SavedmnPointPO;
import net.bellins.storm.biz.app.operation.savedmn.service.SavedMnPointService;
import net.bellins.storm.biz.app.operation.sms.model.SmsSendSO;
import net.bellins.storm.biz.app.operation.sms.service.SmsSendService;
import net.bellins.storm.biz.app.operation.store.model.StoreManageSO;
import net.bellins.storm.biz.app.operation.store.service.StoreManageService;
import net.bellins.storm.biz.app.order.constants.OrdStatusConstants;
import net.bellins.storm.biz.app.order.delivery.model.DeliveryPO;
import net.bellins.storm.biz.app.order.delivery.model.DeliveryVO;
import net.bellins.storm.biz.app.order.delivery.service.DeliveryService;
import net.bellins.storm.biz.app.order.deposit.service.DepositService;
import net.bellins.storm.biz.app.order.exchange.service.ExchangeService;
import net.bellins.storm.biz.app.order.manage.model.ClaimGoodsPO;
import net.bellins.storm.biz.app.order.manage.model.ClaimGoodsVO;
import net.bellins.storm.biz.app.order.manage.model.ClaimSO;
import net.bellins.storm.biz.app.order.manage.model.OrderExcelVO;
import net.bellins.storm.biz.app.order.manage.model.OrderGoodsPO;
import net.bellins.storm.biz.app.order.manage.model.OrderGoodsVO;
import net.bellins.storm.biz.app.order.manage.model.OrderInfoPO;
import net.bellins.storm.biz.app.order.manage.model.OrderInfoVO;
import net.bellins.storm.biz.app.order.manage.model.OrderPO;
import net.bellins.storm.biz.app.order.manage.model.OrderSO;
import net.bellins.storm.biz.app.order.manage.model.OrderVO;
import net.bellins.storm.biz.app.order.payment.model.OrderPayPO;
import net.bellins.storm.biz.app.order.payment.model.OrderPayVO;
import net.bellins.storm.biz.app.order.payment.service.PaymentService;
import net.bellins.storm.biz.app.order.refund.service.RefundService;
import net.bellins.storm.biz.app.order.salesproof.model.SalesProofPO;
import net.bellins.storm.biz.app.order.salesproof.model.SalesProofVO;
import net.bellins.storm.biz.app.order.salesproof.service.SalesProofService;
import net.bellins.storm.biz.app.promotion.coupon.model.CouponPO;
import net.bellins.storm.biz.app.promotion.coupon.service.CouponService;
import net.bellins.storm.biz.app.promotion.exhibition.model.ExhibitionTargetSO;
import net.bellins.storm.biz.app.promotion.exhibition.model.ExhibitionTargetVO;
import net.bellins.storm.biz.app.promotion.exhibition.service.ExhibitionService;
import net.bellins.storm.biz.app.promotion.freebiecndt.service.FreebieCndtService;
import net.bellins.storm.biz.app.promotion.promotion.model.PromotionPO;
import net.bellins.storm.biz.app.promotion.promotion.model.PromotionSO;
import net.bellins.storm.biz.app.promotion.promotion.model.PromotionVO;
import net.bellins.storm.biz.app.promotion.promotion.service.PromotionService;
import net.bellins.storm.biz.app.setup.payment.model.CommPaymentConfigSO;
import net.bellins.storm.biz.app.setup.payment.model.CommPaymentConfigVO;
import net.bellins.storm.biz.app.setup.payment.service.PaymentManageService;
import net.bellins.storm.biz.app.setup.siteinfo.model.SiteSO;
import net.bellins.storm.biz.app.setup.siteinfo.model.SiteVO;
import net.bellins.storm.biz.common.service.CacheService;
import net.bellins.storm.biz.common.service.CodeCacheService;
import net.bellins.storm.biz.system.model.SiteCacheVO;
import net.bellins.storm.biz.system.remote.cashbill.model.CashbillPO;
import net.bellins.storm.biz.system.remote.cashbill.service.CashbillDelegateService;
import net.bellins.storm.biz.system.remote.payment.PaymentAdapterService;
import net.bellins.storm.biz.system.security.SessionDetailHelper;
import net.bellins.storm.biz.system.service.SiteService;
import net.bellins.storm.biz.system.util.ServiceUtil;
import net.bellins.storm.biz.system.util.SiteUtil;
import net.bellins.storm.core.constants.CoreConstants;
import net.bellins.storm.core.model.payment.PaymentModel;
import net.bellins.storm.core.model.payment.PaypalPO;
import veci.framework.common.BaseService;
import veci.framework.common.constants.CommonConstants;
import veci.framework.common.constants.MapperConstants;
import veci.framework.common.exception.CustomException;
import veci.framework.common.model.ResultListModel;
import veci.framework.common.model.ResultModel;
import veci.framework.common.util.BeansUtil;
import veci.framework.common.util.CookieUtil;
import veci.framework.common.util.DateUtil;
import veci.framework.common.util.MessageUtil;
import veci.framework.common.util.StringUtil;

/**
 * <pre>
 * 주문목록, 주문상세, 취소등을 관리
 * </pre>
 */
@Slf4j
@Service("orderService")
@Transactional(rollbackFor = Exception.class)
public class OrderServiceImpl extends BaseService implements OrderService {
  @Resource(name = "paymentService")
  private PaymentService paymentService;
  @Resource(name = "deliveryService")
  private DeliveryService deliveryService;
  @Resource(name = "depositService")
  private DepositService depositService;
  @Resource(name = "codeCacheService")
  private CodeCacheService codeCacheService;
  @Resource(name = "refundService")
  private RefundService refundService;
  @Resource(name = "frontMemberService")
  private FrontMemberService frontMemberService;
  @Resource(name = "freebieCndtService")
  private FreebieCndtService freebieCndtService;
  @Resource(name = "basicInfoService")
  private BasicInfoService basicInfoService;
  @Resource(name = "categoryManageService")
  private CategoryManageService categoryManageService;
  @Resource(name = "exhibitionService")
  private ExhibitionService exhibitionService;
  @Resource(name = "couponService")
  private CouponService couponService;
  @Resource(name = "specialGoodsManageService")
  private SpecialGoodsManageService specialGoodsManageService;

  @Resource(name = "emailSendService")
  private EmailSendService emailSendService;

  @Resource(name = "smsSendService")
  private SmsSendService smsSendService;

  @Resource(name = "siteService")
  private SiteService siteService;

  @Resource(name = "goodsManageService")
  private GoodsManageService goodsManageService;

  @Resource(name = "savedMnPointService")
  private SavedMnPointService savedMnPointService;

  @Resource(name = "salesProofService")
  private SalesProofService salesProofService;

  @Resource(name = "exchangeService")
  private ExchangeService exchangeService;

  @Resource(name = "frontBasketService")
  private FrontBasketService frontBasketService;

  @Resource(name = "paymentManageService")
  private PaymentManageService paymentManageService;

  @Resource(name = "cacheService")
  private CacheService cacheService;

  @Resource(name = "paymentAdapterService")
  private PaymentAdapterService paymentAdapterService;

  @Resource(name = "memberManageService")
  private MemberManageService memberManageService;

  @Resource(name = "cashbillDelegateService")
  private CashbillDelegateService cashbillDelegateService;

  @Resource(name = "storeManageService")
  private StoreManageService storeManageService;

  @Resource(name = "promotionService")
  private PromotionService promotionService;

  @Resource(name = "reOrderService")
  private ReOrderService reOrderService;

  @Value(value = "#{system['goods.pack.price']}")
  private String packPrice;

  /**
   * <pre>
   * 회원번호 또는 아이디로 주문횟수 및 결제금액 합계 조회
   * </pre>
   *
   * @return OrderInfoVO
   */
  @Override
  public MemberManageVO selectOrdHistbyMember(OrderSO so) throws CustomException {
    MemberManageVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdHistbyMember", so);
    return vo;
  }

  /**
   * <pre>
   * 검색조건에 맞는 주문 목록을 조회하여 리턴
   * </pre>
   *
   * @return
   */
  @Override
  public ResultListModel<OrderInfoVO> selectOrdListPaging(OrderSO so) throws CustomException {
    // so.setSiteNo(SiteUtil.getSiteNo());

    ResultListModel<OrderInfoVO> resultListModel = proxyDao
        .selectListPage(MapperConstants.ORDER_MANAGE + "selectOrdListPaging", so);
    List<OrderInfoVO> list = resultListModel.getResultList();
    List<OrderInfoVO> newList = new ArrayList<OrderInfoVO>();
    if (list != null && list.size() > 0) {
      for (OrderInfoVO orderVO : list) {
        orderVO = selectOrdStatusForward(orderVO);
        orderVO = selectOrdStatusBackward(orderVO, "N");
        newList.add(orderVO);

      }
    }
    resultListModel.setResultList(newList);
    return resultListModel;

  }

  /**
   * 엑셀 다운로드용 목록 조회
   */
  public List<OrderInfoVO> selectOrdSrchListExcel(OrderSO so) throws CustomException {
    // so.setSiteNo(SiteUtil.getSiteNo());

    List<OrderInfoVO> resultList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdSrchListExcel", so);
    return resultList;

  }

  /**
   * 엑셀 다운로드용 목록 조회
   */
  public List<OrderExcelVO> selectOrdSrchListExcelForExcelVo(OrderSO so) throws CustomException {
    // so.setSiteNo(SiteUtil.getSiteNo());

    List<OrderExcelVO> resultList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdSrchListExcel", so);
    return resultList;

  }

  /**
   * <pre>
   * 순방향으로 선택 가능한 주문 상태코드를 조회
   * -   [주문완료:10] -> [결제완료:20]
   * -   [결제완료:20] -> [배송준비:30]
   * -   [배송중:30]   -> [배송완료:50]
   * </pre>
   *
   * @return
   */
  @Override
  public OrderInfoVO selectOrdStatusForward(OrderInfoVO vo) throws CustomException {
    if ("10".equals(vo.getOrdStatusCd())) {
      vo.setFordStatusCd("20");
      vo.setFordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "20"));
    } else if ("20".equals(vo.getOrdStatusCd())) {
      vo.setFordStatusCd("30");
      vo.setFordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "30"));
      /*
       * } else if ("40".equals(vo.getOrdStatusCd())) { vo.setFordStatusCd("50");
       * vo.setFordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "50"));
       */
    } else {
      vo.setFordStatusCd("");
      vo.setFordStatusNm("");
    }

    /** 순방향 주문 상태의 CSS 컬러 조회 **/
    String[] cssClass = { "colb1", "colb2", "colo1", "coly1", "colo2", "colg1", "colg2" };
    String[] cd = { "10", "20", "30", "39", "40", "49", "50" };
    HashMap<String, String> tmp = new HashMap();
    for (int i = 0; i < cd.length; i++) {
      tmp.put(cd[i], cssClass[i]);
    }
    vo.setCssClass(tmp.get(vo.getFordStatusCd()));
    return vo;
  }

  /**
   * <pre>
   * 역방향으로 선택 가능한 주문 상태코드를 조회
   * -   [주문완료:10] -> [주문취소:11]
   * -   [결제완료:20] -> [주문완료:10]
   * -   [주문접수:01] -> [주문무효:00]
   * -   [배송중:30]   -> [결제완료:20]
   *
   * </pre>
   *
   * @return
   */
  @Override
  public OrderInfoVO selectOrdStatusBackward(OrderInfoVO vo, String dtlYn) throws CustomException {
    vo.setBordStatusCd("");
    vo.setBordStatusNm("");
    if ("10".equals(vo.getOrdStatusCd())) {
      // 상세 페이지일경우만 주문 무효
      if ("Y".equals(dtlYn)) {
        vo.setBordStatusCd("11");
        vo.setBordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "11"));
      }
    } else if ("01".equals(vo.getOrdStatusCd())) {
      vo.setBordStatusCd("00");
      vo.setBordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "00"));
    } else if ("20".equals(vo.getOrdStatusCd()) && vo.getOrgOrdNo() == null) {
      // 상세 페이지일경우는 결제 취소
      if ("Y".equals(dtlYn)) {
        vo.setBordStatusCd("21");
        vo.setBordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "21"));
      }
    } else if ("30".equals(vo.getOrdStatusCd())) {
      vo.setBordStatusCd("20");
      vo.setBordStatusNm(codeCacheService.getCodeName("ORD_STATUS_CD", "20"));
    } else {
      vo.setBordStatusCd("");
      vo.setBordStatusNm("");
    }

    return vo;
  }

  /**
   * 주문 내역 리스트 엑셀 출력
   */
  public List<OrderExcelVO> selectOrdList(String[] ordNoList) throws CustomException {

    HashMap<String, Object> map = new HashMap<String, Object>();
    map.put("ordNoList", ordNoList);
    map.put("siteNo", siteService.getSiteInfo().getSiteNo());

    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdList", map);
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 13.
   * 작성자 : 박근정
   * 설명   : 다수 주문건의 주문 상태 변경
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 13. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public ResultModel<OrderInfoVO> updateOrdListStatus(List<OrderGoodsVO> listvo, String curOrdStatusCd)
      throws CustomException {
    ResultModel<OrderInfoVO> result = new ResultModel<>();
    int rcnt = 0;
    for (OrderGoodsVO vo : listvo) {
      updateOrdStatus(vo, curOrdStatusCd);
      rcnt++;
    }

    String args[] = { rcnt + "" };
    result.setMessage(MessageUtil.getMessage("biz.result.ord.updateOrdStatus", args));
    return result;
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 17.
   * 작성자 : 박근정
   * 설명   : 주문번호를 변수로 받아 주문한 상품의 출력용 주문 내역서 조회
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 17. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public OrderVO selectOrdDtlPrint(OrderInfoVO infoVo) throws CustomException {
    OrderVO vo = selectOrdDtl(infoVo);
    return vo;
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 17.
   * 작성자 : 박근정
   * 설명   : 주문번호를 변수로 받아 주문한 상품의 상세 내역 조회
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 19. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public OrderVO selectOrdDtl(OrderInfoVO vo) throws CustomException {

    OrderVO rVo = new OrderVO();
    // 기본 정보
    OrderInfoVO orderInfoVo = selectOrdDtlInfo(vo);
    orderInfoVo = selectOrdStatusForward(orderInfoVo);
    orderInfoVo = selectOrdStatusBackward(orderInfoVo, "Y");
    orderInfoVo.setSiteNo(vo.getSiteNo());

    // 결제 정보 (최초 (적립금제외)결제 정보만 조회)
    List<OrderPayVO> payVo = selectOrgOrderPayInfo(vo);
    // 배송 정보 조회
    DeliveryVO delivVo = new DeliveryVO();
    delivVo.setOrdNo(vo.getOrdNo());
    List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);

    // 상품 정보
    List<OrderGoodsVO> goodsList = selectOrgOrdDtlList(vo);
    List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

    for (OrderGoodsVO gvo : goodsList) {
      // 01.상품기본정보 조회
      GoodsDetailSO so = new GoodsDetailSO();
      so.setGoodsNo(gvo.getGoodsNo());
      // so.setItemNo(gvo.getItemNo());
      ResultModel<GoodsDetailVO> goodsInfo = goodsManageService.selectGoodsInfo(so);
      // 재주문시 필요한 데이터
      gvo.setPackStatusCd(goodsInfo.getData().getPackStatusCd());
      List<OrderGoodsVO> freebieList = new ArrayList<>();

      if ("Y".equals(orderInfoVo.getStoreYn())) {
        StoreManageSO storeManageSO = new StoreManageSO();
        storeManageSO.setSiteNo(gvo.getSiteNo());
        storeManageSO.setPartnerNo(gvo.getPartnerNo());
        storeManageSO.setStoreNo(gvo.getStoreNo());
        gvo.setStoreManageVO(storeManageService.selectStoreInfo(storeManageSO).getData());
      }

      try {
        // 02.단품정보
        String jsonList = "";
        if (goodsInfo.getData().getGoodsItemList() != null) {
          gvo.setGoodsItemList(goodsInfo.getData().getGoodsItemList());
          ObjectMapper mapper = new ObjectMapper();
          jsonList = mapper.writeValueAsString(goodsInfo.getData().getGoodsItemList());
        }
        gvo.setJsonList(jsonList);
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      gvo.setGoodsOptionList(goodsInfo.getData().getGoodsOptionList());
      gvo.setGoodsSetYn("N");
      // 세트 상품
      if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
        gvo.setGoodsSetYn("Y");
        List<OrderGoodsVO> goodsSetList = new ArrayList<>();
        List<OrderGoodsVO> goodsSetListNew = new ArrayList<>();
        goodsSetList = selectOrdGoodsSetList(gvo);

        for (OrderGoodsVO setVO : goodsSetList) {
          GoodsDetailSO goodsDetailSO = new GoodsDetailSO();
          goodsDetailSO.setGoodsNo(setVO.getGoodsNo());
          goodsDetailSO.setSaleYn("Y");
          goodsDetailSO.setDelYn("N");
          String[] goodsStatus = { "1", "2", "3", "4" };
          goodsDetailSO.setGoodsStatus(goodsStatus);
          GoodsDetailVO goodsDetailVO = proxyDao.selectOne(MapperConstants.GOODS_MANAGE + "selectGoodsBasicInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemList = proxyDao.selectList(MapperConstants.GOODS_MANAGE + "selectGoodsItemInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemNewList = new ArrayList<>();
          // 특가일 경우 단품 정보에 특가 금액 추가
          if ("Y".equals(goodsDetailVO.getSpecialGoodsYn())) {
            SpecialGoodsSO specialGoodsSO = new SpecialGoodsSO();
            specialGoodsSO.setSpecialGoodsNo(goodsDetailVO.getSpecialGoodsNo());
            List<SpecialGoodsVO> specialItemList = specialGoodsManageService.selectSpecialItemList(specialGoodsSO);
            for (GoodsItemVO goodsItemVO : goodsItemList) {
              for (SpecialGoodsVO specialGoodsVO : specialItemList) {
                if (goodsItemVO.getItemNo().equals(specialGoodsVO.getItemNo())) {
                  goodsItemVO.setSpecialPrice(specialGoodsVO.getSpecialPrice());
                }
              }
              goodsItemNewList.add(goodsItemVO);
            }
            setVO.setGoodsItemList(goodsItemNewList);
          } else {
            setVO.setGoodsItemList(goodsItemList);
          }
          log.debug("===== setVO : {}", setVO);
          log.debug("===== setVO.getGoodsItemList() : {}", setVO.getGoodsItemList());
          goodsSetListNew.add(setVO);
        }
        gvo.setGoodsSetList(goodsSetListNew);
      }
      // 사은품 정보
      try {
        OrderSO freebieSO = new OrderSO();
        freebieSO.setOrdNo(gvo.getOrdNo());
        freebieSO.setOrdDtlSeq(gvo.getOrdDtlSeq());
        freebieList = selectOrdFreebieList(freebieSO);
        if (freebieList != null && freebieList.size() > 0) {
          gvo.setFreebieList(freebieList);
        }
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      log.debug("====== gvo : {}", gvo);
      newGoodsList.add(gvo);
    }
    // 주문 사은품 정보 조회
    List<OrderGoodsVO> ordFreebieList = new ArrayList<>();
    try {
      OrderSO freebieSO = new OrderSO();
      freebieSO.setOrdNo(vo.getOrdNo());
      freebieSO.setOrdDtlSeq("0");
      ordFreebieList = selectOrdFreebieList(freebieSO);
    } catch (Exception e) {
      log.debug("{}", e.getMessage());
    }

    // 부가 비용 목록
    List<OrderGoodsVO> ordAddedAmountList = selectAddedAmountList(vo);
    // 처리 로그 정보
    List<OrderGoodsVO> ordHistVOList = selectOrdDtlHistList(vo);

    // 클레임 이력
    List<ClaimGoodsVO> ordClaimGroupList = selectClaimGroupList(vo);
    // 관리자 클레임 처리용 데이터 조회
    List<ClaimGoodsVO> ordClaimListNew = selectClaimListNew(vo);

    // 추가 배송비 결제 정보
    List<OrderPayVO> ordDlvrPaymentList = selectOrderDlvrPayInfoList(vo);

    rVo.setOrdDlvrPaymentList(ordDlvrPaymentList);
    rVo.setOrderInfoVO(orderInfoVo);
    rVo.setOrderPayVO(payVo);
    rVo.setDeliveryVOList(deliveryVOList);
    rVo.setOrderGoodsVO(newGoodsList);
    rVo.setOrdAddedAmountList(ordAddedAmountList);
    rVo.setOrdHistVOList(ordHistVOList);
    // rVo.setOrdClaimList(ordClaimList);
    rVo.setOrdClaimGroupList(ordClaimGroupList);
    rVo.setOrdClaimListNew(ordClaimListNew);
    rVo.setOrdFreebieList(ordFreebieList);
    return rVo;
  }

  /**
   * <pre>
   * 작성일 : 2018. 1. 2.
   * 작성자 : proliebe
   * 설명   : 주문 취소/교환/환불 페이지 주문 상세 내역 조회(최종 할인 금액)
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 1. 2. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public OrderVO selectOrdAccountDtl(OrderInfoVO vo) throws CustomException {

    OrderVO rVo = new OrderVO();
    // 기본 정보
    OrderInfoVO orderInfoVo = selectOrdDtlInfo(vo);
    orderInfoVo = selectOrdStatusForward(orderInfoVo);
    orderInfoVo = selectOrdStatusBackward(orderInfoVo, "Y");
    orderInfoVo.setSiteNo(vo.getSiteNo());

    // 결제 정보 (최초 (적립금제외)결제 정보만 조회)
    List<OrderPayVO> payVo = selectOrgOrderPayInfo(vo);
    // 배송 정보 조회
    DeliveryVO delivVo = new DeliveryVO();
    delivVo.setOrdNo(vo.getOrdNo());
    List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);

    // 상품 정보
    List<OrderGoodsVO> goodsList = selectOrgOrdAccountDtlList(vo);
    List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

    for (OrderGoodsVO gvo : goodsList) {
      // 01.상품기본정보 조회
      GoodsDetailSO so = new GoodsDetailSO();
      so.setGoodsNo(gvo.getGoodsNo());
      // so.setItemNo(gvo.getItemNo());
      ResultModel<GoodsDetailVO> goodsInfo = goodsManageService.selectGoodsInfo(so);
      // 재주문시 필요한 데이터
      gvo.setPackStatusCd(goodsInfo.getData().getPackStatusCd());

      if ("Y".equals(orderInfoVo.getStoreYn())) {
        StoreManageSO storeManageSO = new StoreManageSO();
        storeManageSO.setSiteNo(gvo.getSiteNo());
        storeManageSO.setPartnerNo(gvo.getPartnerNo());
        storeManageSO.setStoreNo(gvo.getStoreNo());
        gvo.setStoreManageVO(storeManageService.selectStoreInfo(storeManageSO).getData());
      }

      try {
        // 02.단품정보
        String jsonList = "";
        if (goodsInfo.getData().getGoodsItemList() != null) {
          gvo.setGoodsItemList(goodsInfo.getData().getGoodsItemList());
          ObjectMapper mapper = new ObjectMapper();
          jsonList = mapper.writeValueAsString(goodsInfo.getData().getGoodsItemList());
        }
        gvo.setJsonList(jsonList);
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      gvo.setGoodsOptionList(goodsInfo.getData().getGoodsOptionList());
      gvo.setGoodsSetYn("N");
      // 세트 상품
      if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
        gvo.setGoodsSetYn("Y");
        List<OrderGoodsVO> goodsSetList = new ArrayList<>();
        List<OrderGoodsVO> goodsSetListNew = new ArrayList<>();
        goodsSetList = selectOrdGoodsSetList(gvo);

        for (OrderGoodsVO setVO : goodsSetList) {
          GoodsDetailSO goodsDetailSO = new GoodsDetailSO();
          goodsDetailSO.setGoodsNo(setVO.getGoodsNo());
          goodsDetailSO.setSaleYn("Y");
          goodsDetailSO.setDelYn("N");
          String[] goodsStatus = { "1", "2" };
          goodsDetailSO.setGoodsStatus(goodsStatus);
          GoodsDetailVO goodsDetailVO = proxyDao.selectOne(MapperConstants.GOODS_MANAGE + "selectGoodsBasicInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemList = proxyDao.selectList(MapperConstants.GOODS_MANAGE + "selectGoodsItemInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemNewList = new ArrayList<>();
          // 특가일 경우 단품 정보에 특가 금액 추가
          if ("Y".equals(goodsDetailVO.getSpecialGoodsYn())) {
            SpecialGoodsSO specialGoodsSO = new SpecialGoodsSO();
            specialGoodsSO.setSpecialGoodsNo(goodsDetailVO.getSpecialGoodsNo());
            List<SpecialGoodsVO> specialItemList = specialGoodsManageService.selectSpecialItemList(specialGoodsSO);
            for (GoodsItemVO goodsItemVO : goodsItemList) {
              for (SpecialGoodsVO specialGoodsVO : specialItemList) {
                if (goodsItemVO.getItemNo().equals(specialGoodsVO.getItemNo())) {
                  goodsItemVO.setSpecialPrice(specialGoodsVO.getSpecialPrice());
                }
              }
              goodsItemNewList.add(goodsItemVO);
            }
            setVO.setGoodsItemList(goodsItemNewList);
          } else {
            setVO.setGoodsItemList(goodsItemList);
          }
          log.debug("===== setVO : {}", setVO);
          log.debug("===== setVO.getGoodsItemList() : {}", setVO.getGoodsItemList());
          goodsSetListNew.add(setVO);
        }
        gvo.setGoodsSetList(goodsSetListNew);
      }
      newGoodsList.add(gvo);
    }

    // 부가 비용 목록
    List<OrderGoodsVO> ordAddedAmountList = selectAddedAmountList(vo);
    // 처리 로그 정보
    List<OrderGoodsVO> ordHistVOList = selectOrdDtlHistList(vo);
    // 클레임 이력
    List<ClaimGoodsVO> ordClaimList = selectClaimList(vo);
    // 추가 배송비 결제 정보
    List<OrderPayVO> ordDlvrPaymentList = selectOrderDlvrPayInfoList(vo);

    rVo.setOrdDlvrPaymentList(ordDlvrPaymentList);
    rVo.setOrderInfoVO(orderInfoVo);
    rVo.setOrderPayVO(payVo);
    rVo.setDeliveryVOList(deliveryVOList);
    rVo.setOrderGoodsVO(newGoodsList);
    rVo.setOrdAddedAmountList(ordAddedAmountList);
    rVo.setOrdHistVOList(ordHistVOList);
    rVo.setOrdClaimList(ordClaimList);
    return rVo;
  }

  /**
   * <pre>
   * 작성일 : 2018. 1. 2.
   * 작성자 : proliebe
   * 설명   : 주문 조회(정산 정보 등록 용도)
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 1. 2. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public OrderVO selectInsertAccountInfo(OrderInfoVO vo) throws CustomException {

    OrderVO rVo = new OrderVO();
    // 기본 정보
    OrderInfoVO orderInfoVo = selectOrdDtlInfo(vo);
    orderInfoVo = selectOrdStatusForward(orderInfoVo);
    orderInfoVo = selectOrdStatusBackward(orderInfoVo, "Y");
    orderInfoVo.setSiteNo(vo.getSiteNo());

    // 결제 정보 (최초 (적립금제외)결제 정보만 조회)
    List<OrderPayVO> payVo = selectOrgOrderPayInfo(vo);
    // 배송 정보 조회
    DeliveryVO delivVo = new DeliveryVO();
    delivVo.setOrdNo(vo.getOrdNo());
    List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);

    // 상품 정보
    List<OrderGoodsVO> goodsList = selectInsertAccountDtlInfoList(vo);
    List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

    for (OrderGoodsVO gvo : goodsList) {
      // 01.상품기본정보 조회
      GoodsDetailSO so = new GoodsDetailSO();
      so.setGoodsNo(gvo.getGoodsNo());
      // so.setItemNo(gvo.getItemNo());
      ResultModel<GoodsDetailVO> goodsInfo = goodsManageService.selectGoodsInfo(so);
      // 재주문시 필요한 데이터
      gvo.setPackStatusCd(goodsInfo.getData().getPackStatusCd());
      List<OrderGoodsVO> freebieList = new ArrayList<>();

      if ("Y".equals(orderInfoVo.getStoreYn())) {
        StoreManageSO storeManageSO = new StoreManageSO();
        storeManageSO.setSiteNo(gvo.getSiteNo());
        storeManageSO.setPartnerNo(gvo.getPartnerNo());
        storeManageSO.setStoreNo(gvo.getStoreNo());
        gvo.setStoreManageVO(storeManageService.selectStoreInfo(storeManageSO).getData());
      }

      try {
        // 02.단품정보
        String jsonList = "";
        if (goodsInfo.getData().getGoodsItemList() != null) {
          gvo.setGoodsItemList(goodsInfo.getData().getGoodsItemList());
          ObjectMapper mapper = new ObjectMapper();
          jsonList = mapper.writeValueAsString(goodsInfo.getData().getGoodsItemList());
        }
        gvo.setJsonList(jsonList);
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      gvo.setGoodsOptionList(goodsInfo.getData().getGoodsOptionList());
      gvo.setGoodsSetYn("N");
      // 세트 상품
      if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
        gvo.setGoodsSetYn("Y");
        List<OrderGoodsVO> goodsSetList = new ArrayList<>();
        List<OrderGoodsVO> goodsSetListNew = new ArrayList<>();
        goodsSetList = selectOrdGoodsSetList(gvo);

        for (OrderGoodsVO setVO : goodsSetList) {
          GoodsDetailSO goodsDetailSO = new GoodsDetailSO();
          goodsDetailSO.setGoodsNo(setVO.getGoodsNo());
          goodsDetailSO.setSaleYn("Y");
          goodsDetailSO.setDelYn("N");
          String[] goodsStatus = { "1", "2" };
          goodsDetailSO.setGoodsStatus(goodsStatus);
          GoodsDetailVO goodsDetailVO = proxyDao.selectOne(MapperConstants.GOODS_MANAGE + "selectGoodsBasicInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemList = proxyDao.selectList(MapperConstants.GOODS_MANAGE + "selectGoodsItemInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemNewList = new ArrayList<>();
          // 특가일 경우 단품 정보에 특가 금액 추가
          if ("Y".equals(goodsDetailVO.getSpecialGoodsYn())) {
            SpecialGoodsSO specialGoodsSO = new SpecialGoodsSO();
            specialGoodsSO.setSpecialGoodsNo(goodsDetailVO.getSpecialGoodsNo());
            List<SpecialGoodsVO> specialItemList = specialGoodsManageService.selectSpecialItemList(specialGoodsSO);
            for (GoodsItemVO goodsItemVO : goodsItemList) {
              for (SpecialGoodsVO specialGoodsVO : specialItemList) {
                if (goodsItemVO.getItemNo().equals(specialGoodsVO.getItemNo())) {
                  goodsItemVO.setSpecialPrice(specialGoodsVO.getSpecialPrice());
                }
              }
              goodsItemNewList.add(goodsItemVO);
            }
            setVO.setGoodsItemList(goodsItemNewList);
          } else {
            setVO.setGoodsItemList(goodsItemList);
          }
          log.debug("===== setVO : {}", setVO);
          log.debug("===== setVO.getGoodsItemList() : {}", setVO.getGoodsItemList());
          goodsSetListNew.add(setVO);
        }

        gvo.setGoodsSetList(goodsSetListNew);
      }
      // 사은품 정보
      try {
        OrderSO freebieSO = new OrderSO();
        freebieSO.setOrdNo(gvo.getOrdNo());
        freebieSO.setOrdDtlSeq(gvo.getOrdDtlSeq());
        freebieList = selectOrdFreebieList(freebieSO);
        if (freebieList != null && freebieList.size() > 0) {
          gvo.setFreebieList(freebieList);
        }
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      newGoodsList.add(gvo);
    }

    // 부가 비용 목록
    List<OrderGoodsVO> ordAddedAmountList = selectAddedAmountList(vo);
    // 처리 로그 정보
    List<OrderGoodsVO> ordHistVOList = selectOrdDtlHistList(vo);
    // 클레임 이력
    List<ClaimGoodsVO> ordClaimList = selectClaimList(vo);
    // 추가 배송비 결제 정보
    List<OrderPayVO> ordDlvrPaymentList = selectOrderDlvrPayInfoList(vo);

    rVo.setOrdDlvrPaymentList(ordDlvrPaymentList);
    rVo.setOrderInfoVO(orderInfoVo);
    rVo.setOrderPayVO(payVo);
    rVo.setDeliveryVOList(deliveryVOList);
    rVo.setOrderGoodsVO(newGoodsList);
    rVo.setOrdAddedAmountList(ordAddedAmountList);
    rVo.setOrdHistVOList(ordHistVOList);
    rVo.setOrdClaimList(ordClaimList);
    return rVo;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 12. 5.
   * 작성자 : 권용재
   * 설명   : 배송비 결제 정보 리스트 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 12. 5. kyj832 - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public List<OrderPayVO> selectOrderDlvrPayInfoList(OrderInfoVO vo) {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrderDlvrPayInfoList", vo);
  }

  /**
   * <pre>
   * 작성일 : 2017. 11. 27.
   * 작성자 : proliebe
   * 설명   : 주문 클레임 상세 정보 조회
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 27. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public OrderVO selectOrdClaimDtl(OrderInfoVO vo) throws CustomException {

    OrderVO rVo = new OrderVO();
    // 기본 정보
    OrderInfoVO orderInfoVO = selectOrdDtlInfo(vo);
    orderInfoVO.setSiteNo(vo.getSiteNo());

    // 재주문 여부 확인
    OrderInfoVO reOrderInfoVO = reOrderService.selectCheckReOrderYn(Long.parseLong(vo.getOrdNo()));

    // 결제 정보 (최초 (적립금제외)결제 정보만 조회)
    List<OrderPayVO> payVo = selectOrgOrderPayInfo(vo);
    // 배송 정보 조회
    DeliveryVO delivVo = new DeliveryVO();
    delivVo.setOrdNo(vo.getOrdNo());
    List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);
    // 상품 정보
    Map<String, String> map = new HashMap<String, String>();
    map.put("ordNo", orderInfoVO.getOrdNo());
    map.put("siteNo", Long.toString(vo.getSiteNo()));
    map.put("claimTurn", Integer.toString(vo.getClaimTurn()));
    List<OrderGoodsVO> goodsList = new ArrayList<>();
    goodsList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdClaimDtlList", map);
    try {
      // 모바일 실시간계좌이체 noti가 늦게 오는 경우를 대비한 로직
      if (goodsList == null) {
        for (int i = 0; i < 3; i++) {
          Thread.sleep(1000);
          goodsList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdClaimDtlList", map);
          if (goodsList != null) {
            break;
          }
        }
      }
    } catch (Exception e) {
    }
    log.debug("vo.getPostNo()1 : {}", goodsList.get(0).getDtlAddr());
    List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

    for (OrderGoodsVO gvo : goodsList) {
      // 01.상품기본정보 조회
      GoodsDetailSO so = new GoodsDetailSO();
      so.setGoodsNo(gvo.getGoodsNo());
      // so.setItemNo(gvo.getItemNo());
      ResultModel<GoodsDetailVO> goodsInfo = goodsManageService.selectGoodsInfo(so);

      try {
        // 02.단품정보
        String jsonList = "";
        if (goodsInfo.getData().getGoodsItemList() != null) {
          gvo.setGoodsItemList(goodsInfo.getData().getGoodsItemList());
          ObjectMapper mapper = new ObjectMapper();
          jsonList = mapper.writeValueAsString(goodsInfo.getData().getGoodsItemList());
        }
        gvo.setJsonList(jsonList);
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      gvo.setGoodsOptionList(goodsInfo.getData().getGoodsOptionList());

      // 세트 상품
      if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
        OrderGoodsVO ogVO = new OrderGoodsVO();
        ogVO.setOrdNo(gvo.getOrdNo());
        ogVO.setOrdDtlSeq(gvo.getOrdDtlSeq());
        ogVO.setGoodsSetNo(gvo.getGoodsSetNo());
        List<OrderGoodsVO> goodsSetList = new ArrayList<>();
        List<OrderGoodsVO> goodsSetListNew = new ArrayList<>();
        goodsSetList = selectOrdGoodsSetList(ogVO);

        for (OrderGoodsVO setVO : goodsSetList) {
          GoodsDetailSO goodsDetailSO = new GoodsDetailSO();
          goodsDetailSO.setGoodsNo(setVO.getGoodsNo());
          goodsDetailSO.setSaleYn("Y");
          goodsDetailSO.setDelYn("N");
          String[] goodsStatus = { "1", "2" };
          goodsDetailSO.setGoodsStatus(goodsStatus);
          GoodsDetailVO goodsDetailVO = proxyDao.selectOne(MapperConstants.GOODS_MANAGE + "selectGoodsBasicInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemList = proxyDao.selectList(MapperConstants.GOODS_MANAGE + "selectGoodsItemInfo",
              goodsDetailSO);
          List<GoodsItemVO> goodsItemNewList = new ArrayList<>();
          // 특가일 경우 단품 정보에 특가 금액 추가
          if ("Y".equals(goodsDetailVO.getSpecialGoodsYn())) {
            SpecialGoodsSO specialGoodsSO = new SpecialGoodsSO();
            specialGoodsSO.setSpecialGoodsNo(goodsDetailVO.getSpecialGoodsNo());
            List<SpecialGoodsVO> specialItemList = specialGoodsManageService.selectSpecialItemList(specialGoodsSO);
            for (GoodsItemVO goodsItemVO : goodsItemList) {
              for (SpecialGoodsVO specialGoodsVO : specialItemList) {
                if (goodsItemVO.getItemNo().equals(specialGoodsVO.getItemNo())) {
                  goodsItemVO.setSpecialPrice(specialGoodsVO.getSpecialPrice());
                }
              }
              goodsItemNewList.add(goodsItemVO);
            }
            setVO.setGoodsItemList(goodsItemNewList);
          } else {
            setVO.setGoodsItemList(goodsItemList);
          }
          log.debug("===== setVO : {}", setVO);
          log.debug("===== setVO.getGoodsItemList() : {}", setVO.getGoodsItemList());
          goodsSetListNew.add(setVO);
        }
        gvo.setGoodsSetList(goodsSetListNew);
      }
      newGoodsList.add(gvo);
    }

    // 부가 비용 목록
    List<OrderGoodsVO> ordAddedAmountList = selectAddedAmountList(vo);
    // 처리 로그 정보
    List<OrderGoodsVO> ordHistVOList = selectOrdDtlHistList(vo);
    // 클레임 이력
    List<ClaimGoodsVO> ordClaimList = selectClaimList(vo);

    // 추가 배송비 결제 정보 조회
    String tmpOrdNo = "";
    if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
      tmpOrdNo = vo.getOrdNo();
      vo.setOrdNo(reOrderInfoVO.getOrgOrdNo());
    }
    OrderPayVO dlvrPayVO = selectOrderDlvrPayInfo(vo);
    // 추가 배송비 결제 취소 정보 조회
    vo.setPaymentReasonCd("01");
    vo.setPaymentStatusCd("03");
    vo.setClaimTurn(null);
    OrderPayVO claimDlvrPayVO = selectOrderDlvrPayInfo(vo);
    log.debug("vo.getPostNo()2 : {}", newGoodsList.get(0).getDtlAddr());

    // 취소 일반 사은품 정보
    OrderSO cSO = new OrderSO();
    cSO.setOrdNo(vo.getOrdNo());
    cSO.setClaimTurn(vo.getClaimTurn());
    List<OrderGoodsVO> cancelFreebieList = selectCancelFreebieList(cSO);
    rVo.setCancelFreebieList(cancelFreebieList);

    if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
      vo.setOrdNo(tmpOrdNo);
    }

    rVo.setOrderInfoVO(orderInfoVO);
    rVo.setOrderPayVO(payVo);
    rVo.setOrderDlvrPayVO(dlvrPayVO);
    rVo.setClaimDlvrPayVO(claimDlvrPayVO);
    rVo.setDeliveryVOList(deliveryVOList);
    rVo.setOrderGoodsVO(newGoodsList);
    rVo.setOrdAddedAmountList(ordAddedAmountList);
    rVo.setOrdHistVOList(ordHistVOList);
    rVo.setOrdClaimList(ordClaimList);
    return rVo;

  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 17.
   * 작성자 : 박근정
   * 설명   : 주문번호를 변수로 받아 주문한 상품 목록 정보를 조회
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 17. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public List<OrderGoodsVO> selectOrdDtlList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdDtlList", vo);
  }

  /**
   * <pre>
   * 작성일 : 2017. 11. 30.
   * 작성자 : 권용재
   * 설명   : 주문번호를 변수로 받아 주문한 상품 목록 정보를 조회
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 30. 권용재 - 최초생성
   * </pre>
   *
   * @return
   */
  public List<OrderGoodsVO> selectOrdGoodsDtlList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdGoodsDtlList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 10. 27.
   * 작성자 : Gongi
   * 설명   : 주문번호를 변수로 받아 주문한 상품 목록 정보를 조회(최초의 배송비 출력)
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 10. 27. Gongi - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  public List<OrderGoodsVO> selectOrgOrdDtlList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrgOrdDtlList", vo);
  }

  public List<OrderGoodsVO> selectOrgOrdDtlRefundList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrgOrdDtlRefundList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2018. 1. 2.
   * 작성자 : proliebe
   * 설명   : 주문한 상품 목록 정보 조회(최종 할인 금액)
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 1. 2. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  public List<OrderGoodsVO> selectOrgOrdAccountDtlList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrgOrdAccountDtlList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2018. 1. 2.
   * 작성자 : proliebe
   * 설명   : 주문 상품 정보 조회(정산 정보 등록 용도)
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 1. 2. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  public List<OrderGoodsVO> selectInsertAccountDtlInfoList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectInsertAccountDtlInfoList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 10. 30.
   * 작성자 : proliebe
   * 설명   : 주문번호를 변수로 받아 주문한 세트 상품 목록 정보를 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 10. 30. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  public List<OrderGoodsVO> selectOrdGoodsSetList(OrderGoodsVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdGoodsSetList", vo);
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 27.
   * 작성자 : 박근정
   * 설명   : 주문 메모 등록
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 27. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public boolean insertOrdMemo(OrderInfoPO po) throws CustomException {
    int rCnt = 0;
    po.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
    rCnt = proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderMemo", po);
    return (rCnt > 0) ? true : false;
  }

  /**
   * 상품의 옵션을 수정
   */
  public boolean updateOrdDtlOption(OrderGoodsVO vo) throws CustomException {
    int rCnt = 0;
    try {
      vo.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      rCnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlOption", vo);
      // 새 itemNo 재고 감소
      proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStock", vo);
      // 이전 itemNo 재고 복귀(증가)
      vo.setItemNo(vo.getOldItemNo());
      vo.setOrdQtt(vo.getOrdQtt() * -1);
      proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStock", vo);
    } catch (Exception e) {
      log.debug("{}", e.getMessage());
    }
    return (rCnt > 0) ? true : false;
  }

  /**
   * <pre>
   * 작성일 : 2016. 6. 7.
   * 작성자 : 박근정
   * 설명   : 주문 1건의 주문상태를 변경한다.
   *
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 6. 7. 박근정 - 최초생성
   * </pre>
   *
   * @param vo
   *          주문번호 & 주문상세번호 && 상품 번호(선택)
   * @param curOrdStatusCd
   *          현재주문상태
   * @return
   */
  @Override
  public ResultModel<OrderInfoVO> updateOrdStatus(OrderGoodsVO vo, String curOrdStatusCd) throws CustomException {
    OrderGoodsVO curVo = selectCurOrdStatus(vo);
    if (vo.getRegrNo() == null || ("").equals(vo.getRegrNo())) {
      vo.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      vo.setSiteNo(siteService.getSiteNo());
    }

    ResultModel<OrderInfoVO> result = new ResultModel<>();
    try {
      if ("".equals(curVo.getOrdStatusCd())) {
        throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
      }
      // 변경 하려는 시점의 주문상세상태(주문상태)가 현재 상태와 같은 경우면 상태 변경
      if ((curVo.getOrdDtlStatusCd() != null && curOrdStatusCd.equals(curVo.getOrdDtlStatusCd()))
          || curVo.getOrdStatusCd().equals(curOrdStatusCd)) {
        vo.setCurOrdStatusCd(curOrdStatusCd);
        int cnt = 0;
        try {
          // 구매 확정일 경우 에스크로 처리 성공일 경우만 상태 변경 16.09.30 - 웹표준으로 변경하면서 tx방식으로 호출 안함 18.02.22
          if ("90".equals(vo.getOrdStatusCd())) {
            // Map<String, Object> reqMap = new HashMap<String, Object>();
            // ModelAndView mav = new ModelAndView();
            // String method = "confirm"; // 구매확정
            // DeliveryPO po = new DeliveryPO();
            // po.setOrdNo(vo.getOrdNo());
            // po.setOrdDtlSeq(vo.getOrdDtlSeq());
            // // 에스크로 처리
            // ResultModel<PaymentModel<?>> resultModel = deliveryService.doEscrowAction(po,
            // reqMap, mav,
            // method);
            // if (resultModel.isSuccess()) {
            // proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatus", vo);
            // cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlStatus",
            // vo);
            // }
            proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatus", vo);
            cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlStatus", vo);
          } else {
            if ("20".equals(vo.getOrdStatusCd()) && "10".equals(curOrdStatusCd)) {
              // 관리자 결제완료 처리
              if (vo.getPaymentCmpltDttm() == null || "".equals(vo.getPaymentCmpltDttm())) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Date today = new Date();
                vo.setPaymentCmpltDttm(df.format(today)); // 결제 완료 일시
              }
            } else {
              // 프론트 결제완료 처리
              vo.setPaymentCmpltDttm(vo.getPaymentCmpltDttm());
            }
            proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatus", vo);
            cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlStatus", vo);
          }
        } catch (Exception e) {
          log.debug("{}", e.getMessage());
          throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
        }

        /** 무통장 결제완료 처리시 현금영수증 신청건에 한해서 현금영수증 발행 처리 **/
        log.debug("vo.getOrdStatusCd() " + vo.getOrdStatusCd());
        log.debug("vo.getCurOrdStatusCd() " + vo.getCurOrdStatusCd());

        if ("20".equals(vo.getOrdStatusCd()) && "10".equals(vo.getCurOrdStatusCd())) {
          // 현금영수증 신청정보 조회
          try {
            SalesProofVO salesProofVO = new SalesProofVO();
            salesProofVO.setSiteNo(vo.getSiteNo());
            salesProofVO.setOrdNo(vo.getOrdNo());
            ResultModel<SalesProofVO> spResult = salesProofService.selectCashRct(salesProofVO);

            if (spResult.getData() != null && "01".equals(spResult.getData().getCashRctStatusCd())) {
              salesProofVO.setProofType("02");
              try {
                salesProofService.depositIssueCashRct(salesProofVO);
              } catch (Exception e) {
                log.debug("[[현금영수증 발급 실패]]");
                log.debug("{}", e.getMessage());
              }
            }
          } catch (Exception e) {
            log.debug("[[무통장입금 신청건 조회 실패]]");
            log.debug("{}", e.getMessage());
          }
        }

        if (cnt > 0) {
          String sendTypeCdSms = "", sendTypeCdEmail = "";
          // 주문 테이블의 주문 상태 : 배송중, 배송 완료를 배송중 배송 완료로 변경 <== 앞으로 이부분을 어떻게 할지 생각해봐야함(from
          // 2017.12.07 김찬호)
          if (OrdStatusConstants.DELIV_DOING.equals(vo.getOrdStatusCd())
              || OrdStatusConstants.DELIV_DONE.equals(vo.getOrdStatusCd())) {
            updateOrdStatusDone(vo);
            OrderGoodsVO tmpVo = selectCurOrdStatus(vo);
            // 주문 상태에 따른 이메일, SMS 처리
            // 주문상태가 변경되는 경우만 처리
            if (!vo.getOrdStatusCd().equals(tmpVo.getOrdStatusCd())) {
              if (OrdStatusConstants.DELIV_DOING.equals(tmpVo.getOrdStatusCd())) { // 주문 마스터 배송중일경우
                sendTypeCdSms = "06";
                sendTypeCdEmail = "11";
              }
            } else { // 변경 안된 경우
              if (OrdStatusConstants.DELIV_DOING.equals(vo.getOrdStatusCd())) { // 배송중
                sendTypeCdSms = "06";
                sendTypeCdEmail = "11";
              }
            }
            // 주문 상태에 따른 이메일, SMS 처리(배송관련 이외)
          } else if (!curOrdStatusCd.equals(vo.getOrdStatusCd())) {
            /**
             * SMS 주문완료 시(택배배송) : 03 주문취소 시 : 04 배송중 : 05 반품/교환신청 : 06 반품신청 : 07 환불처리 : 08
             * 품절알림 : 09 반품/교환완료 : 10 반품완료 : 11 반품/환불신청 : 12 반품/환불완료 : 13
             **/
            /**
             * Email 주문완료(매장수령) : 08 주문완료(택배배송) : 09 주문취소 : 10 배송중 : 11 구매확정요청 : 12 자동구매확정완료
             * : 13 교환신청 : 14 품절알림 : 15 교환완료 : 16 반품신청 : 17 반품완료 : 18
             **/

            if (OrdStatusConstants.PAY_DONE.equals(vo.getOrdStatusCd())) {
              if ("Y".equals(vo.getStoreYn())) {
                sendTypeCdSms = "04";
                sendTypeCdEmail = "08";
              } else {
                sendTypeCdSms = "03";
                sendTypeCdEmail = "09";
              }
              // 가상계좌 무통장 결제의 경우 재고 차감 및 입금완료 정보 수정
              depositService.updateOrdStatusPayDoneCommon(vo, curOrdStatusCd);
            } else if (OrdStatusConstants.BUY_CONFIRM.equals(vo.getOrdStatusCd())) {
              sendTypeCdSms = ""; // 알림톡은 구매확정이 없다
              sendTypeCdEmail = "13";
            }
          }
          try {
            if (!"N".equals(vo.getSmsEmailYn())) { // 환불철회, 교환철회 관련 주문상태변경 처리일경우 발송 안함
              if (!"".equals(sendTypeCdSms) && !"Y".equals(vo.getConfirmBatchYn())) {
                sendOrdAutoSms(sendTypeCdSms, vo);
              }
              if (!"".equals(sendTypeCdEmail)) {
                boolean sendFlag = true;
                // 배치 자동구매확정이면 한번만 발송되도록 발송된기록이 있나 검증
                if ("Y".equals(vo.getConfirmBatchYn())) {
                  OrderInfoVO paramVo = new OrderInfoVO();
                  paramVo.setOrdNo(vo.getOrdNo());
                  paramVo.setMailTypeCd("13");
                  int mailResult = proxyDao.selectOne(MapperConstants.EMAIL + "selectSendOrderEmailInfo", paramVo);

                  if (mailResult > 0) {
                    sendFlag = false;
                  }
                }

                if (sendFlag) {
                  sendOrdAutoEmail(sendTypeCdEmail, vo);
                }
              }
            }
          } catch (Exception eAuto) {
            log.debug("{}", eAuto.getMessage());
          }
          try {
            /** 주문 상품 구매 확정 처리 **/
            updateOrdDtlStatusCdConfirm(vo);
            /** 주문 마스터 구매 확정 처리 **/
            updateOrdStatusCdConfirm(vo);
          } catch (Exception e) {
            log.debug("{}", e.getMessage());
          }

          String args[] = { "1" };
          result.setMessage(MessageUtil.getMessage("biz.result.ord.updateOrdStatus", args));
        } else { // 주문번호[{0}]의 상태를 변경할 수 없습니다.
          throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
        }
      } else { // 주문번호[{0}]의 주문상태를 다시 확인하세요
        throw new CustomException("biz.exception.ord.invalidOrdStatus", new Object[] { vo.getOrdNo() });
      }
    } catch (Exception e) {
      log.debug("{}", e.getMessage());
      throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
    }
    return result;
  }

  /**
   * <pre>
   * 작성일 : 2018. 4. 10.
   * 작성자 : RACCOON
   * 설명   : 교환완료 상태의 주문을 구매확정상태로 변경한다
   *
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 4. 10. RACCOON - 최초생성
   * </pre>
   *
   * @param vo
   *          주문번호 & 주문상세번호 && 상품 번호(선택)
   * @param curOrdStatusCd
   *          현재주문상태
   * @return
   */
  @Override
  public ResultModel<OrderInfoVO> updateOrdExchangeStatus(OrderGoodsVO vo, String curOrdStatusCd)
      throws CustomException {
    OrderGoodsVO curVo = selectCurOrdStatus(vo);
    if (vo.getRegrNo() == null || ("").equals(vo.getRegrNo())) {
      vo.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      vo.setSiteNo(siteService.getSiteNo());
    }

    ResultModel<OrderInfoVO> result = new ResultModel<>();
    try {
      if ("".equals(curVo.getOrdStatusCd())) {
        throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
      }

      int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlExChangeStatusCdConfirm", vo);

      if (cnt > 0) { // 교환완료에서 구매확정으로 변경시!!
        /** 주문 상품 구매 확정 처리 **/
        updateOrdDtlStatusCdConfirm(vo);
        /** 주문 마스터 구매 확정 처리 **/
        updateOrdStatusCdConfirm(vo);
      }

    } catch (Exception e) {
      log.debug("{}", e.getMessage());
      throw new CustomException("biz.exception.ord.failUpdateOrdStatus", new Object[] { vo.getOrdNo() });
    }
    return result;
  }

  /**
   * <pre>
   * 작성일 : 2016. 6. 7.
   * 작성자 : 박근정
   * 설명   : 주문 1건의 주문상태를 변경한다. 주문 번호, 현재 주문상태 필수
   * 상태 코드 부분배송[준비]중을 전체완료로 변경
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 6. 7. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public ResultModel<OrderInfoVO> updateOrdStatusDone(OrderGoodsVO vo) throws CustomException {

    ResultModel<OrderInfoVO> result = new ResultModel<>();
    if (vo.getRegrNo() == null || ("").equals(vo.getRegrNo())) {
      vo.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      vo.setSiteNo(siteService.getSiteNo());
    }
    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatusDone", vo);
    if (cnt > 0)
      result.setMessage(MessageUtil.getMessage("biz.common.update"));
    return result;
  }

  /**
   * TO_PAYMENT 테이블 주문 상태 변경
   */
  @Override
  public ResultModel<OrderPayVO> updatePaymentStatus(PaymentModel model) throws CustomException {
    ResultModel<OrderPayVO> result = new ResultModel<>();
    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updatePaymentStatus", model);
    if (cnt > 0)
      result.setMessage(MessageUtil.getMessage("biz.common.update"));
    return result;
  }

  /**
   * TO_DLVR_PAYMENT 테이블 주문 상태 변경
   */
  @Override
  public ResultModel<OrderPayVO> updateDlvrPaymentStatus(PaymentModel model) throws CustomException {
    ResultModel<OrderPayVO> result = new ResultModel<>();
    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateDlvrPaymentStatus", model);
    if (cnt > 0)
      result.setMessage(MessageUtil.getMessage("biz.common.update"));
    return result;
  }

  /**
   * <pre>
   * 작성일 : 2016. 9. 28.
   * 작성자 : KNG
   * 설명   : PG 입금통보 입금정보 수신시 주문, 주문상세, 결제, 현금영수증 테이블 정보를 변경 및 추가하는 작업
   *
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 9. 28. KNG - 최초생성
   * </pre>
   *
   * @param vo
   * @param model
   * @return
   * @throws CustomException
   * @throws Exception
   */
  @Override
  public ResultModel<OrderPayVO> updatePaymentStatusByDepositNotice(OrderGoodsVO vo, PaymentModel model)
      throws CustomException, Exception {
    // 주문-주문상세 상태업데이트
    this.updateOrdStatus(vo, "10");// 주문완료 => 결제완료

    // 결제테이블 update
    ResultModel<OrderPayVO> result = new ResultModel<>();
    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updatePaymentStatusByDepositNotice", model);
    if (cnt > 0)
      result.setMessage(MessageUtil.getMessage("biz.common.update"));

    // 현금영수증 DB 인서트 처리 : 입금과 내역과 함께 현금영수증 정보를 등록하려면 CashRctYn = "Y" 로 처리
    if ("Y".equals(model.getCashRctYn()) && !StringUtil.isEmpty(model.getPaymentAmt())) { // 현금영수증
      log.debug("=== 현금영수증 발행 ===");
      SalesProofPO cashPO = new SalesProofPO();
      cashPO.setOrdNo(model.getOrdNo());
      cashPO.setCashRctStatusCd("02"); // 상태코드(01:접수,02:승인,03:오류)
      cashPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
      cashPO.setMemberNo(Long.parseLong((StringUtil.isEmpty(model.getOrdrNo())) ? "0" : model.getOrdrNo()));
      cashPO.setUseGbCd(model.getUseGbCd()); // 사용구분코드(01:소득공제, 02:지출증빙)
      cashPO.setIssueWayCd(model.getIssueWayCd()); // 발급수단코드(01:주민등록번호,02:휴대폰,03:사업자등록번호)
      cashPO.setIssueWayNo(model.getIssueWayNo()); // 발급수단번호
      cashPO.setTotAmt(Float.valueOf(model.getPaymentAmt())); // 총금액
      cashPO.setAcceptDttm(model.getRegDttm()); // 접수일시
      cashPO.setLinkTxNo(model.getLinkTxNo());
      cashPO.setApplicantNm(model.getApplicantNm()); // 신청자명
      cashPO.setRegrNo(model.getRegrNo()); // 등록자
      cashPO.setRegDttm(model.getRegDttm()); // 등록일자
      salesProofService.insertCashRct(cashPO);
    }

    return result;
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 31.
   * 작성자 : 박근정
   * 설명   : 클레임 이력
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 31. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public List<ClaimGoodsVO> selectClaimList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectClaimList", vo);
  }

  public List<ClaimGoodsVO> selectClaimListNew(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectClaimListNew", vo);
  }

  public List<ClaimGoodsVO> selectClaimGroupList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectClaimGroupList", vo);
  }

  /** 처리 로그 이력 조회 */
  public List<OrderGoodsVO> selectOrdDtlHistList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdDtlHistList", vo);
  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 13.
   * 작성자 : 박근정
   * 설명   : 주문의 현재 주문상태코드를 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 13. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  public OrderGoodsVO selectCurOrdStatus(OrderGoodsVO vo) throws CustomException {
    OrderGoodsVO rVo = new OrderGoodsVO();
    rVo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectCurOrdStatus", vo);
    return rVo;
  }

  /********************************************************************************************************/
  /**
   * 주문 프로세스
   */
  @Override
  public ResultModel<OrderPO> insertOrder(OrderPO po, HttpServletRequest request) throws Exception {
    ResultModel<OrderPO> result = new ResultModel<>();
    try {

      Enumeration params = request.getParameterNames();
      log.debug("----------------------------");
      while (params.hasMoreElements()) {
        String name = (String) params.nextElement();
        log.debug("=== {} : {}", name, request.getParameter(name));
      }
      log.debug("----------------------------");

      boolean isMobile = SiteUtil.isMobile();
      Date today = po.getRegDttm();

      // step01. 주문 데이터 확인 및 검증
      Float chkPaymentAmt = 0f; // 총 주문금액 확인용(위변조 방지)
      long ordNo = po.getOrdNo();
      int partnerNo = siteService.getPartnerNo();
      OrderInfoPO orderInfoPO = new OrderInfoPO();
      GoodsDetailSO goodsDetailSO = new GoodsDetailSO();
      // step01-1.주문 정보&배송지 정보
      log.debug("step01-1.주문 정보");
      orderInfoPO.setOrdNo(ordNo); // 주문번호
      orderInfoPO.setSiteNo(po.getSiteNo()); // 사이트번호
      orderInfoPO.setPartnerNo(partnerNo); // 파트너번호
      orderInfoPO.setOrdStatusCd("01"); // 주문상태(주문접수)
      if (isMobile) { // 수기주문은 추후 따로 처리
        orderInfoPO.setOrdMediaCd("02"); // 주문매체(모바일)
      } else {
        orderInfoPO.setOrdMediaCd("01"); // 주문매체(PC)
      }
      orderInfoPO.setSaleChannelCd("shop9999");
      String gaId = CookieUtil.getCookie(request, "_ga");
      orderInfoPO.setGaId(gaId);
      long memberNo = 0;
      String loginId = "";
      long memberGradeNo = 0;
      if (SessionDetailHelper.getDetails().isLogin()) {
        memberNo = SessionDetailHelper.getDetails().getSession().getMemberNo();
        loginId = SessionDetailHelper.getDetails().getSession().getLoginId();
        memberGradeNo = SessionDetailHelper.getDetails().getSession().getMemberGradeNo() == null ? 0
            : SessionDetailHelper.getDetails().getSession().getMemberGradeNo();
        orderInfoPO.setMemberOrdYn("Y"); // 회원 주문 여부(회원)
      } else {
        orderInfoPO.setMemberOrdYn("N"); // 회원 주문 여부(비회원)
      }
      orderInfoPO.setMemberNo(memberNo); // 회원번호
      orderInfoPO.setRegrNo(memberNo); // 등록자 번호
      orderInfoPO.setLoginId(loginId); // 로그인아이디
      orderInfoPO.setMemberGradeNo(memberGradeNo); // 회원등급

      orderInfoPO.setOrdrNm(request.getParameter("ordrNm")); // 주문자명
      orderInfoPO.setOrdrEmail(request.getParameter("ordrEmail")); // 주문자 이메일
      orderInfoPO.setOrdrTel(request.getParameter("ordrTel")); // 주문자 전화번호
      orderInfoPO.setOrdrMobile(request.getParameter("ordrMobile")); // 주문자 휴대폰번호
      orderInfoPO.setOrdrIp(request.getRemoteAddr()); // 주문자 IP
      orderInfoPO.setOrdAcceptDttm(today); // 주문 접수 일자
      orderInfoPO.setPaymentAmt(po.getPaymentAmt() + po.getMileageTotalAmt()); // 결제금액(+적립금)
      orderInfoPO.setSaleAmt(
          Float.parseFloat(request.getParameter("orderTotalAmt")) + Float.parseFloat(request.getParameter("presentAmt"))
              + Float.parseFloat(request.getParameter("suitcaseAmt"))); // 판매금액
      orderInfoPO.setDcAmt(po.getDcAmt()); // 할인금액
      orderInfoPO.setShoppingbagAmt(po.getShoppingbagTotalAmt()); // 쇼핑백금액
      chkPaymentAmt += po.getShoppingbagTotalAmt();
      orderInfoPO.setRegDttm(today); // 등록일자
      orderInfoPO
          .setManualOrdYn((request.getParameter("manualOrdYn") == null) ? "N" : request.getParameter("manualOrdYn"));
      // 배송지 정보
      String memberGbCd = request.getParameter("memberGbCd");
      orderInfoPO.setMemberGbCd(memberGbCd);
      orderInfoPO.setAdrsTel(request.getParameter("adrsTel"));
      orderInfoPO.setAdrsMobile(request.getParameter("adrsMobile"));
      if ("10".equals(memberGbCd)) { // 국내
        orderInfoPO.setAdrsNm(request.getParameter("adrsNm"));
        orderInfoPO.setPostNo(request.getParameter("postNo"));
        orderInfoPO.setNumAddr(request.getParameter("numAddr"));
        orderInfoPO.setRoadnmAddr(request.getParameter("roadnmAddr"));
        orderInfoPO.setDtlAddr(request.getParameter("dtlAddr"));
      } else { // 해외
        orderInfoPO.setFrgAddrCountry(request.getParameter("frgAddrCountry"));
        orderInfoPO.setFrgAddrCity(request.getParameter("frgAddrCity"));
        orderInfoPO.setFrgAddrState(request.getParameter("firgAddrState"));
        orderInfoPO.setFrgAddrZipCode(request.getParameter("frgAddrZipCode"));
        orderInfoPO.setFrgAddrDtl1(request.getParameter("frgAddrDtl1"));
        orderInfoPO.setFrgAddrDtl2(request.getParameter("frgAddrDtl2"));
      }
      orderInfoPO.setDlvrMsg(request.getParameter("dlvrMsg"));

      po.setOrderInfoPO(orderInfoPO);

      // step01-2.주문 상품 정보
      log.debug("step01-2.주문 상품 정보");
      ObjectMapper mapper = new ObjectMapper();
      JSONParser parser = new JSONParser();
      Object obj = parser.parse(po.getItemArr());
      JSONArray jsonArray = (JSONArray) obj;
      log.debug(" ==== itemArr : {}", jsonArray);
      List<OrderGoodsPO> orderGoodsList = new ArrayList<>();
      int ordDtlSeq = 1; // 상세 순번
      boolean areaDlvrApplyYn = false; // 지역추가 배송비 적용 여부
      String grpId = "";
      String preGrpId = "";
      long prmtGrpNo = Long.parseLong((String) request.getParameter("prmtGrpNo"));
      Float totalGoodsPrmtDcAmt = 0f; // 상품 프로모션 총 금액
      Float totalGoodsCpDcAmt = 0f; // 상품 쿠폰 총 금액
      Float totalOrdPrmtDcAmt = 0f; // 주문 프로모션 총 금액
      Float totalOrdCpDcAmt = 0f; // 주문 쿠폰 총 금액
      Float totalOrdDupltPrmtDcAmt = 0f; // 주문 중복 프로모션 총 금액
      Float totalOrdDupltCpDcAmt = 0f; // 주문 중복 쿠폰 총 금액
      long ordPrmtGrpNo = 0;
      long ordPrmtNo = 0;
      String ordPrmtKindCd = "";
      long ordDupltPrmtGrpNo = 0;
      long ordDupltPrmtNo = 0;
      String ordDupltPrmtKindCd = "";
      int goodsMemberCpNo = 0; // 상품 회원 쿠폰 번호
      int ordMemberCpNo = 0; // 주문 회원 쿠폰 번호
      int dupltMemberCpNo = 0; // 주문 중복 회원 쿠폰 번호
      List<OrderGoodsPO> addedAmountList = new ArrayList<>(); // 부가비용 리스트
      String ordPrmtInfoArr = po.getOrdPrmtInfo(); // 주문 프로모션 정보
      String ordPrmtFreebieInfoArr = po.getOrdPrmtFreebieInfo(); // 주문 사은품 정보
      String goodsType = ""; // 상품구분
      String goodsNo = ""; // 상품번호
      String itemNo = ""; // 단품번호
      int buyQtt = 0; // 단품 구매수량
      String dlvrcPaymentCd = ""; // 배송비 결제 코드
      long ctgNo = 0;
      String directReceptYn = ""; // 매장 수령 여부
      String preOrdYn = ""; // 사전 주문 여부
      String plusGoodsYn = ""; // 플러스 상품 여부
      String freebieGoodsYn = ""; // 사은품 상품 여부
      Float dcAmt = 0f; // 할인금액
      int packQtt = 0;
      int dlvrSeq = 0; // 배송순번(묶음배송 관련)
      String freeDlvrYn = "N";
      long preGoodsPrmtGrpNo = 0; // 이전 상품 프로모션 그룹번호

      if (jsonArray != null && jsonArray.size() > 0) {
        for (int i = 0; i < jsonArray.size(); i++) {
          long goodsPrmtNo = 0;
          JSONObject itemArr = (JSONObject) jsonArray.get(i);
          // 상품구분 - 01:일반, 02:세트

          goodsType = (String) itemArr.get("goodsType"); // 상품구분
          goodsNo = (String) itemArr.get("goodsNo"); // 상품번호
          itemNo = (String) itemArr.get("itemNo"); // 단품번호
          buyQtt = ((Long) itemArr.get("buyQtt")).intValue(); // 단품 구매수량
          dlvrcPaymentCd = (String) itemArr.get("dlvrcPaymentCd"); // 배송비 결제 코드
          po.setDlvrcPaymentCd(dlvrcPaymentCd);
          ctgNo = Long.parseLong((String) itemArr.get("ctgNo"));
          packQtt = (int) ((long) itemArr.get("packQtt")); // 선물포장 수량
          directReceptYn = (String) itemArr.get("directRecptYn"); // 매장 수령 여부
          preOrdYn = (String) itemArr.get("preOrdYn"); // 사전 주문 여부
          plusGoodsYn = (String) itemArr.get("plusGoodsYn"); // 플러스 상품 여부
          freebieGoodsYn = (String) itemArr.get("freebieGoodsYn"); // 사은품 상품 여부
          dcAmt = 0f;
          if (itemArr.get("dcAmt") != null) {
            dcAmt = new Double(itemArr.get("dcAmt") + "").floatValue(); // 할인금액
          }

          goodsDetailSO.setGoodsNo(goodsNo);
          goodsDetailSO.setItemNo(itemNo);
          goodsDetailSO.setSiteNo(po.getSiteNo());
          goodsDetailSO.setSaleYn("Y");
          OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
          OrderGoodsVO orderGoodsVO = this.selectOrderGoodsInfo(goodsDetailSO); // 주문상품정보 조회
          if (orderGoodsVO == null) {
            ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
            err_result.setMessage("상품정보가 존재하지 않습니다");
            err_result.setSuccess(false);
            return err_result;
          }
          if ("Y".equals(directReceptYn)) {
            orderInfoPO.setStoreYn("Y");
          } else {
            orderInfoPO.setStoreYn("N");
          }
          if (SiteUtil.isMobile()) { // 모바일 주문이고 타임세일 상품일 경우 금액이 바뀜
            if ("Y".equals(orderGoodsVO.getSpecialGoodsYn())) {
              orderGoodsVO.setSalePrice(orderGoodsVO.getSpecialPrice());
              orderGoodsVO.setSaleAmt(orderGoodsVO.getSpecialPrice());
            }
          }

          BeanUtils.copyProperties(orderGoodsVO, orderGoodsPO);
          orderGoodsPO.setOrdNo(ordNo); // 주문번호
          orderGoodsPO.setOrdDtlSeq(ordDtlSeq); // 주문상세순번
          orderGoodsPO.setOrdQtt(buyQtt);// 구매수량
          orderGoodsPO.setCancelableQtt(buyQtt);// 취소가능수량
          orderGoodsPO.setOrdDtlStatusCd("01"); // 주문상태(주문접수)
          orderGoodsPO.setClaimTurn(0);
          orderGoodsPO.setCtgNo(ctgNo); // 카테고리 번호
          orderGoodsPO.setPlusGoodsYn(plusGoodsYn); // 플러스 상품 여부
          orderGoodsPO.setFreebieGoodsYn(freebieGoodsYn); // 플러스 상품 여부
          orderGoodsPO.setExtraSvmnAmt(0f); // 추가 포인트 적립금액 초기화
          if ("02".equals(goodsType)) {
            orderGoodsPO.setGoodsSetNo(goodsNo); // 세트 상품 번호
          }
          orderGoodsPO.setPreOrdYn(preOrdYn); // 사전 주문 여부
          if ("Y".equals(directReceptYn)) {
            String storeNo = (String) itemArr.get("storeNo");
            orderGoodsPO.setStoreNo(storeNo); // 매장 코드
            orderGoodsPO.setVisitScdDt(po.getVisitScdDtArr()[i]); // 방문 예정 일자
          }
          if (itemArr.get("setNo") != null) {
            orderGoodsPO.setSetNo(new Long((long) itemArr.get("setNo")).intValue()); // 프로모션 세트 번호
          }

          if ("N".equals(orderGoodsPO.getPlusGoodsYn()) && "N".equals(orderGoodsPO.getFreebieGoodsYn())) {
            chkPaymentAmt += ((orderGoodsPO.getSaleAmt() * buyQtt));
          }
          log.debug("=== 상품금액 : {}", chkPaymentAmt);

          if (packQtt > 0 && !"9".equals(orderGoodsVO.getPackStatusCd())) {
            orderGoodsPO.setAddOptYn("Y");
            String packStatusCd = (String) itemArr.get("packStatusCd");
            String addOptNm = ServiceUtil.getCodeName("PACK_STATUS_CD", packStatusCd);
            orderGoodsPO.setAddOptNm(addOptNm);
            orderGoodsPO.setAddOptQtt(packQtt);
            orderGoodsPO.setAddOptAmt(Float.parseFloat(packPrice));
            orderGoodsPO.setAddOptCancelableQtt(packQtt);
            chkPaymentAmt += (packQtt * Integer.parseInt(packPrice));
            log.debug("=== 상품금액(+추가옵션) : {}", chkPaymentAmt);
          } else {
            orderGoodsPO.setAddOptYn("N");
            orderGoodsPO.setAddOptCancelableQtt(0);
          }

          orderGoodsPO.setPvdSvmn(Float.parseFloat(po.getPvdSvmnAmt()[i])); // 적립금액
          // 부분취소, 수량취소 가능 여부
          orderGoodsPO.setPartCancelPsbYn("Y");
          orderGoodsPO.setQttCancelPsbYn("Y");

          // 부가비용(상품 쿠폰/프로모션 정보)
          orderGoodsPO.setGoodsCpDcAmt(0f);
          orderGoodsPO.setGoodsPrmtDcAmt(0f);
          AppliedBasketPrmtVO appliedBasketPrmtVO = new AppliedBasketPrmtVO();
          List<OrderGoodsPO> freebieList = new ArrayList<>(); // 사은품 리스트
          if (itemArr.get("appliedBasketPrmtVO") != null) {
            // 적용 프로모션
            appliedBasketPrmtVO = mapper.readValue(itemArr.get("appliedBasketPrmtVO").toString(),
                AppliedBasketPrmtVO.class);
            goodsPrmtNo = appliedBasketPrmtVO.getPrmtNo();
            log.debug("======== goodsPrmtGrpNo : {}", itemArr.get("goodsPrmtGrpNo"));
            orderGoodsPO.setGoodsPrmtNo(goodsPrmtNo); // 프로모션 번호
            orderGoodsPO.setGoodsPrmtGrpNo((long) itemArr.get("goodsPrmtGrpNo")); // 프로모션 그룹 번호
            // 사은품 리스트
            if (itemArr.get("prmtFreebieVOList") != null) {
              log.debug("======== ordDtlSeq : {}", ordDtlSeq);
              Object freebieObj = parser.parse(itemArr.get("prmtFreebieVOList").toString());
              JSONArray freebieArray = (JSONArray) freebieObj;
              for (int s = 0; s < freebieArray.size(); s++) {
                OrderGoodsPO freebiePO = new OrderGoodsPO();
                JSONObject freebieArr = (JSONObject) freebieArray.get(s);
                if ("2".equals((String) freebieArr.get("freebieTypeCd"))) {
                  freebiePO.setSiteNo(po.getSiteNo());
                  freebiePO.setPartnerNo(((Long) freebieArr.get("partnerNo")).intValue());
                  freebiePO.setOrdNo(ordNo);
                  freebiePO.setOrdDtlSeq(ordDtlSeq);
                  freebiePO.setFreebieNo((String) freebieArr.get("freebieNo"));
                  freebiePO.setFreebieTypeCd((String) freebieArr.get("freebieTypeCd"));
                  freebiePO.setFreebieQtt(((Long) freebieArr.get("qtt")).intValue());
                  freebiePO.setPrmtGrpNo(orderGoodsPO.getGoodsPrmtGrpNo());
                  freebiePO.setPrmtNo(goodsPrmtNo);
                  freebiePO.setPrmtBnfCd3("08"); // 사은품
                  freebiePO.setRegrNo(memberNo);
                  freebiePO.setRegDttm(today);
                  freebieList.add(freebiePO);
                }
              }
            }
            // 사은품(쿠폰)
            if ("04".equals(appliedBasketPrmtVO.getPrmtBnfCd2()) && "07".equals(appliedBasketPrmtVO.getPrmtBnfCd3())) {
              OrderGoodsPO freebiePO = new OrderGoodsPO();
              freebiePO.setSiteNo(po.getSiteNo());
              freebiePO.setPartnerNo(0);
              freebiePO.setOrdNo(ordNo);
              freebiePO.setOrdDtlSeq(ordDtlSeq);
              freebiePO.setFreebieQtt(1);
              freebiePO.setPrmtGrpNo(orderGoodsPO.getGoodsPrmtGrpNo());
              freebiePO.setPrmtNo(goodsPrmtNo);
              freebiePO.setPrmtBnfCd3("07"); // 쿠폰
              freebiePO.setRegrNo(memberNo);
              freebiePO.setRegDttm(today);
              freebieList.add(freebiePO);
            }
            Float extraDcAmt = 0f;
            if (itemArr.get("extraDcAmt") != null) {
              extraDcAmt = new Double(itemArr.get("extraDcAmt") + "").floatValue();
            }
            // 프로모션 추가 포인트
            Float extraSvmnAmt = 0f;
            if (itemArr.get("extraSvmnAmt") != null) {
              extraSvmnAmt = new Double(itemArr.get("extraSvmnAmt") + "").floatValue();
            }
            orderGoodsPO.setExtraSvmnAmt(extraSvmnAmt);
            log.debug("====== goodsPrmtNo : {}", goodsPrmtNo);
            log.debug("====== preGoodsPrmtGrpNo : {}", preGoodsPrmtGrpNo);
            log.debug("====== orderGoodsPO.getGoodsPrmtGrpNo() : {}", orderGoodsPO.getGoodsPrmtGrpNo());
            if (goodsPrmtNo != 0 && preGoodsPrmtGrpNo != orderGoodsPO.getGoodsPrmtGrpNo()) {
              // 부가비용 정보 셋팅(상품 프로모션)
              OrderGoodsPO goodsPrmtPO = new OrderGoodsPO();
              goodsPrmtPO.setOrgAddedAmountNo(0); // 원본 부가비용 번호
              goodsPrmtPO.setOrdNo(orderInfoPO.getOrdNo());
              goodsPrmtPO.setPrmtGrpNo(orderGoodsPO.getGoodsPrmtGrpNo());
              goodsPrmtPO.setPrmtNo(goodsPrmtNo);
              if ("04".equals(appliedBasketPrmtVO.getPrmtKindCd())) {
                goodsPrmtPO.setAddedAmountGbCd("01"); // 상픔 프로모션
              } else {
                goodsPrmtPO.setAddedAmountGbCd("02"); // 상품 쿠폰
                goodsMemberCpNo = new Long(appliedBasketPrmtVO.getMemberCpNo()).intValue();
                goodsPrmtPO.setMemberCpNo(goodsMemberCpNo);
              }
              goodsPrmtPO.setAddedAmountAmt(extraDcAmt);
              goodsPrmtPO.setRegrNo(memberNo); // 등록자 번호
              goodsPrmtPO.setRegDttm(today); // 등록일자
              addedAmountList.add(goodsPrmtPO);
              log.debug("=== goodsPrmtPO : {}", goodsPrmtPO);
            }
            preGoodsPrmtGrpNo = orderGoodsPO.getGoodsPrmtGrpNo();
            // 할인 금액 셋팅
            if ("04".equals(appliedBasketPrmtVO.getPrmtKindCd())) { // 상품 프로모션
              if ("05".equals(appliedBasketPrmtVO.getPrmtBnfCd2())) {
                freeDlvrYn = "Y";
                orderGoodsPO.setDlvrcPrmtDcAmt(0f);
              } else {
                orderGoodsPO.setGoodsPrmtDcAmt(dcAmt);
                orderGoodsPO.setGoodsCpDcAmt(0f);
                if (!"03".equals(appliedBasketPrmtVO.getPrmtBnfCd1())
                    && !"08".equals(appliedBasketPrmtVO.getPrmtBnfCd3())) {
                  totalGoodsPrmtDcAmt += dcAmt;
                }
              }
            } else if ("05".equals(appliedBasketPrmtVO.getPrmtKindCd())) { // 상품 쿠폰
              if ("05".equals(appliedBasketPrmtVO.getPrmtBnfCd2())) {
                freeDlvrYn = "Y";
                orderGoodsPO.setDlvrcPrmtDcAmt(0f);
              } else {
                orderGoodsPO.setGoodsPrmtDcAmt(0f);
                orderGoodsPO.setGoodsCpDcAmt(dcAmt);
                if (!"03".equals(appliedBasketPrmtVO.getPrmtBnfCd1())
                    && !"08".equals(appliedBasketPrmtVO.getPrmtBnfCd3())) {
                  totalGoodsCpDcAmt += dcAmt;
                }
              }
            }
          }

          Float totalDcAmt = 0f;
          // 부가비용(주문 쿠폰/프로모션 정보)
          if (ordPrmtInfoArr != null && !"".equals(ordPrmtInfoArr)) {
            log.debug("===== ordPrmtInfoArr : {}", ordPrmtInfoArr);
            Object ordPrmtInfo = parser.parse(ordPrmtInfoArr);
            JSONArray ordPrmtInfoJson = (JSONArray) ordPrmtInfo;
            for (int k = 0; k < ordPrmtInfoJson.size(); k++) {
              JSONObject jsonArr = (JSONObject) ordPrmtInfoJson.get(k);
              if (ordDtlSeq == Integer.parseInt((String) jsonArr.get("prmtSeq"))) {
                log.debug("==== jsonArr.get('ordPrmtBnfCd2') : {}", jsonArr.get("ordPrmtBnfCd2"));
                if ("01".equals((String) jsonArr.get("ordPrmtBnfCd2"))
                    || "03".equals((String) jsonArr.get("ordPrmtBnfCd2"))) { // 할인
                  // 주문 쿠폰
                  if (jsonArr.get("ordPrmtNo") != null && "06".equals((String) jsonArr.get("ordPrmtKindCd"))) {
                    if (ordPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordPrmtGrpNo = prmtGrpNo;
                    }
                    ordMemberCpNo = Integer.parseInt((String) jsonArr.get("ordMemberCpNo"));
                    ordPrmtNo = (long) jsonArr.get("ordPrmtNo");
                    ordPrmtKindCd = (String) jsonArr.get("ordPrmtKindCd");
                    orderGoodsPO.setOrdCpDcAmt(Float.parseFloat(Long.toString((long) jsonArr.get("ordCpDcAmt"))));
                    orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo);
                    orderGoodsPO.setOrdPrmtNo(ordPrmtNo);
                    totalOrdCpDcAmt += (Float.parseFloat(Long.toString((long) jsonArr.get("ordCpDcAmt"))));
                    totalDcAmt += (orderGoodsPO.getOrdCpDcAmt());
                  } else {
                    orderGoodsPO.setOrdCpDcAmt(0f);
                  }
                  // 주문 프로모션
                  log.debug("===== jsonArr.get('prmtSeq') : {}", jsonArr.get("prmtSeq"));
                  log.debug("===== jsonArr.get('ordPrmtDcAmt') : {}", jsonArr.get("ordPrmtDcAmt"));
                  log.debug("===== jsonArr.get('ordPrmtNo'); : {}", jsonArr.get("ordPrmtNo"));
                  if (jsonArr.get("ordPrmtNo") != null && "03".equals((String) jsonArr.get("ordPrmtKindCd"))) {
                    if (ordPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordPrmtGrpNo = prmtGrpNo;
                    }
                    ordPrmtNo = (long) jsonArr.get("ordPrmtNo");
                    ordPrmtKindCd = (String) jsonArr.get("ordPrmtKindCd");
                    orderGoodsPO.setOrdPrmtDcAmt(Float.parseFloat(Long.toString((long) jsonArr.get("ordPrmtDcAmt"))));
                    orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo);
                    orderGoodsPO.setOrdPrmtNo(ordPrmtNo);
                    totalOrdPrmtDcAmt += (Float.parseFloat(Long.toString((long) jsonArr.get("ordPrmtDcAmt"))));
                    totalDcAmt += (orderGoodsPO.getOrdPrmtDcAmt());
                  } else {
                    orderGoodsPO.setOrdPrmtDcAmt(0f);
                  }
                } else if ("04".equals((String) jsonArr.get("ordPrmtBnfCd2"))) { // 사은품
                  if (jsonArr.get("ordPrmtNo") != null) {
                    if (ordPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordPrmtGrpNo = prmtGrpNo;
                    }
                    log.debug("==== jsonArr.get('ordPrmtNo') : {}", jsonArr.get("ordPrmtNo"));
                    ordPrmtNo = (long) jsonArr.get("ordPrmtNo");
                    ordPrmtKindCd = (String) jsonArr.get("ordPrmtKindCd");
                    orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo);
                    orderGoodsPO.setOrdPrmtNo(ordPrmtNo);
                    orderGoodsPO.setOrdPrmtDcAmt(0f);
                    orderGoodsPO.setOrdCpDcAmt(0f);
                  }
                } else if ("05".equals((String) jsonArr.get("ordPrmtBnfCd2"))) { // 무료배송
                  freeDlvrYn = "Y";
                  if (jsonArr.get("ordPrmtNo") != null && "06".equals((String) jsonArr.get("ordPrmtKindCd"))) { // 쿠폰
                    if (ordPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordPrmtGrpNo = prmtGrpNo;
                    }
                    ordPrmtNo = (long) jsonArr.get("ordPrmtNo");
                    ordPrmtKindCd = (String) jsonArr.get("ordPrmtKindCd");
                    orderGoodsPO.setDlvrcCpDcAmt(0f);
                    orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo);
                    orderGoodsPO.setOrdPrmtNo(ordPrmtNo);
                  } else {
                    orderGoodsPO.setDlvrcCpDcAmt(0f);
                  }
                  if (jsonArr.get("ordPrmtNo") != null && "03".equals((String) jsonArr.get("ordPrmtKindCd"))) { // 프로모션
                    if (ordPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordPrmtGrpNo = prmtGrpNo;
                    }
                    ordPrmtNo = (long) jsonArr.get("ordPrmtNo");
                    ordPrmtKindCd = (String) jsonArr.get("ordPrmtKindCd");
                    orderGoodsPO.setDlvrcPrmtDcAmt(0f);
                    orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo);
                    orderGoodsPO.setOrdPrmtNo(ordPrmtNo);
                  } else {
                    orderGoodsPO.setDlvrcPrmtDcAmt(0f);
                  }
                }
                // 주문 중복 쿠폰
                if (!"05".equals((String) jsonArr.get("dupltPrmtBnfCd2"))) { // 정액/정률
                  if ((long) jsonArr.get("ordDupltCpDcAmt") > 0) {
                    if (ordDupltPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordDupltPrmtGrpNo = prmtGrpNo;
                    }
                    dupltMemberCpNo = Integer.parseInt((String) jsonArr.get("dupltMemberCpNo"));
                    ordDupltPrmtNo = (long) jsonArr.get("dupltPrmtNo");
                    ordDupltPrmtKindCd = (String) jsonArr.get("dupltPrmtKindCd");
                    orderGoodsPO
                        .setOrdDupltCpDcAmt(Float.parseFloat(Long.toString((long) jsonArr.get("ordDupltCpDcAmt"))));
                    orderGoodsPO.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
                    orderGoodsPO.setDupltPrmtNo(ordDupltPrmtNo);
                    totalOrdDupltCpDcAmt += (Float.parseFloat(Long.toString((long) jsonArr.get("ordDupltCpDcAmt"))));
                    totalDcAmt += (orderGoodsPO.getOrdDupltCpDcAmt());
                  } else {
                    orderGoodsPO.setOrdDupltCpDcAmt(0f);
                  }
                  // 주문 중복 프로모션
                  if ((long) jsonArr.get("ordDupltPrmtDcAmt") > 0) {
                    if (ordDupltPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordDupltPrmtGrpNo = prmtGrpNo;
                    }
                    ordDupltPrmtNo = (long) jsonArr.get("dupltPrmtNo");
                    ordDupltPrmtKindCd = (String) jsonArr.get("dupltPrmtKindCd");
                    orderGoodsPO
                        .setOrdDupltPrmtDcAmt(Float.parseFloat(Long.toString((long) jsonArr.get("ordDupltPrmtDcAmt"))));
                    orderGoodsPO.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
                    orderGoodsPO.setDupltPrmtNo(ordDupltPrmtNo);
                    totalOrdDupltPrmtDcAmt += (Float
                        .parseFloat(Long.toString((long) jsonArr.get("ordDupltPrmtDcAmt"))));
                    totalDcAmt += (orderGoodsPO.getOrdDupltPrmtDcAmt());
                  } else {
                    orderGoodsPO.setOrdDupltPrmtDcAmt(0f);
                  }
                } else { // 무료배송
                  freeDlvrYn = "Y";
                  if (jsonArr.get("dupltPrmtNo") != null && "06".equals((String) jsonArr.get("dupltPrmtKindCd"))) { // 쿠폰
                    if (ordDupltPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordDupltPrmtGrpNo = prmtGrpNo;
                    }
                    dupltMemberCpNo = Integer.parseInt((String) jsonArr.get("dupltMemberCpNo"));
                    ordDupltPrmtNo = (long) jsonArr.get("dupltPrmtNo");
                    ordDupltPrmtKindCd = (String) jsonArr.get("dupltPrmtKindCd");
                    orderGoodsPO.setOrdDupltCpDcAmt(0f);
                    orderGoodsPO.setOrdDupltPrmtDcAmt(0f);
                    orderGoodsPO.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
                    orderGoodsPO.setDupltPrmtNo(ordDupltPrmtNo);
                  } else {
                    orderGoodsPO.setOrdDupltCpDcAmt(0f);
                    orderGoodsPO.setOrdDupltPrmtDcAmt(0f);
                  }
                  if (jsonArr.get("dupltPrmtNo") != null && "03".equals((String) jsonArr.get("dupltPrmtKindCd"))) { // 프로모션
                    if (ordDupltPrmtGrpNo == 0) {
                      prmtGrpNo++;
                      ordDupltPrmtGrpNo = prmtGrpNo;
                    }
                    ordDupltPrmtNo = (long) jsonArr.get("dupltPrmtNo");
                    ordDupltPrmtKindCd = (String) jsonArr.get("dupltPrmtKindCd");
                    orderGoodsPO.setOrdDupltCpDcAmt(0f);
                    orderGoodsPO.setOrdDupltPrmtDcAmt(0f);
                    orderGoodsPO.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
                    orderGoodsPO.setDupltPrmtNo(ordDupltPrmtNo);
                  } else {
                    orderGoodsPO.setOrdDupltCpDcAmt(0f);
                    orderGoodsPO.setOrdDupltPrmtDcAmt(0f);
                  }
                }
              }
            }
          }

          orderGoodsPO.setDlvrcCpDcAmt(0f);
          Float totalGoodsDcAmt = orderGoodsPO.getGoodsCpDcAmt() + orderGoodsPO.getGoodsPrmtDcAmt();
          orderGoodsPO.setDcAmt(totalGoodsDcAmt);

          orderGoodsPO.setRegrNo(memberNo); // 등록자 번호
          orderGoodsPO.setRegDttm(today); // 등록일자

          // 세트 상품
          if ("02".equals(goodsType)) {
            List<OrderGoodsPO> orderGoodsSetList = new ArrayList<>();
            List goodsSetList = new ArrayList<>();
            goodsSetList = (List) itemArr.get("goodsSetList");
            for (int j = 0; j < goodsSetList.size(); j++) {
              JSONObject goodsSetObj = (JSONObject) goodsSetList.get(j);

              goodsDetailSO.setGoodsNo((String) goodsSetObj.get("goodsNo"));
              goodsDetailSO.setItemNo((String) goodsSetObj.get("itemNo"));
              goodsDetailSO.setSiteNo(po.getSiteNo());
              goodsDetailSO.setSaleYn("Y");
              OrderGoodsPO orderGoodsSetPO = new OrderGoodsPO();
              OrderGoodsVO orderGoodsSetVO = selectOrderGoodsInfo(goodsDetailSO);

              BeanUtils.copyProperties(orderGoodsSetVO, orderGoodsSetPO);
              orderGoodsSetPO.setOrdNo(ordNo); // 주문번호
              orderGoodsSetPO.setOrdDtlSeq(ordDtlSeq); // 주문상세순번
              orderGoodsSetPO.setGoodsSetNo(goodsNo); // 세트상품번호
              orderGoodsSetPO.setOrdQtt(buyQtt); // 구매수량
              orderGoodsSetPO.setCancelableQtt(buyQtt); // 취소가능수량
              orderGoodsSetPO.setRegrNo(memberNo); // 등록자 번호
              orderGoodsSetPO.setRegDttm(today); // 등록일자
              orderGoodsSetList.add(orderGoodsSetPO);
            }
            orderGoodsPO.setGoodsSetList(orderGoodsSetList);
          }

          // 배송비 정보
          Map<String, String> dlvrPriceMap = new HashMap<>();
          String tempDlvrPriceMap = request.getParameter("dlvrPriceMap");
          String value = StringUtils.substringBetween(tempDlvrPriceMap, "{", "}");
          String keyValuePairs[] = value.split(",");
          for (String pair : keyValuePairs) {
            String[] entry = pair.split("=");
            dlvrPriceMap.put(entry[0].trim().replaceAll("[\"]", ""), entry[1].trim().replaceAll("[\"]", ""));
          }

          grpId = orderGoodsVO.getDlvrSetCd() + "**" + dlvrcPaymentCd;

          orderGoodsPO.setDlvrcPaymentCd(dlvrcPaymentCd); // 배송비 결제 코드(무료,선불,착불,방문)
          orderGoodsPO.setDlvrSetCd(orderGoodsVO.getDlvrSetCd()); // 배송 설정 코드
          orderGoodsPO.setDlvrQtt(buyQtt); // 배송수량
          orderGoodsPO.setDlvrMsg(request.getParameter("dlvrMsg")); // 배송메세지
          // 원본 배송비
          if ("1".equals(orderGoodsVO.getDlvrSetCd())) {
            if ("1".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
              orderGoodsPO.setOrgDlvrAmt(0f);
            } else if ("2".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
              orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getDefaultDlvrc());
            } else if ("3".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
              double orderPrice = orderGoodsVO.getSaleAmt() * orderGoodsVO.getOrdQtt();
              if (orderPrice >= orderGoodsVO.getDefaultDlvrMinAmt()) {
                orderGoodsPO.setOrgDlvrAmt(0f);
              } else {
                orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getDefaultDlvrMinDlvrc());
              }
            }
          } else if ("2".equals(orderGoodsVO.getDlvrSetCd())) {
            orderGoodsPO.setOrgDlvrAmt(0f);
          } else if ("3".equals(orderGoodsVO.getDlvrSetCd())) {
            orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getGoodseachDlvrc());
          } else if ("4".equals(orderGoodsVO.getDlvrSetCd())) {
            int packCnt = (int) orderGoodsVO.getOrdQtt() / orderGoodsVO.getPackMaxUnit();
            if (orderGoodsVO.getOrdQtt() % orderGoodsVO.getPackMaxUnit() > 0) {
              packCnt++;
            }
            orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getPackUnitDlvrc() * packCnt);
          }
          // 실제배송비
          if (!grpId.equals(preGrpId)) {
            dlvrSeq++;
            orderGoodsPO.setDlvrSeq(dlvrSeq);
            orderGoodsPO.setRealDlvrAmt(Float.parseFloat(dlvrPriceMap.get(grpId)));
          } else {
            orderGoodsPO.setDlvrSeq(dlvrSeq);
            orderGoodsPO.setRealDlvrAmt(0f);
          }

          String addDlvrAmt = request.getParameter("addDlvrAmt");
          log.debug("=== 지역배송비 : {}", addDlvrAmt);
          if (addDlvrAmt != null && !"".equals(addDlvrAmt)) {
            if (!areaDlvrApplyYn) { // 지역추가배송비 적용 전
              log.debug("=== 지역배송비11111: {}", addDlvrAmt);
              if (!"04".equals(orderGoodsVO.getDlvrcPaymentCd())) {
                log.debug("=== 지역배송비2222: {}", addDlvrAmt);
                // 지역 추가 배송비(방문수령이 아닌 첫 상품에만 추가한다.)
                orderGoodsPO.setAreaAddDlvrc(Float.parseFloat(request.getParameter("addDlvrAmt")));
                // 지역 배송 설정 번호
                String areaDlvrSetNo = "";
                areaDlvrSetNo = request.getParameter("areaDlvrSetNo");
                if (areaDlvrSetNo != null && !"".equals(areaDlvrSetNo)) {
                  orderGoodsPO.setAreaDlvrSetNo(Long.parseLong(request.getParameter("areaDlvrSetNo")));
                }
                areaDlvrApplyYn = true;
              } else {
                log.debug("=== 지역배송비3333: {}", addDlvrAmt);
                orderGoodsPO.setAreaAddDlvrc(0f); // 지역 추가 배송비
              }
            } else {
              log.debug("=== 지역배송비5555: {}", addDlvrAmt);
              orderGoodsPO.setAreaAddDlvrc(0f); // 지역 추가 배송비
            }
          } else {
            log.debug("=== 지역배송비4444: {}", addDlvrAmt);
            orderGoodsPO.setAreaAddDlvrc(0f); // 지역 추가 배송비
          }
          preGrpId = grpId;
          log.debug("=== 배송비1 : {}", orderGoodsPO.getRealDlvrAmt());
          log.debug("=== 배송비2 : {}", orderGoodsPO.getAreaAddDlvrc());
          // 무료쿠폰 계산을 위해 지역배송비만 계산하고 기본배송비는 하단에서 따로 계산
          chkPaymentAmt += (orderGoodsPO.getAreaAddDlvrc());
          log.debug("=== 지역배송비 : {}", orderGoodsPO.getAreaAddDlvrc());
          // 배송비 기본정보 저장
          SiteVO svo = cacheService.selectBasicInfo(po.getSiteNo(), partnerNo);
          orderGoodsPO.setDefaultDlvrMinAmt(svo.getDefaultDlvrMinAmt());
          orderGoodsPO.setDefaultDlvrMinDlvrc(svo.getDefaultDlvrMinDlvrc());

          orderGoodsPO.setFreebieList(freebieList);
          orderGoodsList.add(orderGoodsPO);
          ordDtlSeq++;
        }
      } else {
        ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
        err_result.setMessage(MessageUtil.getMessage("front.web.common.wrongapproach"));
        err_result.setSuccess(false);
        return err_result;
      }

      // 주문 사은품 처리
      List<OrderGoodsPO> ordFreebieList = new ArrayList();
      if (ordPrmtFreebieInfoArr != null && !"".equals(ordPrmtFreebieInfoArr)) {
        log.debug("===== ordPrmtFreebieInfoArr : {}", ordPrmtFreebieInfoArr);
        Object ordPrmtFreebieInfo = parser.parse(ordPrmtFreebieInfoArr);
        JSONArray ordPrmtFreebieInfoJson = (JSONArray) ordPrmtFreebieInfo;
        for (int k = 0; k < ordPrmtFreebieInfoJson.size(); k++) {
          PrmtFreebieVO prmtFreebieVO = mapper.readValue(ordPrmtFreebieInfoJson.get(k).toString(), PrmtFreebieVO.class);
          prmtFreebieVO.setPrmtNo(ordPrmtNo);
          PrmtFreebieVO tempPrmtFreebie = proxyDao.selectOne(MapperConstants.BASKET + "selectPrmtFreebie",
              prmtFreebieVO);
          if ("1".equals(prmtFreebieVO.getFreebieTypeCd())) {

            goodsDetailSO.setGoodsNo(prmtFreebieVO.getFreebieNo());
            goodsDetailSO.setItemNo(prmtFreebieVO.getItemNo());
            goodsDetailSO.setSiteNo(po.getSiteNo());
            goodsDetailSO.setSaleYn("Y");
            OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
            OrderGoodsVO orderGoodsVO = this.selectOrderGoodsInfo(goodsDetailSO); // 주문상품정보 조회
            if (orderGoodsVO == null) {
              ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
              err_result.setMessage("상품정보가 존재하지 않습니다");
              err_result.setSuccess(false);
              return err_result;
            }

            BeanUtils.copyProperties(orderGoodsVO, orderGoodsPO);
            orderGoodsPO.setOrdNo(ordNo); // 주문번호
            orderGoodsPO.setOrdDtlSeq(ordDtlSeq); // 주문상세순번
            orderGoodsPO.setOrdQtt(prmtFreebieVO.getQtt());// 구매수량
            orderGoodsPO.setCancelableQtt(prmtFreebieVO.getQtt());// 취소가능수량
            orderGoodsPO.setOrdDtlStatusCd("01"); // 주문상태(주문접수)
            orderGoodsPO.setClaimTurn(0);
            orderGoodsPO.setCtgNo(Long.parseLong(tempPrmtFreebie.getCtgNo())); // 카테고리 번호
            orderGoodsPO.setPlusGoodsYn("N"); // 플러스 상품 여부
            orderGoodsPO.setFreebieGoodsYn("Y"); // 사은품 상품 여부
            orderGoodsPO.setExtraSvmnAmt(0f); // 추가 포인트 적립금액 초기화
            orderGoodsPO.setPreOrdYn(tempPrmtFreebie.getPreOrdYn()); // 사전 주문 여부
            orderGoodsPO.setPvdSvmn(0f); // 적립금액
            orderGoodsPO.setExtraSvmnAmt(0f); // 추가 적립금액
            orderGoodsPO.setAddOptYn("N");
            orderGoodsPO.setAddOptCancelableQtt(0);
            orderGoodsPO.setPartCancelPsbYn("Y");
            orderGoodsPO.setQttCancelPsbYn("Y");
            orderGoodsPO.setGoodsCpDcAmt(0f);
            orderGoodsPO.setGoodsPrmtDcAmt(0f);
            orderGoodsPO.setDlvrcCpDcAmt(0f);
            orderGoodsPO.setDcAmt(0f);
            orderGoodsPO.setRegrNo(memberNo); // 등록자 번호
            orderGoodsPO.setRegDttm(today); // 등록일자
            orderGoodsPO.setOrdPrmtNo(ordPrmtNo); // 프로모션 번호
            orderGoodsPO.setOrdPrmtGrpNo(ordPrmtGrpNo); // 프로모션 번호
            orderGoodsPO.setDlvrcPaymentCd("02");
            orderGoodsPO.setDlvrSetCd("1");
            orderGoodsPO.setDlvrQtt(buyQtt); // 배송수량
            orderGoodsPO.setDlvrMsg(request.getParameter("dlvrMsg")); // 배송메세지
            // 원본 배송비
            if ("1".equals(orderGoodsVO.getDlvrSetCd())) {
              if ("1".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
                orderGoodsPO.setOrgDlvrAmt(0f);
              } else if ("2".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
                orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getDefaultDlvrc());
              } else if ("3".equals(orderGoodsVO.getDefaultDlvrcTypeCd())) {
                double orderPrice = orderGoodsVO.getSaleAmt() * orderGoodsVO.getOrdQtt();
                if (orderPrice >= orderGoodsVO.getDefaultDlvrMinAmt()) {
                  orderGoodsPO.setOrgDlvrAmt(0f);
                } else {
                  orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getDefaultDlvrMinDlvrc());
                }
              }
            } else if ("2".equals(orderGoodsVO.getDlvrSetCd())) {
              orderGoodsPO.setOrgDlvrAmt(0f);
            } else if ("3".equals(orderGoodsVO.getDlvrSetCd())) {
              orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getGoodseachDlvrc());
            } else if ("4".equals(orderGoodsVO.getDlvrSetCd())) {
              int packCnt = (int) orderGoodsVO.getOrdQtt() / orderGoodsVO.getPackMaxUnit();
              if (orderGoodsVO.getOrdQtt() % orderGoodsVO.getPackMaxUnit() > 0) {
                packCnt++;
              }
              orderGoodsPO.setOrgDlvrAmt(orderGoodsVO.getPackUnitDlvrc() * packCnt);
            }
            // 실제배송비
            orderGoodsPO.setDlvrSeq(dlvrSeq);
            orderGoodsPO.setRealDlvrAmt(0f);
            // 배송비 기본정보 저장
            SiteVO svo = cacheService.selectBasicInfo(po.getSiteNo(), partnerNo);
            orderGoodsPO.setDefaultDlvrMinAmt(svo.getDefaultDlvrMinAmt());
            orderGoodsPO.setDefaultDlvrMinDlvrc(svo.getDefaultDlvrMinDlvrc());

            orderGoodsList.add(orderGoodsPO);
            log.debug("===== orderGoodsList.size() : {}", orderGoodsList.size());
            log.debug("===== orderGoodsList : {}", orderGoodsList);
            ordDtlSeq++;
          } else {
            OrderGoodsPO freebiePO = new OrderGoodsPO();
            freebiePO.setSiteNo(po.getSiteNo());
            freebiePO.setPartnerNo(tempPrmtFreebie.getPartnerNo());
            freebiePO.setOrdNo(ordNo);
            freebiePO.setFreebieNo(tempPrmtFreebie.getFreebieNo());
            freebiePO.setFreebieTypeCd(tempPrmtFreebie.getFreebieTypeCd());
            freebiePO.setFreebieQtt(prmtFreebieVO.getQtt());
            freebiePO.setPrmtGrpNo(ordPrmtGrpNo);
            freebiePO.setPrmtNo(ordPrmtNo);
            freebiePO.setPrmtBnfCd3("08"); // 사은품
            freebiePO.setRegrNo(memberNo);
            freebiePO.setRegDttm(today);
            ordFreebieList.add(freebiePO);
          }
        }
        // 주문 사은품 1/N 처리
        List<OrderGoodsPO> newOrderGoodsList = new ArrayList<>();
        for (OrderGoodsPO ogPO : orderGoodsList) {
          if (ogPO.getOrdPrmtNo() != null && ogPO.getOrdPrmtNo() == ordPrmtNo) {
            log.debug("========= ogPO.getOrdDtlSeq() : {}", ogPO.getOrdDtlSeq());
            newOrderGoodsList.add(ogPO);
          }
        }
        Float sumSaleAmt = 0f;
        Float freebieSaleAmt = 0f;
        Float sumDcAmt = 0f;
        for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
          log.debug("========= newGoodsPO.getOrdDtlSeq() : {}", newGoodsPO.getOrdDtlSeq());
          sumSaleAmt += (newGoodsPO.getSaleAmt() * newGoodsPO.getOrdQtt());
          if ("Y".equals(newGoodsPO.getFreebieGoodsYn())) {
            freebieSaleAmt += (newGoodsPO.getSaleAmt() * newGoodsPO.getOrdQtt());
          }
        }
        log.debug("====== sumSaleAmt : {}", sumSaleAmt);
        log.debug("====== freebieSaleAmt : {}", freebieSaleAmt);
        int i = 1;
        for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
          Float eachSaleAmt = (newGoodsPO.getSaleAmt() * newGoodsPO.getOrdQtt());
          Float eachDcAmt = (float) Math.round(eachSaleAmt / sumSaleAmt * freebieSaleAmt);
          log.debug("====== eachSaleAmt : {}", eachSaleAmt);
          log.debug("====== eachDcAmt : {}", eachDcAmt);
          if (i == newOrderGoodsList.size()) {
            if ("03".equals(ordPrmtKindCd)) {
              newGoodsPO.setOrdPrmtDcAmt(freebieSaleAmt - sumDcAmt);
            } else {
              newGoodsPO.setOrdCpDcAmt(freebieSaleAmt - sumDcAmt);
            }
          } else {
            if ("03".equals(ordPrmtKindCd)) {
              newGoodsPO.setOrdPrmtDcAmt(eachDcAmt);
            } else {
              newGoodsPO.setOrdCpDcAmt(eachDcAmt);
            }
          }
          sumDcAmt += eachDcAmt;
          i++;
        }
        for (OrderGoodsPO ogPO2 : orderGoodsList) {
          for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
            if (ogPO2.getOrdDtlSeq() == newGoodsPO.getOrdDtlSeq()) {
              ogPO2.setOrdPrmtDcAmt(newGoodsPO.getOrdPrmtDcAmt());
              ogPO2.setOrdCpDcAmt(newGoodsPO.getOrdCpDcAmt());
            }
          }
        }
      }

      // 프로모션 적립금 1/N 처리
      for (OrderGoodsPO ogPO : orderGoodsList) {
        if (Float.compare(ogPO.getExtraSvmnAmt(), 0f) > 0) {
          Float extraSvmnAmt = ogPO.getExtraSvmnAmt();
          Long goodsPrmtGrpNo = ogPO.getGoodsPrmtGrpNo();
          List<OrderGoodsPO> newOrderGoodsList = new ArrayList<>();
          for (OrderGoodsPO ogPO2 : orderGoodsList) {
            if (goodsPrmtGrpNo == ogPO2.getGoodsPrmtGrpNo()) {
              log.debug("======= ogPO2 : {}", ogPO2);
              newOrderGoodsList.add(ogPO2);
            }
          }
          log.debug("========= newGoodsOrderList.size() : {}", newOrderGoodsList.size());
          log.debug("========= newGoodsOrderList : {}", newOrderGoodsList);
          Float sumSaleAmt = 0f;
          Float sumExtraSvmnAmt = 0f;
          for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
            sumSaleAmt += ((newGoodsPO.getSaleAmt() * newGoodsPO.getOrdQtt()) - newGoodsPO.getGoodsCpDcAmt()
                - newGoodsPO.getGoodsPrmtDcAmt());
          }
          int i = 1;
          for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
            Float eachExtraSvmnAmt = (float) Math.round((newGoodsPO.getSaleAmt() * newGoodsPO.getOrdQtt()
                - newGoodsPO.getGoodsCpDcAmt() - newGoodsPO.getGoodsPrmtDcAmt()) / sumSaleAmt * extraSvmnAmt);
            if (i == newOrderGoodsList.size()) {
              log.debug("======= extraSvmnAmt - sumExtraSvmnAmt : {}", extraSvmnAmt - sumExtraSvmnAmt);
              newGoodsPO.setEachExtraSvmnAmt(extraSvmnAmt - sumExtraSvmnAmt);
              log.debug("======= newGoodsPO.getEachExtraSvmnAmt() : {}", newGoodsPO.getEachExtraSvmnAmt());
            } else {
              log.debug("======= eachExtraSvmnAmt : {}", eachExtraSvmnAmt);
              newGoodsPO.setEachExtraSvmnAmt(eachExtraSvmnAmt);
              log.debug("======= newGoodsPO.getEachExtraSvmnAmt() : {}", newGoodsPO.getEachExtraSvmnAmt());
            }
            sumExtraSvmnAmt += eachExtraSvmnAmt;
            i++;
          }
          for (OrderGoodsPO ogPO2 : orderGoodsList) {
            for (OrderGoodsPO newGoodsPO : newOrderGoodsList) {
              if (ogPO2.getOrdDtlSeq() == newGoodsPO.getOrdDtlSeq()) {
                log.debug("======= ogPO2.getOrdDtlSeq() : {}", ogPO2.getOrdDtlSeq());
                log.debug("======= newGoodsPO.getEachExtraSvmnAmt() : {}", newGoodsPO.getEachExtraSvmnAmt());
                ogPO2.setEachExtraSvmnAmt(newGoodsPO.getEachExtraSvmnAmt());
              }
            }
          }
        }
      }
      log.debug("=== ordPrmtNo : {}", ordPrmtNo);
      log.debug("=== ordPrmtKindCd : {}", ordPrmtKindCd);
      log.debug("=== ordDupltPrmtNo : {}", ordDupltPrmtNo);
      log.debug("=== ordDupltPrmtKindCd : {}", ordDupltPrmtKindCd);
      if (ordPrmtNo != 0 && "03".equals(ordPrmtKindCd)) {
        // 부가비용 정보 셋팅(주문 프로모션)
        OrderGoodsPO ordDupltPO = new OrderGoodsPO();
        ordDupltPO.setOrgAddedAmountNo(0); // 원본 부가비용 번호
        ordDupltPO.setOrdNo(orderInfoPO.getOrdNo());
        ordDupltPO.setPrmtGrpNo(ordPrmtGrpNo);
        ordDupltPO.setPrmtNo(ordPrmtNo);
        ordDupltPO.setAddedAmountGbCd("03"); // 주문 프로모션
        ordDupltPO.setAddedAmountAmt(totalOrdPrmtDcAmt);
        ordDupltPO.setRegrNo(memberNo); // 등록자 번호
        ordDupltPO.setRegDttm(today); // 등록일자
        addedAmountList.add(ordDupltPO);
      }
      if (ordPrmtNo != 0 && "06".equals(ordPrmtKindCd)) {
        // 부가비용 정보 셋팅(주문 쿠폰)
        OrderGoodsPO ordDupltPO = new OrderGoodsPO();
        ordDupltPO.setOrgAddedAmountNo(0); // 원본 부가비용 번호
        ordDupltPO.setOrdNo(orderInfoPO.getOrdNo());
        ordDupltPO.setPrmtGrpNo(ordPrmtGrpNo);
        ordDupltPO.setPrmtNo(ordPrmtNo);
        ordDupltPO.setAddedAmountGbCd("04"); // 주문 쿠폰
        ordDupltPO.setAddedAmountAmt(totalOrdCpDcAmt);
        ordDupltPO.setMemberCpNo(ordMemberCpNo);
        ordDupltPO.setRegrNo(memberNo); // 등록자 번호
        ordDupltPO.setRegDttm(today); // 등록일자
        addedAmountList.add(ordDupltPO);
      }
      if (ordDupltPrmtNo != 0 && "03".equals(ordDupltPrmtKindCd)) {
        // 부가비용 정보 셋팅(중복 프로모션)
        OrderGoodsPO ordDupltPO = new OrderGoodsPO();
        ordDupltPO.setOrgAddedAmountNo(0); // 원본 부가비용 번호
        ordDupltPO.setOrdNo(orderInfoPO.getOrdNo());
        ordDupltPO.setPrmtGrpNo(ordDupltPrmtGrpNo);
        ordDupltPO.setPrmtNo(ordDupltPrmtNo);
        ordDupltPO.setAddedAmountGbCd("03"); // 주문 프로모션 할인
        ordDupltPO.setAddedAmountAmt(totalOrdDupltPrmtDcAmt);
        ordDupltPO.setRegrNo(memberNo); // 등록자 번호
        ordDupltPO.setRegDttm(today); // 등록일자
        addedAmountList.add(ordDupltPO);
      }
      if (ordDupltPrmtNo != 0 && "06".equals(ordDupltPrmtKindCd)) {
        // 부가비용 정보 셋팅(중복 쿠폰)
        OrderGoodsPO ordDupltPO = new OrderGoodsPO();
        ordDupltPO.setOrgAddedAmountNo(0); // 원본 부가비용 번호
        ordDupltPO.setOrdNo(orderInfoPO.getOrdNo());
        ordDupltPO.setPrmtGrpNo(ordDupltPrmtGrpNo);
        ordDupltPO.setPrmtNo(ordDupltPrmtNo);
        ordDupltPO.setAddedAmountGbCd("04"); // 주문 쿠폰 할인
        ordDupltPO.setAddedAmountAmt(totalOrdDupltCpDcAmt);
        ordDupltPO.setMemberCpNo(dupltMemberCpNo);
        ordDupltPO.setRegrNo(memberNo); // 등록자 번호
        ordDupltPO.setRegDttm(today); // 등록일자
        addedAmountList.add(ordDupltPO);
      }
      log.debug("======= addedAmountList : {}", addedAmountList);
      orderInfoPO.setAddedAmountList(addedAmountList);

      // 무료배송 프로모션 또는 쿠폰이 있을 경우 무료배송 처리
      if ("Y".equals(freeDlvrYn)) {
        for (OrderGoodsPO orderGoodsPO : orderGoodsList) {
          orderGoodsPO.setRealDlvrAmt(0f);
        }
      } else {
        for (OrderGoodsPO orderGoodsPO : orderGoodsList) {
          log.debug("======= 배송비 : {}", orderGoodsPO.getRealDlvrAmt());
          chkPaymentAmt += orderGoodsPO.getRealDlvrAmt();
        }
      }

      po.setOrderGoodsPO(orderGoodsList);
      log.debug("=== 상품 할인금액 : {}", totalGoodsPrmtDcAmt + totalGoodsCpDcAmt);
      log.debug("=== 주문 할인금액 : {}", totalOrdPrmtDcAmt + totalOrdCpDcAmt);
      log.debug("=== 중복 할인금액 : {}", totalOrdDupltPrmtDcAmt + totalOrdDupltCpDcAmt);
      chkPaymentAmt = chkPaymentAmt - (totalGoodsPrmtDcAmt + totalGoodsCpDcAmt + totalOrdPrmtDcAmt + totalOrdCpDcAmt
          + totalOrdDupltPrmtDcAmt + totalOrdDupltCpDcAmt);
      // 주문금액 검증
      log.debug("==== 주문금액 : {}", po.getPaymentAmt() + po.getMileageTotalAmt());
      log.debug("==== 계산금액 : {}", chkPaymentAmt);
      if (po.getPaymentAmt() + po.getMileageTotalAmt() != chkPaymentAmt) {
        ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
        err_result.setMessage("주문 금액이 일치하지 않습니다.");
        err_result.setSuccess(false);
        return err_result;
      }

      // step02.주문정보 등록 Biz실행
      OrderInfoPO orderInfo = po.getOrderInfoPO().clone();
      this.insertOrderInfo(orderInfo);

      // step03.주문 배송지정보 등록
      OrderInfoPO deliveryInfoPO = po.getOrderInfoPO().clone();
      this.insertOrderDelivery(deliveryInfoPO);

      // step04.상품정보 등록 Biz실행
      this.insertOrderGoods(po.getOrderGoodsPO());

      // step04-1.세트상품정보 등록 Biz실행
      this.insertOrderGoodsSet(po.getOrderGoodsPO());

      // step04-2.상품별 할인 정보 등록 Biz실행
      this.insertOrderGoodsDcInfo(po.getOrderGoodsPO());

      // step05.배송비 정보 등록
      this.insertDlvrc(po.getOrderGoodsPO());

      // step06.부가비용 등록
      OrderInfoPO addedAmountPO = po.getOrderInfoPO().clone();
      this.insertAddedAmount(addedAmountPO);

      // step07.상품 사은품 정보 등록
      this.insertFreebie(po.getOrderGoodsPO());

      // step08.주문 사은품 정보 등록
      this.insertOrdFreebie(ordFreebieList);
    } catch (Exception e) {
      log.error("주문 등록 에러 : {}", e.getMessage(), e);
      ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
      err_result.setMessage(MessageUtil.getMessage("front.web.order.insert.error"));
      err_result.setSuccess(false);
      return err_result;
    }

    result.setSuccess(true);
    result.setData(po);
    return result;
  }

  /**
   * 결제 프로세스
   */
  @Override
  public ResultModel<OrderPO> orderPayment(OrderPO po, HttpServletRequest request, Map<String, Object> reqMap,
      ModelAndView mav) throws Exception {
    ResultModel<OrderPO> result = new ResultModel<>();
    PaymentModel<?> payResult = new PaymentModel<>();

    // step01. pg결제 처리
    boolean paymentByMileage = false;// 적립금만으로 주문여부
    String accountDate = ""; // 정산 시간(yyyyMMDDHHmmss)

    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Date today = po.getRegDttm();
    String todayString = df.format(today);

    try {
      if (po.getPaymentAmt() > 0) {
        log.debug("=== orderPO.orderPayPO : {}", po.getOrderPayPO());
        if ("pc".equals(po.getMediaType())) {
          payResult = paymentService.pgPayment(po.getOrderPayPO(), reqMap, mav).getData();
        } else {
          log.debug("=== mobile orderPayment : {}", po.getOrderPayPO());
          if ("21".equals(po.getOrderPayPO().getPaymentWayCd())) { // 가상계좌
            log.debug("=== mobile orderPayment 21 : {}", po.getOrderPayPO());
            payResult.setPaymentAmt(Float.toString(po.getOrderPayPO().getPaymentAmt()));
            payResult.setPaymentWayCd(po.getOrderPayPO().getPaymentWayCd());
            payResult.setPaymentPgCd(po.getOrderPayPO().getPaymentPgCd());
            payResult.setOrdNo(po.getOrderPayPO().getOrdNo());
            payResult.setTxNo(po.getOrderPayPO().getTxNo());
            payResult.setConfirmResultCd(po.getOrderPayPO().getConfirmResultCd());
            payResult.setConfirmResultMsg(po.getOrderPayPO().getConfirmResultMsg());
            payResult.setPaymentCmpltDttm(po.getOrderPayPO().getPaymentCmpltDttm());
            payResult.setEscrowYn(po.getOrderPayPO().getEscrowYn());
            payResult.setBankCd(po.getOrderPayPO().getBankCd());
            payResult.setCashRctYn(po.getOrderPayPO().getCashRctYn());
            payResult.setUseGbCd(po.getOrderPayPO().getUseGbCd());
            payResult.setLinkTxNo(po.getOrderPayPO().getLinkTxNo());
          } else { // 신용카드
            log.debug("=== mobile orderPayment etc : {}", po.getOrderPayPO());
            payResult = paymentService.pgPaymentMobile(po.getOrderPayPO(), reqMap, mav).getData();
          }
        }

        // 중복매핑되는 변수들은 if else 밖에둔다
        payResult.setPaymentStatusCd("02"); // 상태코드(완료)
        accountDate = payResult.getPaymentCmpltDttm();
      } else {
        paymentByMileage = true;
        SimpleDateFormat df2 = new SimpleDateFormat("yyyyMMddHHmmss");
        Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(todayString);
        accountDate = df2.format(date);
      }
      // 공통 변수 세팅
      payResult.setSiteNo(po.getSiteNo());
      payResult.setPartnerNo(po.getPartnerNo());
      payResult.setOrdNo(po.getOrdNo());
      payResult.setPaymentTurn("1");
      payResult.setMemberNo(Long.toString(po.getOrderInfoPO().getMemberNo()));
      payResult.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
      payResult.setRegDttm(po.getRegDttm());
    } catch (Exception e) {
      log.error("PG PAYMENT ERROR : {}", e.getCause(), e);
      ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
      err_result.setMessage("PG 통신중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    try {
      log.debug("======== payResult.getConfirmResultCd() : {}", payResult.getConfirmResultCd());
      if (paymentByMileage
          || (("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        // step02.결제정보 등록 Biz실행(PG)
        if (!paymentByMileage) {
          payResult.setConfirmResultCd("00");
          payResult.setPaymentTurn("1");
          // 가상계좌일경우 입금자명에 주문자명 세팅
          if ("22".equals(payResult.getPaymentWayCd())) {
            payResult.setDpsterNm("");
            payResult.setPaymentStatusCd("01"); // 상태코드(접수)
          }
          this.insertOrderPay(payResult);
        }

        // step03.결제정보 등록 Biz실행(적립금)
        if (po.getMileageTotalAmt() > 0) {
          String txNo = payResult.getTxNo();
          String confirmNo = payResult.getConfirmNo();
          String confirmResultCd = payResult.getConfirmResultCd();
          String confirmResultMsg = payResult.getConfirmResultCd();
          String cardCd = payResult.getCardCd();
          String instmntMonth = payResult.getInstmntMonth();
          String bankCd = payResult.getBankCd();
          String paymentPgCd = payResult.getPaymentPgCd();

          payResult.setOrdNo(po.getOrdNo());
          payResult.setPaymentPgCd("00"); // PG코드(내부)
          payResult.setPaymentWayCd("01"); // 결제 수단 코드(적립금)
          if (payResult.getPaymentCmpltDttm() == null) {
            payResult.setPaymentCmpltDttm(todayString); // 결제 완료 일시
          }
          payResult.setPaymentStatusCd("02"); // 상태코드(완료)
          payResult.setPaymentAmt(Float.toString(po.getMileageTotalAmt())); // 결제금액
          payResult.setTxNo(null);
          payResult.setConfirmNo(null);
          payResult.setConfirmResultCd(null);
          payResult.setConfirmResultMsg(null);
          payResult.setCardCd(null);
          payResult.setInstmntMonth(null);
          payResult.setBankCd(null);
          this.insertOrderPay(payResult);

          // 등록 후 재셋팅
          payResult.setTxNo(txNo);
          payResult.setConfirmNo(confirmNo);
          payResult.setConfirmResultCd(confirmResultCd);
          payResult.setConfirmResultMsg(confirmResultMsg);
          payResult.setCardCd(cardCd);
          payResult.setInstmntMonth(instmntMonth);
          payResult.setBankCd(bankCd);
          payResult.setPaymentPgCd(paymentPgCd);

          // 적립금 사용 정보 등록
          SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
          savedmnPointPO.setSiteNo(po.getSiteNo());
          savedmnPointPO.setOrdNo(Long.toString(po.getOrdNo()));
          savedmnPointPO.setGbCd("20"); // 차감
          savedmnPointPO.setOrdCanselYn("N"); // 일반차감
          savedmnPointPO.setMemberNo(po.getRegrNo()); // 회원번호
          savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
          savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
          savedmnPointPO.setEtcReason(""); // 기타사유
          savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
          savedmnPointPO.setClaimTurn(0); // 클레임 차수
          savedmnPointPO.setPrcAmt(po.getMileageTotalAmt());
          savedmnPointPO.setNoRollback(po.getNoRollback());
          savedMnPointService.insertSavedMn(savedmnPointPO);
        }

        // step04.쿠폰 사용 정보 등록
        OrderInfoVO infoVO = new OrderInfoVO();
        infoVO.setOrdNo(Long.toString(po.getOrdNo()));
        List<OrderGoodsVO> amountList = selectAddedAmountAllList(infoVO);
        if (amountList != null && amountList.size() > 0) {
          List<CouponPO> couponList = new ArrayList<>();
          for (OrderGoodsVO vo : amountList) {
            if ("02".equals(vo.getAddedAmountGbCd()) || "04".equals(vo.getAddedAmountGbCd())) {
              int memberCpNo = vo.getMemberCpNo();
              CouponPO couponPO = new CouponPO();
              couponPO.setSiteNo(po.getSiteNo());
              couponPO.setMemberCpNo(memberCpNo);
              couponPO.setOrdNo(po.getOrdNo());
              couponPO.setUseYn("Y");
              couponPO.setUseDttm(today);
              couponPO.setUpdrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
              couponPO.setUpdDttm(today);
              couponList.add(couponPO);
            }
          }
          // 회원 쿠폰 사용 정보 등록
          couponService.updateMemberUseCoupon(couponList);
        }

        // 프로모션 적용 수량 업데이트
        List<PromotionPO> applyPrmtList = new ArrayList<>();
        List<OrderGoodsVO> addedAmountList = selectAddedAmountAllList(infoVO);
        if (addedAmountList != null && addedAmountList.size() > 0) {
          for (OrderGoodsVO amountVO : addedAmountList) {
            PromotionPO prmtPO = new PromotionPO();
            prmtPO.setPrmtNo(new Long(amountVO.getPrmtNo()).intValue());
            applyPrmtList.add(prmtPO);
          }
          updateApplyPromotionCnt(applyPrmtList);
        }

        String billYn = (String) reqMap.get("bill_yn"); // N:발급안함,Y:계산서
        log.debug("===billYn : {}", billYn);
        if ("Y".equals(billYn)) { // 계산서
          log.debug("=== 계산서 발행 ===");
          SalesProofPO billPO = new SalesProofPO();
          billPO.setOrdNo(po.getOrdNo());
          billPO.setTaxBillStatusCd("01"); // 상태코드(01:접수,02:승인,03:오류)
          billPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
          billPO.setMemberNo(po.getRegrNo());
          billPO.setCompanyNm((String) reqMap.get("billCompanyNm")); // 업체명
          billPO.setBizNo((String) reqMap.get("billBizNo")); // 사업자번호
          billPO.setCeoNm((String) reqMap.get("billCeoNm")); // 대표자명
          billPO.setBsnsCdts((String) reqMap.get("billBsnsCdts")); // 업태
          billPO.setItem((String) reqMap.get("billItem")); // 종목
          billPO.setPostNo((String) reqMap.get("billPostNo")); // 우편번호
          billPO.setRoadnmAddr((String) reqMap.get("billRoadnmAddr")); // 도로명주소
          billPO.setDtlAddr((String) reqMap.get("billDtlAddr")); // 상세주소
          billPO.setTotAmt(po.getOrderPayPO().getPaymentAmt()); // 총금액
          billPO.setManagerNm((String) reqMap.get("billManagerNm")); // 담당자
          billPO.setEmail((String) reqMap.get("billEmail")); // 이메일
          billPO.setTelNo((String) reqMap.get("billTelNo")); // 연락처
          billPO.setAcceptDttm(po.getRegDttm()); // 접수일시
          billPO.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo()); // 등록자
          billPO.setRegDttm(po.getRegDttm()); // 등록일자
          salesProofService.insertTaxBill(billPO);
        } else if ("N".equals(billYn)) {
          if ("Y".equals(payResult.getCashRctYn())) {
            log.debug("=== 현금영수증 발행 ===");
            SalesProofPO cashPO = new SalesProofPO();
            cashPO.setOrdNo(po.getOrdNo());
            cashPO.setCashRctStatusCd("02"); // 상태코드(01:접수,02:승인,03:오류)
            cashPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
            cashPO.setMemberNo(po.getRegrNo());
            cashPO.setUseGbCd(payResult.getUseGbCd()); // 사용구분코드(01:소득공제,02:지출증빙)
            cashPO.setIssueWayCd(payResult.getIssueWayCd()); // 발급수단코드(01:주민등록번호,02:휴대폰,03:사업자등록번호)
            cashPO.setIssueWayNo(payResult.getIssueWayNo()); // 발급수단번호
            cashPO.setTotAmt(po.getOrderPayPO().getPaymentAmt()); // 총금액
            cashPO.setFreeAmt(0F); // TODO: 면세금액 처리
            cashPO.setAcceptDttm(po.getRegDttm()); // 접수일시
            cashPO.setLinkTxNo(payResult.getLinkTxNo());
            cashPO.setApplicantNm(po.getOrderInfoPO().getOrdrNm()); // 신청자명
            cashPO.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo()); // 등록자
            cashPO.setRegDttm(po.getRegDttm()); // 등록일자
            salesProofService.insertCashRct(cashPO);
          }
        }

        // 결제완료 처리
        // step05.상품테이블 수정(재고변경)- 입금대기 주문의 경우 결제 완료시점에 재고 차감처리
        this.updateGoodsStock(po.getOrderGoodsPO());
        // step06.주문상태 수정
        OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
        orderGoodsVO.setSiteNo(po.getSiteNo());
        orderGoodsVO.setPartnerNo(po.getPartnerNo());
        orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderGoodsVO.setOrdStatusCd("20"); // 결제완료
        orderGoodsVO.setDlvrcPaymentCd(po.getDlvrcPaymentCd());
        orderGoodsVO.setStoreYn(po.getOrderInfoPO().getStoreYn());
        String curOrdStatusCd = "01"; // 주문접수(현재)
        if (SessionDetailHelper.getDetails().isLogin()) {
          orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
        }

        if (po.getOrderGoodsPO() != null) {
          if (po.getOrderGoodsPO().size() == 1) {
            orderGoodsVO.setGoodsNm(po.getOrderGoodsPO().get(0).getGoodsNm());
          } else {
            orderGoodsVO
                .setGoodsNm(po.getOrderGoodsPO().get(0).getGoodsNm() + " 외 " + (po.getOrderGoodsPO().size() - 1) + "건");
          }
        }

        if (paymentByMileage) { // 적립금 결제일 경우 결제완료일시 동기화 ( 주문, 결제 )
          orderGoodsVO.setPaymentCmpltDttm(todayString); // 결제 완료 일시
        } else { // PG결제일 경우 넘어온 데이터 셋팅
          orderGoodsVO.setPaymentCmpltDttm(payResult.getPaymentCmpltDttm()); // 결제 완료 일시
        }

        this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);

        // 매출 정산 테이블 처리(TO_SALES_ACCOUNT)
        OrderPO op = new OrderPO();
        op.setSiteNo(po.getSiteNo());
        op.setOrdNo(po.getOrdNo());
        op.setClaimGbCd("20"); // 신규주문
        op.setRegDt(accountDate);
        orderSalesAccountProcess(op);

        // 장바구니 삭제, 모바일 실시간 계좌이체 관련 이슈로 컨트롤러에서 처리(orderPaymentDone)

        result.setSuccess(true);
      } else {
        // 결제 실패 처리(로그?)
        OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
        orderGoodsVO.setSiteNo(po.getSiteNo());
        orderGoodsVO.setPartnerNo(po.getPartnerNo());
        orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderGoodsVO.setOrdStatusCd("22"); // 결제실패
        OrderGoodsVO curVo = selectCurOrdStatus(orderGoodsVO);
        String curOrdStatusCd = curVo.getOrdStatusCd(); // 현재 상태
        if (SessionDetailHelper.getDetails().isLogin()) {
          orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
        }
        this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);

        log.error("주문 결제 실패 에러[{}:{}]", payResult.getConfirmResultCd(), payResult.getConfirmResultMsg());
        ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
        // PG 결제오류 코드, 메시지 세팅
        String msg = "오류코드 : " + payResult.getConfirmResultCd();
        if (payResult.getConfirmResultCd() != null || !StringUtil.isEmpty(payResult.getConfirmResultCd().trim())) {
          msg += "<br/>오류메시지 : " + payResult.getConfirmResultMsg();
        }
        err_result.setMessage(msg);
        err_result.setSuccess(false);
        return err_result;
      }
    } catch (Exception e) {
      log.error("주문 결제 등록 에러 : {}", e.getMessage(), e);
      log.error("==== 결제 롤백(취소) start");
      log.error("==== payResult.getPaymentPgCd : {}", payResult);
      if (!paymentByMileage) { // 적립금만으로 결제가 아닐때만
        payResult.setPartCancelYn("N"); // Y:부분취소, N:전체취소
        payResult.setOrdStatusCd("01");
        payResult = paymentService.pgPaymentCancel(payResult).getData();
      }

      // 주문상태 수정(실패)
      OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
      orderGoodsVO.setSiteNo(po.getSiteNo());
      orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
      orderGoodsVO.setOrdStatusCd("22"); // 결제실패
      String curOrdStatusCd = "01"; // 주문접수(현재)
      if (SessionDetailHelper.getDetails().isLogin()) {
        orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      }
      this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);
      log.error("==== 결제 롤백(취소) End ");
      ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
      err_result.setMessage("주문 결제 정보 등록중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }
    log.debug("=== chanho test result");
    result.setSuccess(true);
    return result;
  }

  /**
   * 결제 이전 주문정보 조회
   */
  public OrderInfoVO selectBeforePayOrdInfo(OrderSO so) throws Exception {
    OrderInfoVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectBeforePayOrdInfo", so);
    return vo;
  }

  /**
   * 결제 이전 주문 상품 정보 조회
   */
  public List<OrderGoodsVO> selectBeforePayOrdGoodsInfoList(OrderSO so) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectBeforePayOrdGoodsInfoList", so);
    return list;
  }

  /**
   * 취소 배송비 결제 프로세스
   */
  @Override
  public ResultModel<PaymentModel<?>> orderCancelPayment(OrderPO po, HttpServletRequest request,
      Map<String, Object> reqMap, ModelAndView mav) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // ResultModel<OrderPO> result = new ResultModel<>();
    PaymentModel<?> payResult = new PaymentModel<>();

    // step01. pg결제 처리
    boolean paymentByMileage = false; // 포인트 결제 여부
    String paymentWayCd = po.getOrderPayPO().getPaymentWayCd();

    // 재주문 여부 확인
    OrderInfoVO reOrderInfoVO = reOrderService.selectCheckReOrderYn(po.getOrdNo());

    try {
      if (!"01".equals(paymentWayCd)) {
        log.debug("=== orderPO.orderPayPO : {}", po.getOrderPayPO());
        payResult = paymentService.pgPayment(po.getOrderPayPO(), reqMap, mav).getData();
        // 중복매핑되는 변수들은 if else 밖에둔다
        log.debug("=== orderPO : {}", po);
        log.debug("=== payResult : {}", payResult);
        payResult.setPaymentStatusCd("02"); // 상태코드(완료)
      } else {
        paymentByMileage = true;
      }
      // 공통 변수 세팅
      int claimTurn = 0;
      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn",
            Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
      } else {
        claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn", po.getOrdNo());
      }
      payResult.setSiteNo(po.getSiteNo());
      payResult.setPartnerNo(po.getPartnerNo());
      payResult.setDlvrOrdNo(po.getDlvrOrdNo());
      payResult.setPaymentTurn("1");
      payResult.setPaymentReasonCd(po.getPaymentReasonCd());
      payResult.setPaymentReasonNm(ServiceUtil.getCodeName("PAYMENT_REASON_CD", po.getPaymentReasonCd()));
      payResult.setClaimTurn(Integer.toString(claimTurn));
      payResult.setDlvrAmt(po.getDlvrAmt());
      payResult.setAreaAddDlvrc(po.getAreaAddDlvrc());
      payResult.setMemberNo(Long.toString(po.getOrderInfoPO().getMemberNo()));
      payResult.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
      payResult.setRegDttm(po.getRegDttm());
    } catch (Exception e) {
      log.error("PG PAYMENT ERROR : {}", e.getCause(), e);
      ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
      err_result.setMessage("PG 통신중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    try {
      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      Date today = new Date();
      String todayString = df.format(today);
      log.debug("======== payResult : {}", payResult);
      log.debug("======== payResult.getConfirmResultCd() : {}", payResult.getConfirmResultCd());
      if (paymentByMileage
          || (("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        // step02.결제정보 등록 Biz실행(PG)
        if (!paymentByMileage) {
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
          } else {
            payResult.setOrdNo(po.getOrdNo());
          }
          payResult.setConfirmResultCd("00");
          this.insertDlvrPay(payResult);
        }

        // step03.결제정보 등록 Biz실행(적립금)
        if (paymentByMileage) {
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
          } else {
            payResult.setOrdNo(po.getOrdNo());
          }
          payResult.setPaymentPgCd("00"); // PG코드(내부)
          payResult.setPaymentWayCd("01"); // 결제 수단 코드(적립금)
          payResult.setPaymentCmpltDttm(todayString); // 결제 완료 일시
          payResult.setPaymentStatusCd("02"); // 상태코드(완료)
          payResult.setPaymentAmt(Float.toString(po.getOrderPayPO().getPaymentAmt())); // 결제금액
          this.insertDlvrPay(payResult);

          // 적립금 사용 정보 등록
          SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
          savedmnPointPO.setSiteNo(po.getSiteNo());
          savedmnPointPO.setOrdNo(po.getDlvrOrdNo());
          savedmnPointPO.setGbCd("20"); // 차감
          savedmnPointPO.setOrdCanselYn("N"); // 일반차감
          savedmnPointPO.setMemberNo(po.getRegrNo()); // 회원번호
          savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
          savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
          savedmnPointPO.setEtcReason(po.getPaymentReasonNm()); // 기타사유
          savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
          savedmnPointPO.setClaimTurn(Integer.parseInt(payResult.getClaimTurn())); // 클레임 차수
          savedmnPointPO.setPrcAmt(po.getOrderPayPO().getPaymentAmt());
          savedMnPointService.insertSavedMn(savedmnPointPO);
        }
      } else {
        log.error("배송비 결제 실패 에러[{}:{}]", payResult.getConfirmResultCd(), payResult.getConfirmResultMsg());
        ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
        // PG 결제오류 코드, 메시지 세팅
        String msg = "오류코드 : " + payResult.getConfirmResultCd();
        if (payResult.getConfirmResultCd() != null || !StringUtil.isEmpty(payResult.getConfirmResultCd().trim())) {
          msg += "<br/>오류메시지 : " + payResult.getConfirmResultMsg();
        }
        err_result.setMessage(msg);
        err_result.setSuccess(false);
        return err_result;
      }
    } catch (Exception e) {
      log.error("배송비 결제 등록 에러 : {}", e.getMessage());
      log.error("==== 결제 롤백(취소) start");
      log.error("==== payResult.getPaymentPgCd : {}", payResult);
      if (!paymentByMileage) {
        payResult.setPartCancelYn("N"); // Y:부분취소, N:전체취소
        payResult.setOrdStatusCd("01");
        payResult = paymentService.pgPaymentCancel(payResult).getData();
      }
      log.error("==== 결제 롤백(취소) End ");
      ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
      err_result.setMessage("배송비 결제 정보 등록중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    result.setData(payResult);
    result.setSuccess(true);
    return result;
  }

  /**
   * 취소 배송비 결제 프로세스 모바일
   */
  @Override
  public ResultModel<PaymentModel<?>> orderCancelPaymentMobile(OrderPO po, HttpServletRequest request,
      Map<String, Object> reqMap, ModelAndView mav) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // ResultModel<OrderPO> result = new ResultModel<>();
    PaymentModel<?> payResult = new PaymentModel<>();

    // step01. pg결제 처리
    boolean paymentByMileage = false; // 포인트 결제 여부
    String paymentWayCd = po.getOrderPayPO().getPaymentWayCd();

    // 재주문 여부 확인
    OrderInfoVO reOrderInfoVO = reOrderService.selectCheckReOrderYn(po.getOrdNo());

    try {

      if (!"01".equals(paymentWayCd)) {
        log.debug("=== orderPO.orderPayPO : {}", po.getOrderPayPO());

        // 실시간계좌이체
        if ("21".equals(po.getOrderPayPO().getPaymentWayCd())) {
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
          } else {
            payResult.setOrdNo(po.getOrdNo());
          }
          payResult.setPaymentPgCd(CoreConstants.PG_CD_INICIS);
          payResult.setPaymentWayCd("21");
          payResult.setTxNo(po.getOrderPayPO().getTxNo());
          payResult.setConfirmResultCd(po.getOrderPayPO().getConfirmResultCd());
          payResult.setBankCd(po.getOrderPayPO().getBankCd());
          payResult.setPaymentAmt(Double.toString(po.getOrderPayPO().getPaymentAmt()));
          payResult.setConfirmResultMsg(po.getOrderPayPO().getConfirmResultMsg());
          payResult.setPaymentCmpltDttm(po.getOrderPayPO().getPaymentCmpltDttm());
          payResult.setConfirmNo(po.getOrderPayPO().getConfirmNo());
          payResult.setEscrowYn(request.getParameter("escrowYn"));
          payResult.setCashRctYn(po.getOrderPayPO().getCashRctYn());
          payResult.setUseGbCd(po.getOrderPayPO().getUseGbCd());
          payResult.setLinkTxNo(po.getOrderPayPO().getLinkTxNo());

        } else {
          payResult = paymentService.pgPaymentMobile(po.getOrderPayPO(), reqMap, mav).getData();
        }

        // 중복매핑되는 변수들은 if else 밖에둔다
        log.debug("=== orderPO : {}", po);
        log.debug("=== payResult : {}", payResult);
        payResult.setPaymentStatusCd("02"); // 상태코드(완료)
      } else {
        paymentByMileage = true;
      }

      // 공통 변수 세팅
      int claimTurn = 0;
      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn",
            Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
      } else {
        claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn", po.getOrdNo());
      }
      payResult.setSiteNo(po.getSiteNo());
      payResult.setPartnerNo(po.getPartnerNo());
      payResult.setDlvrOrdNo(po.getDlvrOrdNo());
      payResult.setPaymentTurn("1");
      payResult.setPaymentReasonCd(po.getPaymentReasonCd());
      payResult.setPaymentReasonNm(ServiceUtil.getCodeName("PAYMENT_REASON_CD", po.getPaymentReasonCd()));
      payResult.setClaimTurn(Integer.toString(claimTurn));
      payResult.setDlvrAmt(po.getDlvrAmt());
      payResult.setAreaAddDlvrc(po.getAreaAddDlvrc());
      payResult.setMemberNo(Long.toString(po.getOrderInfoPO().getMemberNo()));
      payResult.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
      payResult.setRegDttm(po.getRegDttm());
    } catch (Exception e) {
      log.error("PG PAYMENT ERROR : {}", e.getCause(), e);
      ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
      err_result.setMessage("PG 통신중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    try {
      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      Date today = new Date();
      String todayString = df.format(today);
      log.debug("======== payResult : {}", payResult);
      log.debug("======== payResult.getConfirmResultCd() : {}", payResult.getConfirmResultCd());
      if (paymentByMileage
          || (("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        // step02.결제정보 등록 Biz실행(PG)
        if (!paymentByMileage) {
          payResult.setConfirmResultCd("00");
          this.insertDlvrPay(payResult);
        }

        // step03.결제정보 등록 Biz실행(적립금)
        if (paymentByMileage) {
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
          } else {
            payResult.setOrdNo(po.getOrdNo());
          }
          payResult.setPaymentPgCd("00"); // PG코드(내부)
          payResult.setPaymentWayCd("01"); // 결제 수단 코드(적립금)
          payResult.setPaymentCmpltDttm(todayString); // 결제 완료 일시
          payResult.setPaymentStatusCd("02"); // 상태코드(완료)
          payResult.setPaymentAmt(Float.toString(po.getOrderPayPO().getPaymentAmt())); // 결제금액
          this.insertDlvrPay(payResult);

          // 적립금 사용 정보 등록
          SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
          savedmnPointPO.setSiteNo(po.getSiteNo());
          savedmnPointPO.setOrdNo(po.getDlvrOrdNo());
          savedmnPointPO.setGbCd("20"); // 차감
          savedmnPointPO.setOrdCanselYn("N"); // 일반차감
          savedmnPointPO.setMemberNo(po.getRegrNo()); // 회원번호
          savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
          savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
          savedmnPointPO.setEtcReason(po.getPaymentReasonNm()); // 기타사유
          savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
          savedmnPointPO.setClaimTurn(Integer.parseInt(payResult.getClaimTurn())); // 클레임 차수
          savedmnPointPO.setPrcAmt(po.getOrderPayPO().getPaymentAmt());
          savedMnPointService.insertSavedMn(savedmnPointPO);
        }
      } else {
        log.error("배송비 결제 실패 에러[{}:{}]", payResult.getConfirmResultCd(), payResult.getConfirmResultMsg());
        ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
        // PG 결제오류 코드, 메시지 세팅
        String msg = "오류코드 : " + payResult.getConfirmResultCd();
        if (payResult.getConfirmResultCd() != null || !StringUtil.isEmpty(payResult.getConfirmResultCd().trim())) {
          msg += "<br/>오류메시지 : " + payResult.getConfirmResultMsg();
        }
        err_result.setMessage(msg);
        err_result.setSuccess(false);
        return err_result;
      }
    } catch (Exception e) {
      log.error("배송비 결제 등록 에러 : {}", e.getMessage());
      log.error("==== 결제 롤백(취소) start");
      log.error("==== payResult.getPaymentPgCd : {}", payResult);
      if (!paymentByMileage) {
        payResult.setPartCancelYn("N"); // Y:부분취소, N:전체취소
        payResult.setOrdStatusCd("01");
        payResult = paymentService.pgPaymentCancel(payResult).getData();
      }
      log.error("==== 결제 롤백(취소) End ");

      PaymentModel<?> payCancelResult = new PaymentModel<>();
      payCancelResult = payResult;
      if (!paymentByMileage) {
        log.debug("======= PG 결제 롤백");
        payCancelResult.setPartCancelYn("N"); // Y:부분취소, N:전체취소
        payCancelResult.setOrdStatusCd("01");
        payCancelResult = paymentService.pgPaymentCancel(payCancelResult).getData();
      } else {
        // 포인트 결제 롤백
        log.debug("======= 포인트 결제 롤백");
        SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
        savedmnPointPO.setSiteNo(po.getSiteNo());
        savedmnPointPO.setOrdNo(po.getDlvrOrdNo());
        savedmnPointPO.setGbCd("20"); // 차감
        savedmnPointPO.setOrdCanselYn("Y"); // 취소
        savedmnPointPO.setMemberNo(po.getRegrNo()); // 회원번호
        savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
        savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
        savedmnPointPO.setEtcReason((String) reqMap.get("paymentReasonNm")); // 기타사유
        savedmnPointPO.setDeductGbCd("02"); // 차감구분코드(취소)
        savedmnPointPO.setPrcAmt(po.getOrderPayPO().getPaymentAmt()); // 적립금 ( 환불금액 )
        savedMnPointService.insertSavedMn(savedmnPointPO);
        log.debug("======= 포인트 결제 롤백 끝");
      }
      ResultModel<PaymentModel<?>> err_result = new ResultModel<>();
      err_result.setMessage("배송비 결제 정보 등록중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    result.setData(payResult);
    result.setSuccess(true);
    return result;
  }

  /**
   * 주문정보 등록 table : TO_ORD
   */
  @Override
  public ResultModel<OrderInfoPO> insertOrderInfo(OrderInfoPO po) throws Exception {
    ResultModel<OrderInfoPO> result = new ResultModel<>();
    // 주문정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderInfo", po);
    } catch (Exception e) {
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문 배송지정보 등록 table : TO_ORD
   */
  @Override
  public ResultModel<OrderInfoPO> insertOrderDelivery(OrderInfoPO po) throws Exception {
    ResultModel<OrderInfoPO> result = new ResultModel<>();
    // 주문 배송지 정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderDelivery", po);
    } catch (Exception e) {
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문상품정보 등록 table : TO_ORD_DTL
   */
  @Override
  public ResultModel<OrderGoodsPO> insertOrderGoods(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 상품정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderGoods", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문상품세트 정보 등록 table : TO_ORD_SET_DTL
   */
  @Override
  public ResultModel<OrderGoodsPO> insertOrderGoodsSet(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 상품 세트 정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        List<OrderGoodsPO> goodsSetList = po.getGoodsSetList();
        if (goodsSetList != null && goodsSetList.size() > 0) {
          for (OrderGoodsPO setPO : goodsSetList) {
            proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderGoodsSet", setPO);
          }
        }
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문상품 할인 정보 등록 table : TO_ORD_DTL_DC_TEMP
   */
  @Override
  public ResultModel<OrderGoodsPO> insertOrderGoodsDcInfo(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 주문상품 할인 정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderGoodsDcInfo", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 배송비 정보 등록 table : TO_DLVR
   */
  @Override
  public ResultModel<OrderGoodsPO> insertDlvrc(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 배송비 정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertDlvrc", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 결제 정보 등록 table : TO_PAYMENT
   */
  @Override
  public ResultModel<PaymentModel<?>> insertOrderPay(PaymentModel po) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // 결제 정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderPay", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 배송비 결제 정보 등록 table : TO_DLVR_PAYMENT
   */
  @Override
  public ResultModel<PaymentModel<?>> insertDlvrPay(PaymentModel po) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // 배송비 결제 정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertDlvrPay", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 부가비용 정보 등록 table : TO_ADDED_AMOUNT
   */
  @Override
  public ResultModel<OrderInfoPO> insertAddedAmount(OrderInfoPO po) throws Exception {
    ResultModel<OrderInfoPO> result = new ResultModel<>();
    // 부가 비용 정보 등록 Biz실행
    try {
      if (po.getAddedAmountList() != null & po.getAddedAmountList().size() > 0) {
        for (OrderGoodsPO addedPO : po.getAddedAmountList()) {
          log.debug("==== addedPO : {}", addedPO);
          log.debug("==== addedPO.getAddedAmountAmt() : {}", addedPO.getAddedAmountAmt());
          proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertAddedAmount", addedPO);
        }
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 상품 사은품 정보 등록 table : TO_ORD_FREEBIE
   */
  @Override
  public ResultModel<OrderGoodsPO> insertFreebie(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 주문 사은품 정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        if (po.getFreebieList() != null && po.getFreebieList().size() > 0) {
          for (OrderGoodsPO freebiePO : po.getFreebieList()) {
            proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertFreebie", freebiePO);
          }
        }
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문 사은품 정보 등록 table : TO_ORD_FREEBIE
   */
  @Override
  public ResultModel<OrderGoodsPO> insertOrdFreebie(List<OrderGoodsPO> poList) throws Exception {
    ResultModel<OrderGoodsPO> result = new ResultModel<>();
    // 주문 사은품 정보 등록 Biz실행
    try {
      for (OrderGoodsPO po : poList) {
        proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertFreebie", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 쿠폰 사용 정보 등록 table : TO_COUPON_USE
   */
  @Override
  public ResultModel<CouponPO> insertCouponUse(List<CouponPO> poList) throws Exception {
    ResultModel<CouponPO> result = new ResultModel<>();
    // 쿠폰 사용 정보 등록 Biz실행
    try {
      for (CouponPO po : poList) {
        proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertCouponUse", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 클레임 상세 등록 table : TO_CLAIM_DTL
   */
  @Override
  public ResultModel<ClaimGoodsPO> insertClaimDtl(ClaimGoodsPO po) throws Exception {
    ResultModel<ClaimGoodsPO> result = new ResultModel<>();
    // 클레임 상세 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertClaimDtl", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 클레임 상세 업데이트 table : TO_CLAIM_DTL
   */
  @Override
  public ResultModel<ClaimGoodsPO> updateClaimDtl(ClaimGoodsPO po) throws Exception {
    ResultModel<ClaimGoodsPO> result = new ResultModel<>();
    // 클레임 상세 수정 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "updateClaimDtl", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 상품 구매 재고 수정
   */
  @Override
  public void updateGoodsStock(List<OrderGoodsPO> poList) throws Exception {
    try {
      if (poList != null && poList.size() > 0) {
        OrderGoodsPO stockPO = new OrderGoodsPO();
        for (OrderGoodsPO po : poList) {
          if (StringUtil.isEmpty(po.getGoodsSetNo())) {
            if (StringUtil.isNotEmpty(po.getStoreNo())) {
              proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStoreStock", po);
            } else {
              proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStock", po);
            }
          } else {
            // 세트 상품 조회
            OrderGoodsVO vo = new OrderGoodsVO();
            vo.setOrdNo(Long.toString(po.getOrdNo()));
            vo.setOrdDtlSeq(Long.toString(po.getOrdDtlSeq()));
            vo.setGoodsSetNo(po.getGoodsSetNo());
            List<OrderGoodsVO> goodsSetList = selectOrdGoodsSetList(vo);
            for (OrderGoodsVO setVO : goodsSetList) {
              stockPO = new OrderGoodsPO();
              stockPO.setItemNo(setVO.getItemNo());
              stockPO.setOrdQtt(po.getOrdQtt());
              if (StringUtil.isNotEmpty(po.getStoreNo())) {
                stockPO.setStoreNo(po.getStoreNo());
                proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStoreStock", stockPO);
              } else {
                proxyDao.update(MapperConstants.ORDER_MANAGE + "updateGoodsStock", stockPO);
              }
            }
          }
        }
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
  }

  /**
   * 주문 취소 프로세스 STEP. 1 파라미터 확인, 금액확인 STEP. 2 현재 주문상태 검증 및 메일VO set STEP. 3 결제 정보
   * 확인 (적립금 제외한 결제수단 확인) STEP. 4 데이터 취소 처리 STEP. 4-1 환불, 취소정보 상태 상세 업데이트 STEP.
   * 4-2 상품재고 처리 STEP. 4-3 배송비0원 처리 STEP. 4-4 배송 정보 등록 STEP. 4-5 배송 정보 등록 기 취소된
   * 배송정보 등록 STEP. 4-6 적립금 사용 정보 복원 STEP. 4-7 남은 적립금 등록 STEP. 4-8 현금 환불 정보 등록/수정
   * STEP. 4-9 주문 마스터 정보 금액 업데이트 STEP. 5-1 PG 취소처리 STEP. 5-2 결제 정보 처리 PG 취소시 처리 및
   * 현금영수증 취소 처리 STEP. 6 SMS, EMAIL 처리
   */
  @Override
  public ResultModel<OrderPayPO> cancelOrder(OrderPO po) throws Exception {
    ResultModel<OrderPayPO> result = new ResultModel<>();

    log.debug("/** STEP. 1 파라미터 확인, 금액확인 *******************************************************/");
    // 프론트/관리자 분기 처리
    String strOrdNo = Long.toString(po.getOrdNo());
    long longOrdNo = po.getOrdNo();
    long longSiteNo = po.getSiteNo();
    String cancelType = po.getCancelType(); // 01:프론트, 02:관리자
    Date today = new Date();
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String todayString = df.format(today);

    Float totAmt = 0f; // 총 결제금액
    Float pgAmt = 0f; // 적립금 제외한 금액
    Float payReserveAmt = 0f; // 적립금 금액
    Float orgReserveAmt = 0f; // 적립금 원 결제금액
    Float restAmt = 0f; // 취소 후 남은 금액
    Float refundAmt = 0f; // 환불 금액
    Float orgPgAmt = 0f;
    String paymentTurn = ""; // 결제 차수
    String partCancelYn = ""; // 부분취소 여부
    String pricePartCancelYn = ""; // 금액 부분취소 여부
    String dlvrYn = ""; // 배송 여부(Y:배송 후,N:배송전)
    String strOrdStatusCd = po.getCancelStatusCd();
    Float cancelAddDlvrAmt = 0f; // 3만원미만 추가 배송비
    Float refundDlvrAmt = 0f; // 차감 반품배송비
    Float rlsDlvrAmt = 0f; // 차감 출고배송비
    Float refundAreaAddDlvrc = 0f; // 차감 지역배송비

    String inicisPartCancelYn = "";

    log.debug(" ======= 배송비 변경 및 환불금액 조회 시작 ==========");
    OrderVO dataVO = new OrderVO();
    // 재주문 여부 확인
    OrderInfoVO reOrderInfoVO = reOrderService.selectCheckReOrderYn(po.getOrdNo());
    if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
      // 원본 주문 배송비 변경 및 환불금액 확인
      dataVO = reOrderService.reChangePriceData(po);
    } else {
      // 배송비 변경 및 환불금액 확인
      dataVO = changePriceData(po);
    }
    log.debug(" ======= 배송비 변경 및 환불금액 조회 시작 ==========");

    long longLoginNo = 0; // 로그인 회원 번호
    long longMemberNo = dataVO.getOrderInfoVO().getMemberNo(); // 주문정보 회원번호
    if (SessionDetailHelper.getDetails() != null && SessionDetailHelper.getDetails().isLogin()) {
      longLoginNo = SessionDetailHelper.getDetails().getSession().getMemberNo();
    } else {
      longLoginNo = po.getRegrNo();
    }

    partCancelYn = dataVO.getPartCancelYn();
    totAmt = dataVO.getTotAmt();
    refundAmt = dataVO.getRefundAmt();
    restAmt = dataVO.getRestAmt();
    orgPgAmt = dataVO.getOrgPgAmt();
    pgAmt = dataVO.getPgAmt();
    orgReserveAmt = dataVO.getOrgReserveAmt();
    payReserveAmt = dataVO.getPayReserveAmt();
    pricePartCancelYn = dataVO.getPricePartCancelYn();
    dlvrYn = dataVO.getDlvrYn();
    cancelAddDlvrAmt = dataVO.getCancelAddDlvrAmt();
    refundDlvrAmt = dataVO.getRefundDlvrAmt();
    rlsDlvrAmt = dataVO.getRlsDlvrAmt();
    refundAreaAddDlvrc = dataVO.getRefundAreaAddDlvrc();

    po.setPartCancelYn(partCancelYn);
    log.debug(" ======= 부분취소 여부 : {}", partCancelYn);
    log.debug(" ======= 총 결제금액(최종) : {}", totAmt);
    log.debug(" ======= 환불금액 : {}", refundAmt);
    log.debug(" ======= 취소 후 남은금액 : {}", restAmt);
    log.debug(" ======= 원본 PG 금액 : {}", orgPgAmt);
    log.debug(" ======= PG 금액 : {}", pgAmt);
    log.debug(" ======= 원본 포인트 금액 : {}", orgReserveAmt);
    log.debug(" ======= 포인트 금액 : {}", payReserveAmt);
    log.debug(" ======= cancelType : {}", cancelType);
    log.debug(" ======= 3만원 미만 추가 배송비 : {}", cancelAddDlvrAmt);
    log.debug(" ======= 사유 코드 : {}", po.getClaimReasonCd());
    log.debug(" ======= 상세 사유 : {}", po.getClaimDtlReason());

    log.debug("siteNo :::::::::::::: " + po.getSiteNo());
    log.debug("ordNo ::::::::::::::::: " + po.getOrdNo());
    log.debug("ordDtlSeqArr ::::::::::::::::: {}", po.getOrdDtlSeqArr());
    log.debug("claimQttArr ::::::::::::::::: {}", po.getClaimQttArr());
    log.debug("addOptClaimQttArr ::::::::::::::::: {}", po.getAddOptClaimQttArr());
    log.debug("pgType ::::::::::::::::: " + po.getPgType());

    log.debug("/** STEP. 2 현재 주문상태 조회 ***********************************************/");
    OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
    orderGoodsVO.setSiteNo(po.getSiteNo());
    orderGoodsVO.setOrdNo(strOrdNo);
    OrderGoodsVO curVo = selectCurOrdStatus(orderGoodsVO);

    boolean onlyReserve = false;
    boolean standBydeposit = false;
    OrderInfoVO infoVO = new OrderInfoVO();
    infoVO.setSiteNo(longSiteNo);
    if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
      infoVO.setOrdNo(reOrderInfoVO.getOrgOrdNo());
    } else {
      infoVO.setOrdNo(strOrdNo);
    }
    if (payReserveAmt > 0 && pgAmt == 0) {
      onlyReserve = true;
      infoVO.setPgType("N"); // 포인트 확인
    } else {
      infoVO.setPgType("Y"); // 포인트 제외 결제수단 확인
    }
    OrderPayVO payVo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdDtlPayInfo", infoVO);
    payVo.setPgType("N");

    PaymentModel<?> payResult = new PaymentModel<>();
    log.debug("/** STEP. 3 데이터 취소 처리 *************************************************************/");
    try {
      // 클레임 번호 생성
      long claimNo = 0;
      if (po.getClaimNo() != null) {
        claimNo = Long.parseLong(po.getClaimNo());
      } else {
        claimNo = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "createClaimNo", longSiteNo);
      }
      // 클레임 차수 조회
      int claimTurn = 0;
      if (po.getClaimTurn() != null && po.getClaimTurn() >= 0) {
        claimTurn = po.getClaimTurn();
      } else {
        if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
          claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn",
              Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
        } else {
          claimTurn = proxyDao.selectOne(MapperConstants.ORDER_EXCHANGE + "selectClaimTurn", longOrdNo);
        }
      }

      // 변경된 할인 정보 등록
      List<OrderGoodsPO> reOrderGoodsList = new ArrayList();
      for (OrderGoodsVO vo : dataVO.getReOrderGoodsVO()) {
        OrderGoodsPO reOrderGoodsPO = new OrderGoodsPO();
        reOrderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
        reOrderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
        reOrderGoodsPO.setClaimTurn(claimTurn);
        reOrderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt());
        reOrderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt());
        reOrderGoodsPO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
        reOrderGoodsPO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
        reOrderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt());
        reOrderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt());
        if (Float.compare(vo.getOrdCpDcAmt(), 0) <= 0 && Float.compare(vo.getOrdPrmtDcAmt(), 0) <= 0) {
          reOrderGoodsPO.setOrdPrmtGrpNo(null);
          reOrderGoodsPO.setOrdPrmtNo(null);
        } else {
          reOrderGoodsPO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
          reOrderGoodsPO.setOrdPrmtNo(vo.getOrdPrmtNo());
        }
        reOrderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt());
        reOrderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt());
        if (Float.compare(vo.getOrdDupltCpDcAmt(), 0) <= 0 && Float.compare(vo.getOrdDupltPrmtDcAmt(), 0) <= 0) {
          reOrderGoodsPO.setDupltPrmtGrpNo(null);
          reOrderGoodsPO.setDupltPrmtNo(null);
        } else {
          reOrderGoodsPO.setDupltPrmtGrpNo(vo.getDupltPrmtGrpNo());
          reOrderGoodsPO.setDupltPrmtNo(vo.getDupltPrmtNo());
        }
        if (Float.compare(vo.getDlvrcCpDcAmt(), 0) <= 0 && Float.compare(vo.getDlvrcPrmtDcAmt(), 0) <= 0) {
          reOrderGoodsPO.setDlvrcPrmtGrpNo(null);
          reOrderGoodsPO.setDlvrcPrmtNo(null);
        } else {
          reOrderGoodsPO.setDupltPrmtGrpNo(vo.getDlvrcPrmtGrpNo());
          reOrderGoodsPO.setDupltPrmtNo(vo.getDlvrcPrmtNo());
        }
        reOrderGoodsPO.setPvdSvmn(vo.getPvdSvmn());
        reOrderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
        reOrderGoodsPO.setRegrNo(vo.getRegrNo());
        reOrderGoodsPO.setRegDttm(today);
        reOrderGoodsList.add(reOrderGoodsPO);
      }
      log.debug("========= reOrderGoodsList : {}", reOrderGoodsList);
      insertOrderGoodsDcInfo(reOrderGoodsList);

      // 결제 차수별 PG/포인트 환불금액 등록
      OrderPayPO refundPO = new OrderPayPO();
      refundPO.setSiteNo(longSiteNo);
      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        refundPO.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
      } else {
        refundPO.setOrdNo(longOrdNo);
      }
      refundPO.setClaimTurn(claimTurn);
      refundPO.setPaymentWayCd(payVo.getPaymentWayCd());
      refundPO.setPgRefundAmt(pgAmt);
      refundPO.setPointRefundAmt(payReserveAmt);
      refundPO.setRegrNo(longLoginNo);
      refundPO.setRegDttm(today);
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertPaymentRefund", refundPO); // 환불내역 등록

      try {
        String ordDtlSeqArr[] = po.getOrdDtlSeqArr();
        int idx = 0;
        List<OrderGoodsPO> stockGoodsList = new ArrayList<>();
        OrderGoodsPO stockGoodsPO = new OrderGoodsPO();
        ClaimGoodsPO cpo = new ClaimGoodsPO();
        Float areaDlvrAmt = 0f;

        log.debug("/** 취소 리스트 처리 (-) ***************************************************************/");
        for (String ordDtlSeq : ordDtlSeqArr) {
          stockGoodsPO = new OrderGoodsPO();

          // 주문상태 정보
          OrderGoodsVO statusVO = new OrderGoodsVO();
          statusVO.setSiteNo(longSiteNo);
          statusVO.setOrdNo(strOrdNo);
          statusVO.setOrdDtlSeq(ordDtlSeq);

          // 주문 단건 조회 ( 적립금, 배송비 관련 등 )
          OrderGoodsVO ogVO = selectOrdCancelDtlInfo(statusVO);
          statusVO.setOrdStatusCd(strOrdStatusCd); // 결제취소 or 환불완료

          stockGoodsPO.setSiteNo(longSiteNo);
          stockGoodsPO.setOrdNo(longOrdNo);
          stockGoodsPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
          stockGoodsPO.setRegrNo(longLoginNo);
          stockGoodsPO.setRegDttm(today);

          // 재고 정보
          log.debug("ogVO.getItemNo() 단품번호 ::::: " + ogVO.getItemNo());
          log.debug("po.getClaimQttArr()[idx] * (-1) 수량 ::::: " + Integer.parseInt(po.getClaimQttArr()[idx]) * (-1));
          stockGoodsPO.setItemNo(ogVO.getItemNo());
          stockGoodsPO.setOrdQtt(Integer.parseInt(po.getClaimQttArr()[idx]) * (-1));
          stockGoodsPO.setGoodsSetNo(ogVO.getGoodsSetNo());
          stockGoodsList.add(stockGoodsPO);

          log.debug("/** STEP. 3-1 환불, 취소정보 상태 상세 업데이트 ******************************/");
          cpo = new ClaimGoodsPO();
          cpo.setSiteNo(longSiteNo);
          cpo.setOrdNo(strOrdNo);
          cpo.setOrdDtlSeq(ordDtlSeq);
          cpo.setClaimNo(claimNo);
          cpo.setClaimTurn(claimTurn);
          cpo.setClaimReasonCd(po.getClaimReasonCd());
          cpo.setClaimDtlReason(po.getClaimDtlReason());
          cpo.setClaimMemo(po.getClaimMemo());
          cpo.setClaimQtt(Integer.parseInt(po.getClaimQttArr()[idx]));
          cpo.setOrdDtlSeqArr(ordDtlSeqArr);
          if (po.getAddOptClaimQttArr() != null) {
            cpo.setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[idx]));
          }
          cpo.setOrdDtlStatusCd(strOrdStatusCd); // 주문 취소시 적용
          cpo.setDirectReceptAutoCancelYn(po.getDirectReceptAutoCancelYn());
          cpo.setRegrNo(longLoginNo);
          cpo.setUpdrNo(longLoginNo);
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            // 원본 주문 상세 번호 조회
            List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(po);
            for (OrderGoodsVO orgVO : orgOrdGoodsList) {
              if (ogVO.getOrdDtlSeq().equals(orgVO.getOrdDtlSeq())) {
                cpo.setOrgOrdNo(orgVO.getOrgOrdNo());
                cpo.setOrgOrdDtlSeq(orgVO.getOrgOrdDtlSeq());
              }
            }
          } else {
            cpo.setOrgOrdNo(strOrdNo);
            cpo.setOrgOrdDtlSeq(ogVO.getOrdDtlSeq());
          }
          // 주문 상태 변경 및 클레임 등록
          refundService.updateClaimRefund(cpo);
          idx++;
        }

        // 상품 사은품+추가 상품 처리
        if (dataVO.getCancelGoodsPrmtInfo() != null && dataVO.getCancelGoodsPrmtInfo().size() > 0) {
          for (OrderGoodsVO vo : dataVO.getCancelGoodsPrmtInfo()) {
            long prmtNo = vo.getGoodsPrmtNo();
            long prmtGrpNo = vo.getGoodsPrmtGrpNo();
            PromotionSO promotionSO = new PromotionSO();
            promotionSO.setPrmtNo(prmtNo);
            PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
            if ("04".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
              for (OrderGoodsVO reVO : dataVO.getOrderGoodsVO()) {
                if (reVO.getGoodsPrmtGrpNo() != null) {
                  log.debug("==== reVO.getGoodsPrmtGrpNo() : {}", reVO.getGoodsPrmtGrpNo());
                  log.debug("==== reVO.getFreebieGoodsYn() : {}", reVO.getFreebieGoodsYn());
                  log.debug("==== reVO.getPlusGoodsYn() : {}", reVO.getPlusGoodsYn());
                  if (reVO.getGoodsPrmtGrpNo() == prmtGrpNo
                      && ("Y".equals(reVO.getFreebieGoodsYn()) || "Y".equals(reVO.getPlusGoodsYn()))) {
                    stockGoodsPO = new OrderGoodsPO();

                    // 주문상태 정보
                    OrderGoodsVO statusVO = new OrderGoodsVO();
                    statusVO.setSiteNo(longSiteNo);
                    statusVO.setOrdNo(strOrdNo);
                    statusVO.setOrdDtlSeq(reVO.getOrdDtlSeq());

                    OrderGoodsVO ogVO = selectOrdCancelDtlInfo(statusVO);
                    statusVO.setOrdStatusCd(strOrdStatusCd); // 결제취소 or 환불완료

                    stockGoodsPO.setSiteNo(longSiteNo);
                    stockGoodsPO.setOrdNo(longOrdNo);
                    stockGoodsPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                    stockGoodsPO.setRegrNo(longLoginNo);
                    stockGoodsPO.setRegDttm(today);

                    // 재고 정보
                    log.debug("ogVO.getItemNo() 단품번호 ::::: " + ogVO.getItemNo());
                    log.debug("사은품 취소 수량 ::::: " + ogVO.getOrdQtt() * (-1));
                    stockGoodsPO.setItemNo(ogVO.getItemNo());
                    stockGoodsPO.setOrdQtt(ogVO.getOrdQtt() * (-1));
                    stockGoodsPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                    stockGoodsList.add(stockGoodsPO);

                    log.debug("/** STEP. 3-1 환불, 취소정보 상태 상세 업데이트 ******************************/");
                    cpo = new ClaimGoodsPO();
                    cpo.setSiteNo(longSiteNo);
                    cpo.setOrdNo(strOrdNo);
                    cpo.setOrdDtlSeq(reVO.getOrdDtlSeq());
                    cpo.setClaimNo(claimNo);
                    cpo.setClaimTurn(claimTurn);
                    cpo.setClaimReasonCd(po.getClaimReasonCd());
                    cpo.setClaimDtlReason(po.getClaimDtlReason());
                    cpo.setClaimMemo(po.getClaimMemo());
                    cpo.setClaimQtt((int) ogVO.getOrdQtt());
                    cpo.setOrdDtlSeqArr(ordDtlSeqArr);
                    cpo.setAddOptClaimQtt(ogVO.getAddOptQtt());
                    cpo.setOrdDtlStatusCd(strOrdStatusCd); // 주문 취소시 적용
                    cpo.setRegrNo(longLoginNo);
                    cpo.setUpdrNo(longLoginNo);
                    if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
                      // 원본 주문 상세 번호 조회
                      List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(po);
                      for (OrderGoodsVO orgVO : orgOrdGoodsList) {
                        if (reVO.getOrdDtlSeq().equals(orgVO.getOrdDtlSeq())) {
                          cpo.setOrgOrdNo(orgVO.getOrgOrdNo());
                          cpo.setOrgOrdDtlSeq(orgVO.getOrgOrdDtlSeq());
                        }
                      }
                    } else {
                      cpo.setOrgOrdNo(strOrdNo);
                      cpo.setOrgOrdDtlSeq(reVO.getOrdDtlSeq());
                    }
                    // 주문 상태 변경 및 클레임 등록
                    refundService.updateClaimRefund(cpo);
                  }
                }
              }
              // 사은품 클레임 차수 업데이트
              OrderGoodsPO freebiePO = new OrderGoodsPO();
              freebiePO.setOrdNo(po.getOrdNo());
              freebiePO.setPrmtNo(prmtNo);
              freebiePO.setPrmtGrpNo(prmtGrpNo);
              freebiePO.setClaimTurn(claimTurn);
              updateFreebieClaim(freebiePO);
            }
          }
        }
        // 주문 사은품 상품 처리
        if (dataVO.getCancelOrdPrmtNo() != null && dataVO.getCancelOrdPrmtNo() > 0) {
          long prmtNo = dataVO.getCancelOrdPrmtNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("04".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
            for (OrderGoodsVO reVO : dataVO.getOrderGoodsVO()) {
              if (reVO.getOrdPrmtNo() == prmtNo
                  && ("Y".equals(reVO.getFreebieGoodsYn()) || "Y".equals(reVO.getPlusGoodsYn()))) {
                stockGoodsPO = new OrderGoodsPO();

                // 주문상태 정보
                OrderGoodsVO statusVO = new OrderGoodsVO();
                statusVO.setSiteNo(longSiteNo);
                statusVO.setOrdNo(strOrdNo);
                statusVO.setOrdDtlSeq(reVO.getOrdDtlSeq());

                OrderGoodsVO ogVO = selectOrdCancelDtlInfo(statusVO);
                statusVO.setOrdStatusCd(strOrdStatusCd); // 결제취소 or 환불완료

                stockGoodsPO.setSiteNo(longSiteNo);
                stockGoodsPO.setOrdNo(longOrdNo);
                stockGoodsPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                stockGoodsPO.setRegrNo(longLoginNo);
                stockGoodsPO.setRegDttm(today);

                // 재고 정보
                log.debug("ogVO.getItemNo() 단품번호 ::::: " + ogVO.getItemNo());
                log.debug("사은품 취소 수량 ::::: " + ogVO.getOrdQtt() * (-1));
                stockGoodsPO.setItemNo(ogVO.getItemNo());
                stockGoodsPO.setOrdQtt(ogVO.getOrdQtt() * (-1));
                stockGoodsPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                stockGoodsList.add(stockGoodsPO);

                log.debug("/** STEP. 3-1 환불, 취소정보 상태 상세 업데이트 ******************************/");
                cpo = new ClaimGoodsPO();
                cpo.setSiteNo(longSiteNo);
                cpo.setOrdNo(strOrdNo);
                cpo.setOrdDtlSeq(reVO.getOrdDtlSeq());
                cpo.setClaimNo(claimNo);
                cpo.setClaimTurn(claimTurn);
                cpo.setClaimReasonCd(po.getClaimReasonCd());
                cpo.setClaimDtlReason(po.getClaimDtlReason());
                cpo.setClaimMemo(po.getClaimMemo());
                cpo.setClaimQtt((int) ogVO.getOrdQtt());
                cpo.setOrdDtlSeqArr(ordDtlSeqArr);
                cpo.setAddOptClaimQtt(ogVO.getAddOptQtt());
                cpo.setOrdDtlStatusCd(strOrdStatusCd); // 주문 취소시 적용
                cpo.setRegrNo(longLoginNo);
                cpo.setUpdrNo(longLoginNo);
                if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
                  // 원본 주문 상세 번호 조회
                  List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(po);
                  for (OrderGoodsVO orgVO : orgOrdGoodsList) {
                    if (reVO.getOrdDtlSeq().equals(orgVO.getOrdDtlSeq())) {
                      cpo.setOrgOrdNo(orgVO.getOrgOrdNo());
                      cpo.setOrgOrdDtlSeq(orgVO.getOrgOrdDtlSeq());
                    }
                  }
                } else {
                  cpo.setOrgOrdNo(strOrdNo);
                  cpo.setOrgOrdDtlSeq(reVO.getOrdDtlSeq());
                }
                // 주문 상태 변경 및 클레임 등록
                refundService.updateClaimRefund(cpo);
              }
            }
            // 사은품 클레임 차수 업데이트
            OrderGoodsPO freebiePO = new OrderGoodsPO();
            freebiePO.setOrdNo(po.getOrdNo());
            freebiePO.setPrmtNo(prmtNo);
            freebiePO.setClaimTurn(claimTurn);
            updateFreebieClaim(freebiePO);
          }
        }

        log.debug("상품 재고 처리 시작 ");
        updateGoodsStock(stockGoodsList);
        log.debug("상품 재고 처리 완료 ");

        log.debug("/** 취소 제외된 리스트 처리 ( +) *******************************************************/");
        log.debug("/** 취소 제외한 주문 상품 조회 START 재계산 배송비, 적립금 */");

        log.debug("/** 쿠폰 사용 취소 처리 */");
        List<CouponPO> couponList = new ArrayList<>(); // 취소 처리 쿠폰 리스트
        List<OrderGoodsVO> cancelAddedAmountList = new ArrayList<>(); // 취소 처리 부가비용
        if (dataVO.getCancelGoodsPrmtInfo() != null && dataVO.getCancelGoodsPrmtInfo().size() > 0) { // 상품 쿠폰 취소
          OrderInfoVO orderInfoVO = new OrderInfoVO();
          orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
          List<OrderGoodsVO> amountList = selectAddedAmountAllList(orderInfoVO);
          for (OrderGoodsVO vo : dataVO.getCancelGoodsPrmtInfo()) {
            long prmtNo = vo.getGoodsPrmtNo();
            long prmtGrpNo = vo.getGoodsPrmtGrpNo();
            PromotionSO promotionSO = new PromotionSO();
            promotionSO.setPrmtNo(prmtNo);
            PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
            if ("05".equals(prmtVO.getPrmtKindCd())) {
              for (OrderGoodsVO amountVO : amountList) {
                if (amountVO.getPrmtNo() == prmtNo && amountVO.getPrmtGrpNo() == prmtGrpNo) {
                  int memberCpNo = amountVO.getMemberCpNo();
                  CouponPO couponPO = new CouponPO();
                  couponPO.setSiteNo(po.getSiteNo());
                  couponPO.setMemberCpNo(memberCpNo);
                  couponPO.setOrdNo(po.getOrdNo());
                  couponPO.setUseYn("N");
                  couponPO.setUseDttm(null);
                  couponPO.setUpdrNo(longLoginNo);
                  couponPO.setUpdDttm(today);
                  couponList.add(couponPO);
                }
              }
            }
            // 깨진 프로모션 부가비용 cancel_yn = Y로 업데이트
            for (OrderGoodsVO amountVO : amountList) {
              if (amountVO.getPrmtNo() == prmtNo) {
                cancelAddedAmountList.add(amountVO);
              }
            }
          }
        }
        if (dataVO.getCancelOrdPrmtNo() != null && dataVO.getCancelOrdPrmtNo() > 0) { // 주문 쿠폰 취소
          long prmtNo = dataVO.getCancelOrdPrmtNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          OrderInfoVO orderInfoVO = new OrderInfoVO();
          orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
          List<OrderGoodsVO> amountList = selectAddedAmountAllList(orderInfoVO);
          if ("06".equals(prmtVO.getPrmtKindCd())) {
            for (OrderGoodsVO amountVO : amountList) {
              if (amountVO.getPrmtNo() == prmtNo) {
                int memberCpNo = amountVO.getMemberCpNo();
                CouponPO couponPO = new CouponPO();
                couponPO.setSiteNo(po.getSiteNo());
                couponPO.setMemberCpNo(memberCpNo);
                couponPO.setOrdNo(po.getOrdNo());
                couponPO.setUseYn("N");
                couponPO.setUseDttm(null);
                if (!"11".equals(po.getClaimReasonCd()) && !"13".equals(po.getClaimReasonCd())
                    && !"22".equals(po.getClaimReasonCd()) && !"90".equals(po.getClaimReasonCd())) {
                  couponPO.setOrderCancelYn("Y");
                }
                couponPO.setUpdrNo(longLoginNo);
                couponPO.setUpdDttm(today);
                couponList.add(couponPO);
              }
            }
          }
          // 깨진 프로모션 부가비용 cancel_yn = Y로 업데이트
          for (OrderGoodsVO amountVO : amountList) {
            if (amountVO.getPrmtNo() == prmtNo) {
              cancelAddedAmountList.add(amountVO);
            }
          }
        }
        if (dataVO.getCancelDupltPrmtNo() != null && dataVO.getCancelDupltPrmtNo() > 0) { // 주문 중복 쿠폰 취소
          long prmtNo = dataVO.getCancelDupltPrmtNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          OrderInfoVO orderInfoVO = new OrderInfoVO();
          orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
          List<OrderGoodsVO> amountList = selectAddedAmountAllList(orderInfoVO);
          if ("06".equals(prmtVO.getPrmtKindCd())) {
            for (OrderGoodsVO amountVO : amountList) {
              if (amountVO.getPrmtNo() == prmtNo) {
                int memberCpNo = amountVO.getMemberCpNo();
                CouponPO couponPO = new CouponPO();
                couponPO.setSiteNo(po.getSiteNo());
                couponPO.setMemberCpNo(memberCpNo);
                couponPO.setOrdNo(po.getOrdNo());
                couponPO.setUseYn("N");
                couponPO.setUseDttm(null);
                if (!"11".equals(po.getClaimReasonCd()) && !"13".equals(po.getClaimReasonCd())
                    && !"22".equals(po.getClaimReasonCd()) && !"90".equals(po.getClaimReasonCd())) {
                  couponPO.setOrderCancelYn("Y");
                }
                couponPO.setUpdrNo(longLoginNo);
                couponPO.setUpdDttm(today);
                couponList.add(couponPO);
              }
            }
          }
          // 깨진 프로모션 부가비용 cancel_yn = Y로 업데이트
          for (OrderGoodsVO amountVO : amountList) {
            if (amountVO.getPrmtNo() == prmtNo) {
              cancelAddedAmountList.add(amountVO);
            }
          }
        }
        log.debug("====== dataVO.getCancelOrdPrmtNo() : {}", dataVO.getCancelOrdPrmtNo());
        log.debug("====== couponList : {}", couponList);
        log.debug("====== cancelAddedAmountList : {}", cancelAddedAmountList);
        if (couponList != null && couponList.size() > 0) {
          // 회원 쿠폰 사용 취소 정보 업데이트
          couponService.updateMemberUseCoupon(couponList);
        }
        if (cancelAddedAmountList != null && cancelAddedAmountList.size() > 0) {
          // 부가비용 취소 플래그 업데이트
          updateAddedAmountCancel(cancelAddedAmountList);
        }

        // 포인트 환불이 있을시
        if (payReserveAmt > 0) {
          log.debug("적립금 환불 ::::::::::: " + payReserveAmt);
          // 적립금 사용 정보 복원 ( 적립금 전체 취소 )
          SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
          savedmnPointPO.setSiteNo(longSiteNo);
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            savedmnPointPO.setOrdNo(reOrderInfoVO.getOrgOrdNo());
          } else {
            savedmnPointPO.setOrdNo(strOrdNo);
          }
          savedmnPointPO.setGbCd("20"); // 차감
          savedmnPointPO.setOrdCanselYn("Y"); // 취소
          savedmnPointPO.setMemberNo(longMemberNo); // 회원번호
          savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
          savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
          savedmnPointPO.setEtcReason(""); // 기타사유
          savedmnPointPO.setDeductGbCd("02"); // 차감구분코드(취소)
          savedmnPointPO.setClaimTurn(claimTurn); // 클레임 차수
          savedmnPointPO.setPrcAmt(payReserveAmt); // 적립금 ( 환불금액 )
          log.debug("/** STEP. 4-6 적립금 사용 정보 복원 ****************************/");
          log.debug("적립금 환불 금액 ::::::::::::::: " + payReserveAmt);
          savedMnPointService.insertSavedMn(savedmnPointPO);

          // 남은 적립금 확인
          Float mileageTotlaAmt = 0f;
          if (payReserveAmt < orgReserveAmt && (partCancelYn.equals("Y") || restAmt > 0)) {
            mileageTotlaAmt = orgReserveAmt - payReserveAmt;
          }
          log.debug("남은적립금 확인 :::::::::::: " + mileageTotlaAmt);
          if (mileageTotlaAmt > 0) {
            // 적립금 사용 정보 등록 ( 남은금액 처리 )
            savedmnPointPO.setSiteNo(longSiteNo);
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              savedmnPointPO.setOrdNo(reOrderInfoVO.getOrgOrdNo());
            } else {
              savedmnPointPO.setOrdNo(strOrdNo);
            }
            savedmnPointPO.setGbCd("20"); // 차감
            savedmnPointPO.setOrdCanselYn("N"); // 등록
            savedmnPointPO.setMemberNo(longMemberNo); // 회원번호
            savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
            savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
            savedmnPointPO.setEtcReason(""); // 기타사유
            savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
            savedmnPointPO.setClaimTurn(claimTurn); // 클레임 차수
            savedmnPointPO.setPrcAmt(mileageTotlaAmt);
            log.debug("/** STEP. 4-7 남은 적립금  등록 *******************************/");
            log.debug("남은 적립금 금액 ::::::::::::::: " + mileageTotlaAmt);
            savedMnPointService.insertSavedMn(savedmnPointPO);
          }
        }

        log.debug("/** 단건 데이터 처리 ******************************************************************/");
        log.debug("주문번호 : " + longOrdNo);
        log.debug("결제취소코드 : " + strOrdStatusCd);
        log.debug("취소하고 남은금액 : " + restAmt);
        log.debug("총환불금액 (취소금액) : " + refundAmt);

        log.debug("/** 주문 마스터 정보 업데이트 **********************/");
        OrderInfoPO infoPo = new OrderInfoPO();
        infoPo.setOrdNo(longOrdNo);
        infoPo.setRegrNo(longLoginNo);
        // 부분취소일때만 금액 업데이트
        infoPo.setPartCancelYn(partCancelYn); // 전체취소시에 쿼리에서 금액 업데이트 안되게처리
        if (partCancelYn.equals("Y")) {
          OrderSO orderSO = new OrderSO();
          orderSO.setSiteNo(po.getSiteNo());
          orderSO.setOrdNo(strOrdNo);
          orderSO.setOrdDtlSeqArr(po.getOrdDtlSeqArr());
          // 전체 취소 or 부분취소 마지막 취소일경우 취소 아닌 데이터 확인
          // ResultModel<OrderVO> ordVO = partCancelStatusOrderCount(orderSO);
          // int orderCnt = Integer.parseInt(ordVO.getData().getStatusOrderCount());
          // log.debug("orderCnt : " + orderCnt);
          if ("N".equals(pricePartCancelYn)) {
            infoPo.setOrdStatusCd(strOrdStatusCd);
          }
        } else {
          infoPo.setOrdStatusCd(strOrdStatusCd);
        }
        // 환불일때는 주문 마스터 상태 업데이트 안함
        if (strOrdStatusCd.equals(OrdStatusConstants.RETURN_DONE)) {
          infoPo.setOrdStatusCd("");
        }

        updateOrderInfo(infoPo);
        log.debug("주문 마스터 금액 수정 완료 ");

        // 적립금 단일 결제시
        if (onlyReserve) {
          log.debug("적립금 단일 결제시 ( 결제 상태 변경 )");
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
          } else {
            payResult.setOrdNo(longOrdNo);
          }
          payResult.setPaymentTurn(payVo.getPaymentTurn());
          payResult.setPaymentStatusCd("03"); // 취소

          payResult.setRefundAmt(payReserveAmt);
          payResult.setRefundType("01");
          payResult.setClaimNo(Long.toString(claimNo));
          payResult.setClaimCmpltDttm(todayString);
          updatePaymentStatus(payResult);

          // 부분 취소일때 남은 금액 결제 재등록
          if (partCancelYn.equals("Y") || restAmt > 0) {
            log.debug("부분 취소일때 남은 금액 결제 재등록");
            // 적립금 재등록
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
            } else {
              payResult.setOrdNo(longOrdNo);
            }
            payResult.setPaymentWayCd("01");
            payResult.setPaymentAmt(Double.toString(orgReserveAmt - payReserveAmt));
            payResult.setPaymentCmpltDttm(todayString);
            insertPartCancelOrderPay(payResult);
          }
        }

        result.setMessage(MessageUtil.getMessage("biz.ord.cancelConfirm"));

      } catch (Exception e) {
        throw new CustomException("biz.exception.common.error", new Object[] { "" }, e);
      }

      log.debug("/*** STEP. 4 PG 취소처리*****************************************************************/");
      try {
        if (!onlyReserve && !standBydeposit && pgAmt > 0) {// 무통장 주문이 아니고 외부결제수단(PG)을 사용했을 경우
          // 간편결제(PAYCO), PAYPAL
          if (CoreConstants.PG_CD_PAYCO.equals(payVo.getPaymentPgCd())
              || CoreConstants.PG_CD_PAYPAL.equals(payVo.getPaymentPgCd())) {
            // 결제PG주체코드 -(서버코드) 01.고객(Front일경우), 02.고객(Front-Mo일경우),03.벨아엔에스(BO일경우)
            payResult.setMainCd("02".equals(cancelType) ? "03" : "01"); // cancelType => 01:프론트,02:관리자
            // SITE번호
            payResult.setSiteNo(longSiteNo);
            // PG 코드
            payResult.setPaymentPgCd(payVo.getPaymentPgCd());
            // 결제 수단 코드
            payResult.setPaymentWayCd(payVo.getPaymentWayCd());
            // 거래번호 ****
            payResult.setTxNo(payVo.getTxNo());
            // 승인번호
            payResult.setConfirmNo(payVo.getConfirmNo());
            // 승인일시
            payResult.setConfirmDttm(payVo.getConfirmDttm());
            // 카드사코드
            payResult.setCardCd(payVo.getCardCd());
            // 은행코드
            payResult.setBankCd(payVo.getBankCd());
            // 통신사코드
            payResult.setTelecomCd(payVo.getTelecomCd());
            // 부분취소확인
            payResult.setPartCancelYn(partCancelYn);
            // 부분취소할금액
            payResult.setPartCancelAmt(Integer.toString(pgAmt.intValue()));
            // 부분취소후 남은금액
            payResult.setPartCancelRemainAmt(Integer.toString(restAmt.intValue()));
            payResult.setPaymentAmt(Integer.toString(payVo.getPaymentAmt().intValue()));
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
            } else {
              payResult.setOrdNo(payVo.getOrdNo());
            }
            payResult.setPaymentTurn(payVo.getPaymentTurn());
            payResult.setRegrNo(po.getRegrNo());
            payResult.setUpdrNo(po.getRegrNo());
            payResult = paymentService.pgPaymentCancel(payResult).getData();
            // 그외 PG ( 이니시스, KCP, 올더게이트 등 )
          } else {
            // 결제PG주체코드 -(서버코드) 01.고객(Front일경우), 02.고객(Front-Mo일경우),03.벨아엔에스(BO일경우)
            payResult.setMainCd("02".equals(cancelType) ? "03" : "01"); // cancelType=>01:프론트,02:관리자
            // SITE번호
            payResult.setSiteNo(longSiteNo);
            // PG 코드
            payResult.setPaymentPgCd(payVo.getPaymentPgCd());
            // 결제 수단 코드
            payResult.setPaymentWayCd(payVo.getPaymentWayCd());
            // 거래번호 ****
            payResult.setTxNo(payVo.getTxNo());
            // 승인번호
            payResult.setConfirmNo(payVo.getConfirmNo());
            // 승인일시
            payResult.setConfirmDttm(payVo.getConfirmDttm());
            // 카드사코드
            payResult.setCardCd(payVo.getCardCd());
            // 은행코드
            payResult.setBankCd(payVo.getBankCd());
            // 통신사코드
            payResult.setTelecomCd(payVo.getTelecomCd());
            // 부분취소확인
            payResult.setPartCancelYn(dataVO.getInicisPartCancelYn());
            // 부분취소할 금액
            payResult.setPartCancelAmt(Integer.toString(pgAmt.intValue()));
            // 부분취소후 남은금액
            payResult.setPartCancelRemainAmt(Integer.toString(orgPgAmt.intValue() - pgAmt.intValue()));
            // 에스크로 여부
            payResult.setEscrowYn(payVo.getEscrowYn());
            // 주문 마스터 상태
            payResult.setOrdStatusCd(curVo.getOrdStatusCd());
            payResult.setPaymentAmt(Integer.toString(payVo.getPaymentAmt().intValue()));
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
            } else {
              payResult.setOrdNo(payVo.getOrdNo());
            }
            payResult.setPaymentTurn(payVo.getPaymentTurn());
            payResult.setRegrNo(po.getRegrNo());
            payResult.setUpdrNo(po.getRegrNo());
            payResult = paymentService.pgPaymentCancel(payResult).getData();
          }
        }
        // 배송전 전체취소 또는 환불시 환불사유가 판매자 사유일경우
        if (("N".equals(dlvrYn) && "N".equals(pricePartCancelYn))
            || (!"N".equals(dlvrYn) && !("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
                || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd())))) {
          // 추가 배송비 결제 정보 조회
          OrderInfoVO orderInfoVO = new OrderInfoVO();
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            orderInfoVO.setOrdNo(reOrderInfoVO.getOrgOrdNo());
          } else {
            orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
          }
          orderInfoVO.setClaimTurn(claimTurn);
          orderInfoVO.setSiteNo(po.getSiteNo());
          if ("N".equals(dlvrYn)) {
            orderInfoVO.setPaymentReasonCd("01"); // 취소 추가 배송비
          } else {
            orderInfoVO.setPaymentReasonCd("03"); // 환불 추가 배송비
          }
          OrderPayVO addPayVO = selectOrderDlvrPayInfo(orderInfoVO);
          if (addPayVO != null) {
            log.debug("==============   추가 배송비 취소 로직   ==============");
            PaymentModel<?> dlvrPayResult = new PaymentModel();
            if ("01".equals(addPayVO.getPaymentWayCd())) {
              // 적립금 취소
              SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
              savedmnPointPO.setSiteNo(longSiteNo);
              savedmnPointPO.setOrdNo(addPayVO.getDlvrOrdNo());
              savedmnPointPO.setGbCd("20"); // 차감
              savedmnPointPO.setOrdCanselYn("Y"); // 취소
              savedmnPointPO.setMemberNo(addPayVO.getMemberNo()); // 회원번호
              savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
              savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
              savedmnPointPO.setEtcReason(addPayVO.getPaymentReasonNm()); // 기타사유
              savedmnPointPO.setDeductGbCd("02"); // 차감구분코드(취소)
              savedmnPointPO.setClaimTurn(claimTurn); // 클레임 차수
              savedmnPointPO.setPrcAmt(addPayVO.getPaymentAmt()); // 적립금 ( 환불금액 )
              log.debug("/** 추가 배송비 포인트 사용 정보 복원 ****************************/");
              log.debug("추가 배송비 포인트 환불 금액 ::::::::::::::: " + addPayVO.getPaymentAmt());
              savedMnPointService.insertSavedMn(savedmnPointPO);
            } else {
              // pg 취소
              // 결제PG주체코드 -(서버코드) 01.고객(Front일경우), 02.고객(Front-Mo일경우),03.벨아엔에스(BO일경우)
              dlvrPayResult.setMainCd("02".equals(cancelType) ? "03" : "01"); // cancelType=>01:프론트,02:관리자
              // SITE번호
              dlvrPayResult.setSiteNo(longSiteNo);
              // PG 코드
              dlvrPayResult.setPaymentPgCd(addPayVO.getPaymentPgCd());
              // 결제 수단 코드
              dlvrPayResult.setPaymentWayCd(addPayVO.getPaymentWayCd());
              // 거래번호 ****
              dlvrPayResult.setTxNo(addPayVO.getTxNo());
              // 승인번호
              dlvrPayResult.setConfirmNo(addPayVO.getConfirmNo());
              // 승인일시
              dlvrPayResult.setConfirmDttm(addPayVO.getConfirmDttm());
              // 카드사코드
              dlvrPayResult.setCardCd(addPayVO.getCardCd());
              // 은행코드
              dlvrPayResult.setBankCd(addPayVO.getBankCd());
              // 통신사코드
              dlvrPayResult.setTelecomCd(addPayVO.getTelecomCd());
              // 부분취소확인
              dlvrPayResult.setPartCancelYn("N");
              dlvrPayResult.setPaymentAmt(Float.toString(addPayVO.getPaymentAmt()));
              dlvrPayResult.setDlvrOrdNo(addPayVO.getDlvrOrdNo());
              dlvrPayResult = paymentService.pgPaymentCancel(dlvrPayResult).getData();
            }
            // 추가 배송비 결제 상태 업데이트
            dlvrPayResult.setPaymentStatusCd("03");
            dlvrPayResult.setClaimTurn(Integer.toString(addPayVO.getClaimTurn()));
            dlvrPayResult.setDlvrOrdNo(addPayVO.getDlvrOrdNo());
            if (dlvrPayResult.getClaimCmpltDttm() == null) {
              dlvrPayResult.setClaimCmpltDttm(todayString);
            }
            dlvrPayResult.setUpdrNo(longLoginNo);
            updateDlvrPaymentStatus(dlvrPayResult);

          }
        }

        // 기존에 출고배송비를 결제한 적이 있고 전체취소이면서 판매자 사유일 경우
        // 출고배송비만 부분취소를 해준다.(2500원)
        // 1.환불이고 전체취소이면서 판매자 사유인 경우
        // 2.취소이고 전체취소인 경우
        String cancelFlag = "N";
        String refundFlag = "N";
        if ("21".equals(strOrdStatusCd)) { // 취소
          if ("N".equals(partCancelYn)) {
            cancelFlag = "Y";
          }
        } else { // 환불
          if ("N".equals(partCancelYn)) {
            if (!("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
                || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd()))) {
              refundFlag = "Y";
            }
          }
        }
        OrderInfoVO orderInfoVO = new OrderInfoVO();
        orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderInfoVO.setSiteNo(po.getSiteNo());
        List<OrderPayVO> addPayList = selectOrderDlvrPayInfoList(orderInfoVO);
        if (addPayList != null && addPayList.size() > 0) {
          for (OrderPayVO payVO : addPayList) {
            if ("03".equals(payVO.getPaymentReasonCd())) { // 환불 추가배송비일 경우만
              if ("02".equals(payVO.getPaymentStatusCd()) && payVO.getDlvrAmt() > 2500f) {
                if ("Y".equals(cancelFlag) || "Y".equals(refundFlag)) {
                  log.debug("==============   추가 배송비 부분 취소 로직   ==============");
                  PaymentModel<?> dlvrPayResult = new PaymentModel();
                  if ("01".equals(payVO.getPaymentWayCd())) {
                    // 적립금 취소
                    SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
                    savedmnPointPO.setSiteNo(longSiteNo);
                    savedmnPointPO.setOrdNo(payVO.getDlvrOrdNo());
                    savedmnPointPO.setGbCd("20"); // 차감
                    savedmnPointPO.setOrdCanselYn("Y"); // 취소
                    savedmnPointPO.setMemberNo(payVO.getMemberNo()); // 회원번호
                    savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
                    savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
                    savedmnPointPO.setEtcReason(payVO.getPaymentReasonNm()); // 기타사유
                    savedmnPointPO.setDeductGbCd("02"); // 차감구분코드(취소)
                    savedmnPointPO.setClaimTurn(claimTurn); // 클레임 차수
                    savedmnPointPO.setPrcAmt(payVO.getPaymentAmt()); // 적립금 ( 환불금액 )
                    log.debug("/** 추가 배송비 포인트 사용 정보 복원 ****************************/");
                    log.debug("추가 배송비 포인트 환불 금액 ::::::::::::::: " + payVO.getPaymentAmt());
                    savedMnPointService.insertSavedMn(savedmnPointPO);

                    // 남은 적립금 등록
                    savedmnPointPO.setOrdNo(payVO.getDlvrOrdNo());
                    savedmnPointPO.setGbCd("20"); // 차감
                    savedmnPointPO.setOrdCanselYn("N"); // 등록
                    savedmnPointPO.setMemberNo(longMemberNo); // 회원번호
                    savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
                    savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
                    savedmnPointPO.setEtcReason(""); // 기타사유
                    savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
                    savedmnPointPO.setClaimTurn(claimTurn); // 클레임 차수
                    savedmnPointPO.setPrcAmt(payVO.getPaymentAmt() - (payVO.getDlvrAmt() / 2));
                    savedMnPointService.insertSavedMn(savedmnPointPO);

                    // 추가 배송비 결제 상태 업데이트
                    dlvrPayResult.setPaymentStatusCd("03");
                    dlvrPayResult.setClaimTurn(Integer.toString(payVO.getClaimTurn()));
                    dlvrPayResult.setDlvrOrdNo(payVO.getDlvrOrdNo());
                    if (dlvrPayResult.getClaimCmpltDttm() == null) {
                      dlvrPayResult.setClaimCmpltDttm(todayString);
                    }
                    dlvrPayResult.setUpdrNo(longLoginNo);
                    updateDlvrPaymentStatus(dlvrPayResult);

                    dlvrPayResult.setPaymentWayCd("01");
                    dlvrPayResult.setPaymentAmt(Float.toString(payVO.getPaymentAmt() - (payVO.getDlvrAmt() / 2)));
                    dlvrPayResult.setPaymentCmpltDttm(todayString);
                    insertPartCancelDlvrPay(dlvrPayResult);

                  } else {
                    // pg 취소
                    // 결제PG주체코드 -(서버코드) 01.고객(Front일경우), 02.고객(Front-Mo일경우),03.벨아엔에스(BO일경우)
                    dlvrPayResult.setMainCd("02".equals(cancelType) ? "03" : "01"); // cancelType=>01:프론트,02:관리자
                    // SITE번호
                    dlvrPayResult.setSiteNo(longSiteNo);
                    // PG 코드
                    dlvrPayResult.setPaymentPgCd(payVO.getPaymentPgCd());
                    // 결제 수단 코드
                    dlvrPayResult.setPaymentWayCd(payVO.getPaymentWayCd());
                    // 거래번호 ****
                    dlvrPayResult.setTxNo(payVO.getTxNo());
                    // 승인번호
                    dlvrPayResult.setConfirmNo(payVO.getConfirmNo());
                    // 승인일시
                    dlvrPayResult.setConfirmDttm(payVO.getConfirmDttm());
                    // 카드사코드
                    dlvrPayResult.setCardCd(payVO.getCardCd());
                    // 은행코드
                    dlvrPayResult.setBankCd(payVO.getBankCd());
                    // 통신사코드
                    dlvrPayResult.setTelecomCd(payVO.getTelecomCd());
                    // 부분취소확인
                    dlvrPayResult.setPartCancelYn("Y");
                    // 부분취소할금액
                    dlvrPayResult.setPartCancelAmt(Float.toString(payVO.getDlvrAmt() / 2));
                    // 부분취소후 남은금액
                    dlvrPayResult
                        .setPartCancelRemainAmt(Float.toString(payVO.getPaymentAmt() - (payVO.getDlvrAmt() / 2)));
                    dlvrPayResult.setPaymentAmt(Float.toString(payVO.getPaymentAmt()));
                    dlvrPayResult.setDlvrOrdNo(payVO.getDlvrOrdNo());
                    dlvrPayResult = paymentService.pgPaymentCancel(dlvrPayResult).getData();

                    // 추가 배송비 결제 상태 업데이트
                    dlvrPayResult.setPaymentStatusCd("03");
                    dlvrPayResult.setClaimTurn(Integer.toString(payVO.getClaimTurn()));
                    dlvrPayResult.setDlvrOrdNo(payVO.getDlvrOrdNo());
                    if (dlvrPayResult.getClaimCmpltDttm() == null) {
                      dlvrPayResult.setClaimCmpltDttm(todayString);
                    }
                    dlvrPayResult.setUpdrNo(longLoginNo);
                    updateDlvrPaymentStatus(dlvrPayResult);

                    dlvrPayResult.setPaymentWayCd(payVO.getPaymentWayCd());
                    dlvrPayResult.setPaymentAmt(Float.toString(payVO.getPaymentAmt() - (payVO.getDlvrAmt() / 2)));
                    dlvrPayResult.setPaymentCmpltDttm(todayString);
                    insertPartCancelDlvrPay(dlvrPayResult);
                  }
                }
              }
            }
          }
        }
      } catch (Exception e) {
        throw new Exception("PG 통신 오류", e);
      }
      // PG 성공 확인
      log.debug("/** STEP. 5-2 결제 정보 처리 PG 취소시 처리 */");
      if (!onlyReserve && !standBydeposit
          && (("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        result.setSuccess(true);
        // 결제정보 업데이트
        payResult.setConfirmResultCd("00");
        payResult.setPaymentStatusCd("03"); // 취소
        payResult.setClaimNo(Long.toString(claimNo));

        // 적립금 외 결제
        String paymentWayCd = payResult.getPaymentWayCd();
        payResult.setRefundAmt(pgAmt);
        payResult.setRefundType("02");
        updatePaymentStatus(payResult);

        // 적립금있을시
        payResult.setPaymentWayCd("01");
        payResult.setRefundAmt(payReserveAmt);
        payResult.setRefundType("01");
        updatePaymentStatus(payResult);

        payResult.setPaymentWayCd(paymentWayCd);

        // 부분 취소일때 남은 금액 결제 재등록
        if (restAmt > 0) {
          payResult.setPaymentCmpltDttm(payResult.getClaimCmpltDttm());
          // PG 등록
          if (Float.compare(orgPgAmt - pgAmt, 0) > 0) {
            log.debug("pg 결제시 부분취소일경우 남은 금액 결제테이블 등록 ");
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
            } else {
              payResult.setOrdNo(longOrdNo);
            }
            payResult.setPaymentWayCd(payVo.getPaymentWayCd());
            payResult.setPaymentAmt(Float.toString(orgPgAmt - pgAmt));
            insertPartCancelOrderPay(payResult);
          }

          // 적립금 등록
          if (Float.compare(orgReserveAmt - payReserveAmt, 0) > 0) {
            log.debug("적립금 결제시 부분취소일경우 남은 금액 결제테이블 등록 ");
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              payResult.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
            } else {
              payResult.setOrdNo(longOrdNo);
            }
            payResult.setPaymentWayCd("01");
            payResult.setPaymentAmt(Float.toString(orgReserveAmt - payReserveAmt));
            insertPartCancelOrderPay(payResult);
          }

        }

      } else if (!onlyReserve && !standBydeposit
          && !(("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        throw new Exception("취소 PG 처리중 오류");
      }

      /** STEP.5 현금영수증 취소 (부분취소일때 전체취소 하고 나머지금액 현금영수증 등록 ) - s_001_18 */
      // 전체취소만 처리 부분취소 데이터매핑 문제로 우선 보류
      log.debug("=== 현금영수증 취소 ===");
      SalesProofVO cashVO = new SalesProofVO();
      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        cashVO.setOrdNo(reOrderInfoVO.getOrgOrdNo());
      } else {
        cashVO.setOrdNo(strOrdNo);
      }
      cashVO.setSiteNo(po.getSiteNo());
      cashVO.setProofType("02"); // 현금영수증
      ResultModel<SalesProofVO> salesProofVO = salesProofService.selectSalesProofOrdNo(cashVO);

      // 무통장 주문 현금영수증 (취소'발행취소' or 재발행 처리'발행취소후 재주문금액 재발행')
      if (!onlyReserve && CoreConstants.PAYMENT_WAY_CD_NOPB.equals(payVo.getPaymentWayCd())) {
        if (partCancelYn.equals("Y")) { // 부분취소일경우
          // 01. 전체취소
          cashVO.setLinkTxNo(salesProofVO.getData().getLinkTxNo());
          cashbillDelegateService.cancel(cashVO);
          // 02. 현금영수증 테이블에 신청정보 기재
          SalesProofVO spv = new SalesProofVO();
          if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
            spv.setOrdNo(reOrderInfoVO.getOrgOrdNo());
          } else {
            spv.setOrdNo(strOrdNo);
          }
          ResultModel<SalesProofVO> ciMoney = salesProofService.calculationIssueMoney(spv);
          SalesProofPO salesProofPO = new SalesProofPO();
          salesProofPO.setTotAmt(ciMoney.getData().getTotAmt());// 총발급금액
          salesProofPO.setVatAmt(ciMoney.getData().getVatAmt());// 부가세액
          salesProofPO.setSupplyAmt(ciMoney.getData().getSupplyAmt());// 공급가액
          salesProofPO.setFreeAmt(ciMoney.getData().getFreeAmt());// 면세액
          salesProofPO.setGoodsNm(ciMoney.getData().getGoodsNm());
          salesProofPO.setProofNo(salesProofVO.getData().getProofNo());// 이전 현금영수증 발행번호
          salesProofPO.setCashRctStatusCd("01"); // 현금영수증 상태코드(01:접수,02:승인,03:보류,04:취소)
          salesProofPO.setApplicantGbCd("01"); // 신청자코드(01:구매자, 02:관리자)
          salesProofPO.setReqMode("pay"); // PG현금영수증 송신코드 (pay:발급,mod:취소or수정)
          if (salesProofPO.getTotAmt() > 0) { // 발급금액이 0원 이상일때 발급한다.
            proxyDao.insert(MapperConstants.ORDER_SALES_PROOF + "insertReCashRct", salesProofPO); // 재발급
            // 03. 허브링크에 현금영수증 발행 신청정보 송신 after 현금영수증테이블 정보 갱신(발급정보)
            CashbillPO cashbillPO = new CashbillPO();
            cashbillPO.setProofNo(salesProofPO.getProofNo());
            cashbillPO.setTradeType("승인거래");
            if ("01".equals(salesProofPO.getUseGbCd())) {
              cashbillPO.setTradeUsage("소득공제용");
            } else {
              cashbillPO.setTradeUsage("지출증빙용");
            }
            cashbillPO.setApplicantGbCd(salesProofPO.getApplicantGbCd()); // 신청 구분 코드, 01 : 주문자, 02 : 관리자
            cashbillPO.setIssueWayCd(salesProofVO.getData().getIssueWayCd()); // 발급 수단 1:주민번호,
                                                                              // 2:휴대폰,3:사업자등록번호
            cashbillPO.setIdentityNum(salesProofVO.getData().getIssueWayNo());// 발급인증번호
            cashbillPO.setTotalAmount(Double.toString(salesProofPO.getTotAmt()));// 총발급액
            cashbillPO.setSupplyCost(Double.toString(salesProofPO.getSupplyAmt()));// 공급가액
            cashbillPO.setTax(Double.toString(salesProofPO.getVatAmt()));// 부가세액
            cashbillPO.setFreeAmt(Double.toString(salesProofPO.getFreeAmt()));// 면세액
            cashbillPO.setServiceFee("0");// 봉사료
            cashbillPO.setCustomerName(salesProofVO.getData().getApplicantNm());// 고객명
            cashbillPO.setItemName(salesProofPO.getGoodsNm());// 상품명
            cashbillPO.setEmail(salesProofVO.getData().getEmail());// 이메일
            if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
              cashbillPO.setOrderNo(reOrderInfoVO.getOrgOrdNo());// 주문번호
            } else {
              cashbillPO.setOrderNo(strOrdNo);// 주문번호
            }
            cashbillPO.setSiteNo(po.getSiteNo());
            cashbillDelegateService.registIssue(cashbillPO);
          }
        } else {// 전체취소일경우 현금영수증 재발행안하고 발급취소처리만 함.
          if (salesProofVO.getData().getLinkTxNo() != null && !"".equals(salesProofVO.getData().getLinkTxNo())) {
            cashVO.setLinkTxNo(salesProofVO.getData().getLinkTxNo());
            cashbillDelegateService.cancel(cashVO);
          } else {
            log.debug("※ check 현금영수증 발급 연계번호가 없습니다.[LINK_TX_NO : " + salesProofVO.getData().getLinkTxNo() + "]");
          }
        }
      }

      // PG결제 현금영수증 취소 or 재발행 처리
      if ((!onlyReserve && !standBydeposit && ("N").equals(salesProofVO.getData().getOrdNo()))) {
        SalesProofPO cashPO = new SalesProofPO();
        // PG정보 조회
        CommPaymentConfigSO so = new CommPaymentConfigSO();
        so.setSiteNo(po.getSiteNo());
        so.setPartnerNo(po.getPartnerNo());
        so.setPgCd(payVo.getPaymentPgCd());
        CommPaymentConfigVO vo = paymentManageService.selectCommPaymentConfig(so).getData();

        // PG현금영수증 취소 처리
        PaymentModel<?> paymentModel = new PaymentModel<>();
        paymentModel.setSiteNo(po.getSiteNo());
        paymentModel.setPartnerNo(po.getPartnerNo());
        paymentModel.setReqMode("mod"); // pay:발급, mod:취소
        paymentModel.setModType("STSC"); // 변경타입(STSC:취소,STPC:부분취소,STSQ:조회)
        paymentModel.setLinkTxNo(salesProofVO.getData().getLinkTxNo()); // 거래번호
        paymentModel.setPaymentPgCd(salesProofVO.getData().getPaymentPgCd());
        if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
          paymentModel.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
        } else {
          paymentModel.setOrdNo(longOrdNo);
        }
        paymentModel.setUseGbCd(salesProofVO.getData().getUseGbCd()); // 발행구분
        paymentModel.setPgId(vo.getPgId());
        paymentModel.setKeyPasswd(vo.getKeyPasswd());

        paymentModel = paymentAdapterService.receipt(paymentModel).getData();
        if ("00".equals(paymentModel.getConfirmResultCd()) || "0000".equals(paymentModel.getConfirmResultCd())) {
          cashPO.setCashRctStatusCd("04"); // 상태코드(01:접수, 02:승인,03:오류, 04:취소)
        } else {// PG 취소처리 후 현금영수증 PG 연동이라 트랜잭션 불가
          cashPO.setCashRctStatusCd("03"); // 상태코드(01:접수, 02:승인, 03:오류, 04:취소)
        }
        cashPO.setProofNo(salesProofVO.getData().getProofNo());
        salesProofService.updateCashRct(cashPO);

        // 신규등록 우선 주석
        if (partCancelYn.equals("Y") && cashPO.getCashRctStatusCd().equals("04")) {
          /******************************************************************************
           * PG결제의 경우 부분취소시 현금영수증 자동 재발급 안함 cashPO.setOrdNo(longOrdNo);
           * cashPO.setCashRctStatusCd("02"); // 상태코드(01:접수,02:승인,03:오류,04:취소)
           * cashPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
           * cashPO.setMemberNo(po.getRegrNo());
           * cashPO.setUseGbCd(payResult.getUseGbCd()); // 사용구분코드(01:소득공제,02:지출증빙)
           * cashPO.setIssueWayCd(payResult.getIssueWayCd()); //
           * 발급수단코드(01:주민등록번호,02:휴대폰,03:사업자등록번호)
           * cashPO.setIssueWayNo(payResult.getIssueWayNo()); // 발급수단번호
           * cashPO.setTotAmt(restAmt); // 총금액 ( 남은 금액 )
           * cashPO.setAcceptDttm(po.getRegDttm()); // 접수일시
           * cashPO.setLinkTxNo(payResult.getLinkTxNo());
           * cashPO.setApplicantNm(po.getOrderInfoPO().getOrdrNm()); // 신청자명
           * cashPO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
           * // 등록자 cashPO.setRegDttm(po.getRegDttm()); // 등록일자 ( now() )
           * salesProofService.insertCashRctIssue(cashPO);
           *******************************************************************************/
        }
      }

      // 매출 정산 테이블 처리(TO_SALES_ACCOUNT)
      Long tmpOrdNo = 0L;
      String[] tempOrdDtlSeqArr = null;
      String[] tempClaimQttArr = null;
      String[] tempAddOptClaimQttArr = null;
      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        // 원본 주문 상세 번호 조회
        List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(po);
        tmpOrdNo = po.getOrdNo();
        tempOrdDtlSeqArr = po.getOrdDtlSeqArr();
        tempClaimQttArr = po.getClaimQttArr();
        tempAddOptClaimQttArr = po.getAddOptClaimQttArr();
        List<String> newOrdDtlSeqList = new ArrayList<>();
        List<String> newClaimQttList = new ArrayList<>();
        List<String> newAddOptClaimQttList = new ArrayList<>();
        String orgOrdDtlSeq = "";
        String orgClaimQtt = "";
        String orgAddOptClaimQtt = "";
        for (int i = 0; i < tempOrdDtlSeqArr.length; i++) {
          for (OrderGoodsVO oVO : orgOrdGoodsList) {
            if (tempOrdDtlSeqArr[i].equals(oVO.getOrdDtlSeq())) {
              orgOrdDtlSeq = oVO.getOrgOrdDtlSeq();
              orgClaimQtt = tempClaimQttArr[i];
              orgAddOptClaimQtt = tempAddOptClaimQttArr[i];

              boolean applyYn = false;
              if (newOrdDtlSeqList != null && newOrdDtlSeqList.size() > 0) {
                for (int j = 0; j < newOrdDtlSeqList.size(); j++) {
                  if (orgOrdDtlSeq.equals(newOrdDtlSeqList.get(j))) {
                    newClaimQttList.set(j,
                        Integer.toString(Integer.parseInt(newClaimQttList.get(j)) + Integer.parseInt(orgClaimQtt)));
                    newAddOptClaimQttList.set(j, Integer.toString(
                        Integer.parseInt(newAddOptClaimQttList.get(j)) + Integer.parseInt(orgAddOptClaimQtt)));
                    applyYn = true;
                  }
                }
                if (!applyYn) {
                  newOrdDtlSeqList.add(orgOrdDtlSeq);
                  newClaimQttList.add(orgClaimQtt);
                  newAddOptClaimQttList.add(orgAddOptClaimQtt);
                }
              } else {
                newOrdDtlSeqList.add(orgOrdDtlSeq);
                newClaimQttList.add(orgClaimQtt);
                newAddOptClaimQttList.add(orgAddOptClaimQtt);
              }
            }
          }
        }

        String[] newOrdDtlSeqArr = new String[newOrdDtlSeqList.size()];
        String[] newClaimQttArr = new String[newClaimQttList.size()];
        String[] newAddOptClaimQttArr = new String[newAddOptClaimQttList.size()];
        newOrdDtlSeqList.toArray(newOrdDtlSeqArr);
        newClaimQttList.toArray(newClaimQttArr);
        newAddOptClaimQttList.toArray(newAddOptClaimQttArr);

        // 기존 주문으로 정산 데이터 처리
        po.setOrdNo(Long.parseLong(reOrderInfoVO.getOrgOrdNo()));
        po.setOrdDtlSeqArr(newOrdDtlSeqArr);
        po.setClaimQttArr(newClaimQttArr);
        po.setAddOptClaimQttArr(newAddOptClaimQttArr);
      }

      OrderPO op = new OrderPO();
      op.setSiteNo(po.getSiteNo());
      op.setOrdNo(po.getOrdNo());
      // 40:취소, 90:환불
      if ("21".equals(strOrdStatusCd)) {
        op.setClaimGbCd("40"); // 취소
        op.setCancelAddDlvrAmt(cancelAddDlvrAmt);
      } else {
        op.setClaimGbCd("90"); // 환불
        op.setCancelAddDlvrAmt(0f);
      }
      op.setOrdDtlSeqArr(po.getOrdDtlSeqArr());
      op.setClaimTurn(claimTurn);
      op.setClaimQttArr(po.getClaimQttArr());
      op.setAddOptClaimQttArr(po.getAddOptClaimQttArr());
      op.setCancelGoodsPrmtInfo(dataVO.getCancelGoodsPrmtInfo()); // 상품 프로모션 취소 정보
      op.setCancelOrdPrmtNo(dataVO.getCancelOrdPrmtNo()); // 상품 프로모션 취소 정보
      op.setClaimReasonCd(po.getClaimReasonCd());
      op.setNewOrdNo(tmpOrdNo);
      op.setRegDt(payResult.getClaimCmpltDttm());
      op.setRefundDlvrAmt(refundDlvrAmt);
      op.setRlsDlvrAmt(rlsDlvrAmt);
      op.setRefundAreaAddDlvrc(refundAreaAddDlvrc);
      op.setDlvrPartCancelAmt(dataVO.getDlvrPartCancelAmt());
      op.setDlvrPartCancelYn(dataVO.getDlvrPartCancelYn());
      log.debug("========= po.getOrdDtlSeqArr() : {}", po.getOrdDtlSeqArr());
      log.debug("========= po.getClaimQttArr() : {}", po.getClaimQttArr());
      log.debug("========= payResult.getClaimCmpltDttm() : {}", payResult.getClaimCmpltDttm());
      orderSalesAccountProcess(op);

      if (reOrderInfoVO.getOrgOrdNo() != null && !"".equals(reOrderInfoVO.getOrgOrdNo())) {
        // 원본 주문정보로 정산데이터 처리 후 주문번호,클레임상세번호, 클레임 수량 재셋팅
        po.setOrdNo(tmpOrdNo);
        po.setOrdDtlSeqArr(tempOrdDtlSeqArr);
        po.setClaimQttArr(tempClaimQttArr);
        po.setAddOptClaimQttArr(tempAddOptClaimQttArr);
      }

      OrderPayPO resultPayPO = new OrderPayPO();
      resultPayPO.setOrdNo(po.getOrdNo());
      resultPayPO.setClaimTurn(claimTurn);
      result.setData(resultPayPO);

    } catch (Exception e) {
      log.debug("취소 DB처리중 오류", e);
      throw new Exception("취소 DB처리중 오류", e);
    }

    result.setSuccess(true);
    return result;
  }

  /**
   * 주문 번호 생성
   */
  @Override
  public long createOrdNo(long siteNo) throws Exception {
    long ordNo = 0;
    ordNo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "createOrdNo", siteNo);
    return ordNo;
  }

  /**
   * 배송 주문 번호 생성
   */
  @Override
  public String createDlvrOrdNo(long siteNo) throws Exception {
    String dlvrOrdNo = "";
    dlvrOrdNo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "createDlvrOrdNo", siteNo);
    return dlvrOrdNo;
  }

  /**
   * 페이팔 hash 데이터 생성
   */
  public ResultModel<PaypalPO> getPaypalHashData(PaypalPO po) {
    ResultModel<PaypalPO> returnPo = new ResultModel<PaypalPO>();
    po.setHashdata(encryptSHA512(po.getTimestamp() + po.getMid() + po.getReqtype() + po.getWebordernumber()
        + po.getCurrency() + po.getPrice() + po.getMerchantKey()));

    returnPo.setData(po);
    return returnPo;
  }

  /**
   * 페이팔 SHA-256 생성함수1
   */
  private String encryptSHA512(String input) {
    String output = "";

    StringBuffer sb = new StringBuffer();
    MessageDigest md = null;

    try {
      md = MessageDigest.getInstance("SHA-512");
      md.update(input.getBytes());
    } catch (Exception e) {
      log.debug("{}", e.getMessage());
    }

    return byteArrayToHex(md.digest());
  }

  /**
   * 페이팔 SHA-256 생성함수2
   */
  private String byteArrayToHex(byte[] ba) {
    if (ba == null || ba.length == 0) {
      return null;
    }

    StringBuffer sb = new StringBuffer(ba.length * 2);
    String hexNumber;
    for (int x = 0; x < ba.length; x++) {
      hexNumber = "0" + Integer.toHexString(0xff & ba[x]);
      sb.append(hexNumber.substring(hexNumber.length() - 2));
    }
    return sb.toString();
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 8. 31.
   * 작성자 : proliebe
   * 설명   : 부분취소 적립 예정금 재계산
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 8. 31. proliebe - 최초생성
   * </pre>
   *
   * @param orderGoodsList
   * @return Long
   */
  public Float calcSvmnAmt(Long siteNo, Integer partnerNo, List<OrderGoodsPO> orderGoodsList) throws Exception {
    Float svmnAmt = 0f;
    // 사이트 기본정보 조회
    SiteSO siteSO = new SiteSO();
    siteSO.setSiteNo(siteNo);
    SiteVO siteVO = cacheService.selectBasicInfo(siteNo, partnerNo);

    if (orderGoodsList == null || orderGoodsList.size() == 0) {
      throw new Exception("데이터가 없습니다.");
    }

    // 비회원구매가 아닐 경우 회원정보 조회
    ResultModel<MemberManageVO> member_info = new ResultModel<>();
    if (orderGoodsList.get(0).getMemberNo() > 0) {
      long memberNo = orderGoodsList.get(0).getMemberNo();
      MemberManageSO so = new MemberManageSO();
      so.setMemberNo(memberNo);
      so.setSiteNo(siteNo);
      member_info = frontMemberService.selectMember(so);
    }

    long svmnTruncStndrd = 0; // 절사단위
    if (siteVO.getSvmnTruncStndrdCd() == null) {
      svmnTruncStndrd = 1;
    } else if ("0".equals(siteVO.getSvmnTruncStndrdCd())) {
      svmnTruncStndrd = 1;
    } else if ("1".equals(siteVO.getSvmnTruncStndrdCd())) {
      svmnTruncStndrd = 10;
    } else if ("2".equals(siteVO.getSvmnTruncStndrdCd())) {
      svmnTruncStndrd = 100;
    }
    for (OrderGoodsPO po : orderGoodsList) {
      // 01.상품별
      if ("Y".equals(po.getGoodsSvmnPolicyUseYn())) { // 기본정책 사용
        log.debug("siteVO.getSvmnPvdYn() :::::::::::::::::::::::: " + siteVO.getSvmnPvdYn());
        log.debug("svmnTruncStndrd :::::::::::::::::::::::: " + svmnTruncStndrd);
        log.debug("getSaleAmt :::::::::::::::::::::::: " + po.getSaleAmt());
        log.debug("getOrdQtt :::::::::::::::::::::::: " + po.getOrdQtt());
        log.debug("getDcAmt :::::::::::::::::::::::: " + po.getDcAmt());
        int dcRate = (int) (100 - ((po.getSaleAmt() - po.getDcAmt()) / po.getSaleAmt() * 100));

        if ("Y".equals(siteVO.getSvmnPvdYn()) && "Y".equals(siteVO.getGoodsPointPvdYn())) { // 적립금 사용여부
          log.debug("AAAA :::::::::::::::::::::::: ");
          svmnAmt += (((po.getSaleAmt() * po.getOrdQtt()) - po.getDcAmt()) * (siteVO.getSvmnPvdRate() / 100)
              / svmnTruncStndrd) * svmnTruncStndrd;
          log.debug("BBBB :::::::::::::::::::::::: ");
        }
      } else if ("N".equals(po.getGoodsSvmnPolicyUseYn())) { // 상품별 정책
                                                             // 사용(원 단위)
        svmnAmt += po.getGoodsSvmnAmt();
      }
      // 02.회원등급
      if (orderGoodsList.get(0).getMemberNo() > 0) {
        log.debug("CCCC :::::::::::::::::::::::: ");
        svmnAmt += (((po.getSaleAmt() * po.getOrdQtt()) - po.getDcAmt()) * (member_info.getData().getSvmnValue() / 100)
            / svmnTruncStndrd) * svmnTruncStndrd;
      }
    }
    return svmnAmt;
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 9. 1.
   * 작성자 : proliebe
   * 설명   : 상품평 작성을 위한 상품 구매 여부 확인
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 9. 1. proliebe - 최초생성
   * </pre>
   *
   * @param so
   * @return int
   */
  public OrderGoodsVO selectOrdGoodsReview(OrderSO so) throws Exception {
    OrderGoodsVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdGoodsReview", so);
    return vo;
  }

  /**
   * 주문 확인용 상품 정보 조회
   */
  @Override
  public OrderGoodsVO selectOrderGoodsInfo(GoodsDetailSO so) throws Exception {
    OrderGoodsVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrderGoodsInfo", so);
    return vo;
  }

  /**
   * 배송비 계산
   *
   * @param list
   *          : 주문/장바구니 리스트
   * @param type
   *          : 리스트 타입
   */
  public Map calcDlvrAmt(List list, String type, Long siteNo) throws Exception {

    Map resultMap = new HashMap();
    Map<String, Float> dlvrPriceMap = new HashMap<>();
    Map<String, Integer> dlvrCountMap = new HashMap<>();

    if (!"order".equals(type) && !"basket".equals(type)) {
      return resultMap;
    }

    // Integer partnerNo = siteService.getPartnerNo();
    SiteSO siteSo = new SiteSO();
    siteSo.setSiteNo(siteNo);

    SiteVO svo = cacheService.selectBasicInfo(siteNo, 0);
    log.debug("=== svo : {}", svo);
    log.debug("=== list : {}", list);
    /*
     * (상품) 배송 설정 코드 dlvrSetCd - 1:기본배송비 (사이트 기본설정) 기본배송비 유형 코드 defaultDlvrcTypeCd -
     * 3:주문금액에 따른 배송비 배송비 결제 코드 dlvrcPaymentCd - 02:선불, 04:매장수령 // 1.기본배송비 이면서 주문금액
     * 조건이면 // 1-1)조건이 충족되면 선불,착불 상관없이 묶음 배송(무료) // 1-2)조건이 충족되지 않으면, 선불끼리만 묶음
     * 배송(유료)
     */

    List<OrderGoodsVO> orderGoodsList = new ArrayList<>();
    GoodsDetailSO so = new GoodsDetailSO();
    so.setSiteNo(siteNo);
    if (list != null && list.size() > 0) {
      if ("order".equals(type)) {
        for (int m = 0; m < list.size(); m++) {
          OrderGoodsVO vo = (OrderGoodsVO) list.get(m);
          so.setGoodsNo(vo.getGoodsNo());
          so.setItemNo(vo.getItemNo());
          OrderGoodsVO ogv = this.selectOrderGoodsInfo(so); // 조회
          if (SiteUtil.isMobile() && "Y".equals(ogv.getSpecialGoodsYn())) {
            ogv.setSaleAmt(ogv.getSpecialPrice());
          } else {
            ogv.setSaleAmt(vo.getSaleAmt());
          }
          ogv.setDlvrcPaymentCd(vo.getDlvrcPaymentCd());
          ogv.setOrdQtt(vo.getOrdQtt());
          ogv.setClaimQtt(vo.getClaimQtt());
          ogv.setCancelableQtt(vo.getCancelableQtt());
          ogv.setAddOptCancelableQtt(vo.getAddOptCancelableQtt());
          ogv.setAddOptQtt(vo.getAddOptQtt());
          ogv.setAddOptAmt(vo.getAddOptAmt());
          ogv.setAddOptClaimQtt(vo.getAddOptClaimQtt());
          ogv.setOrdPrmtNo(vo.getOrdPrmtNo());
          if (vo.getGoodsCpDcAmt() != null && vo.getGoodsCpDcAmt() > 0) {
            ogv.setGoodsCpDcAmt(vo.getGoodsCpDcAmt());
          } else {
            ogv.setGoodsCpDcAmt(0f);
          }
          if (vo.getGoodsPrmtDcAmt() != null && vo.getGoodsPrmtDcAmt() > 0) {
            ogv.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt());
          } else {
            ogv.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt());
          }
          ogv.setFreebieGoodsYn(vo.getFreebieGoodsYn());
          ogv.setPlusGoodsYn(vo.getPlusGoodsYn());
          orderGoodsList.add(ogv);
        }
      } else {
        for (int m = 0; m < list.size(); m++) {
          BasketVO vo = (BasketVO) list.get(m);
          so.setGoodsNo(vo.getGoodsNo());
          so.setItemNo(vo.getItemNo());
          OrderGoodsVO ogv = this.selectOrderGoodsInfo(so); // 조회
          ogv.setDlvrcPaymentCd(vo.getDlvrcPaymentCd());
          ogv.setOrdQtt(vo.getBuyQtt());
          orderGoodsList.add(ogv);
        }
      }

      List<OrderGoodsVO> basicDlvrList = new ArrayList(); // 기본배송비 묶음 리스트
      List<OrderGoodsVO> storeBasicDlvrList = new ArrayList(); // 매장수령 묶음 리스트(무료)
      for (int i = 0; i < orderGoodsList.size(); i++) {
        OrderGoodsVO vo = (OrderGoodsVO) orderGoodsList.get(i);
        if ("1".equals(vo.getDlvrSetCd()) && "02".equals(vo.getDlvrcPaymentCd())) {// 기본
          basicDlvrList.add(vo);
        } else if ("1".equals(vo.getDlvrSetCd()) && "04".equals(vo.getDlvrcPaymentCd())) { // 매장수령
          storeBasicDlvrList.add(vo);
        }
      }

      String grpId = "";
      // 기본배송비
      if (basicDlvrList != null && basicDlvrList.size() > 0) {
        Float grpDlvrPrice = 0f;
        Float orderPrice = 0f;
        Long ordPrmtNo = 0l;
        for (OrderGoodsVO bvo : basicDlvrList) {
          String ordFreebieYn = "N";
          grpId = bvo.getDlvrSetCd() + "**" + bvo.getDlvrcPaymentCd(); // 1**02
          if ("order".equals(type)) {
            // 주문 사은품 프로모션일 경우 계산에서 제외 처리
            if (bvo.getOrdPrmtNo() != null && bvo.getOrdPrmtNo() > 0) {
              PromotionSO promotionSO = new PromotionSO();
              promotionSO.setPrmtNo(bvo.getOrdPrmtNo());
              PromotionVO promotionVO = selectOrdPromotionInfo(promotionSO);
              if ("04".equals(promotionVO.getPrmtBnfCd2()) && "08".equals(promotionVO.getPrmtBnfCd3())) {
                if ("Y".equals(bvo.getFreebieGoodsYn())) {
                  ordFreebieYn = "Y";
                }
              }
            }
            if (!"Y".equals(ordFreebieYn)) {
              if (bvo.getClaimQtt() != null) {
                orderPrice += (bvo.getSaleAmt() * bvo.getOrdQtt()) - bvo.getGoodsCpDcAmt() - bvo.getGoodsPrmtDcAmt();
                orderPrice += (bvo.getAddOptAmt() * (bvo.getAddOptCancelableQtt() - bvo.getAddOptClaimQtt()));
              } else {
                orderPrice += (bvo.getSaleAmt() * bvo.getCancelableQtt()) - bvo.getGoodsCpDcAmt()
                    - bvo.getGoodsPrmtDcAmt();
                orderPrice += (bvo.getAddOptAmt() * bvo.getAddOptQtt());
              }
            }
          } else {
            orderPrice += (bvo.getSaleAmt() * bvo.getOrdQtt()) - bvo.getGoodsCpDcAmt() - bvo.getGoodsPrmtDcAmt();
            orderPrice += (bvo.getAddOptAmt() * bvo.getAddOptQtt());
          }
        }
        if (orderPrice > 0 && orderPrice >= svo.getDefaultDlvrMinAmt()) {
          grpDlvrPrice = 0f;
        } else if (orderPrice > 0 && orderPrice < svo.getDefaultDlvrMinAmt()) {
          grpDlvrPrice = svo.getDefaultDlvrMinDlvrc();
        }
        dlvrPriceMap.put(grpId, grpDlvrPrice);
        dlvrCountMap.put(grpId, basicDlvrList.size());
      }

      // 매장수령
      if (storeBasicDlvrList != null && storeBasicDlvrList.size() > 0) {
        Float grpDlvrPrice = 0f;
        for (OrderGoodsVO bvo : storeBasicDlvrList) {
          grpId = bvo.getDlvrSetCd() + "**" + bvo.getDlvrcPaymentCd(); // 1**04
        }
        dlvrPriceMap.put(grpId, grpDlvrPrice);
        dlvrCountMap.put(grpId, storeBasicDlvrList.size());
      }

      List groupDlvrList = new ArrayList(); // 묶음관련 재조합 리스트
      basicDlvrList = new ArrayList();
      storeBasicDlvrList = new ArrayList();
      List<BasketVO> basketBasicDlvrList = new ArrayList();
      List<BasketVO> storeBasketBasicDlvrList = new ArrayList();
      if ("order".equals(type)) {
        for (int k = 0; k < list.size(); k++) {
          OrderGoodsVO vo = (OrderGoodsVO) list.get(k);
          if ("1".equals(vo.getDlvrSetCd()) && "02".equals(vo.getDlvrcPaymentCd())) {// 기본
            basicDlvrList.add(vo);
          } else if ("1".equals(vo.getDlvrSetCd()) && "04".equals(vo.getDlvrcPaymentCd())) { // 매장수령
            storeBasicDlvrList.add(vo);
          }
        }
        groupDlvrList.addAll(basicDlvrList);
        groupDlvrList.addAll(storeBasicDlvrList);
      } else {
        for (int k = 0; k < list.size(); k++) {
          BasketVO vo = (BasketVO) list.get(k);
          if ("1".equals(vo.getDlvrSetCd()) && "02".equals(vo.getDlvrcPaymentCd())) {// 기본
            basketBasicDlvrList.add(vo);
          } else if ("1".equals(vo.getDlvrSetCd()) && "04".equals(vo.getDlvrcPaymentCd())) { // 매장수령
            storeBasketBasicDlvrList.add(vo);
          }
        }
        groupDlvrList.addAll(basketBasicDlvrList);
        groupDlvrList.addAll(storeBasketBasicDlvrList);
      }

      resultMap.put("list", groupDlvrList);
      resultMap.put("dlvrPriceMap", dlvrPriceMap);
      resultMap.put("dlvrCountMap", dlvrCountMap);
    } else {
      return resultMap;
    }
    log.debug(" === resultMap : {}", resultMap);
    return resultMap;
  }

  /**
   * 주문 확인용 상품 추가 옵션 정보 조회
   */
  @Override
  public GoodsAddOptionDtlVO selectOrderAddOptionInfo(GoodsDetailSO so) throws Exception {
    GoodsAddOptionDtlVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrderAddOptionInfo", so);
    return vo;
  }

  /**
   * 주문현황 정보 조회
   */
  @Override
  public ResultModel<OrderVO> selectOrderCountInfo(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrderCountInfo", so);
    result.setData(vo);
    return result;
  }

  /**
   * 선택한 주문상태의 주문건수 조회
   */
  @Override
  public ResultModel<OrderVO> selectStatusOrderCount(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectStatusOrderCount", so);
    result.setData(vo);
    return result;
  }

  /**
   * 선택한 주문상태의 클레임건수 조회
   */
  @Override
  public int selectStatusClaimCount(OrderSO so) {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectStatusClaimCount", so);
  }

  /**
   * 비회원 주문 조회 유효성 검사
   */
  @Override
  public boolean selectNonMemberOrder(OrderSO so) {
    boolean ordYn = false;
    String ordMobile1 = so.getOrdrMobile().replaceAll("-", ""); // 입력받은 번호
    OrderInfoVO orderInfoVO = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectNonMemberOrder", so);
    if (orderInfoVO != null) {
      String ordMobile2 = orderInfoVO.getOrdrMobile().replaceAll("-", ""); // 조회한 번호
      if (ordMobile1.equals(ordMobile2)) {
        ordYn = true;
      }
    }
    return ordYn;
  }

  /**
   * <pre>
   * 작성일 : 2016. 8. 5.
   * 작성자 : 박근정
   * 설명   : 검색조건에 맞는 주문 상세 목록을 조회하여 리턴
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 8. 5. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public ResultListModel<OrderGoodsVO> selectOrdDtlAllListPaging(OrderSO so) throws CustomException {

    ResultListModel<OrderGoodsVO> resultListModel = proxyDao
        .selectListPage(MapperConstants.ORDER_MANAGE + "selectOrdDtlAllListPaging", so);
    return resultListModel;

  }

  /**
   * <pre>
   * 작성일 : 2016. 5. 2.
   * 작성자 : 박근정
   * 설명   : 프론트 주문 목록을 조회하여 리턴
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 5. 2. 박근정 - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public ResultListModel<OrderVO> selectOrdListFrontPaging(OrderSO so) throws CustomException {
    // so.setSiteNo(SiteUtil.getSiteNo());
    if (so.getSidx().length() == 0) {
      so.setSidx("A.REG_DTTM");
      so.setSord("DESC");
    }

    ResultListModel<OrderVO> resultList = new ResultListModel<OrderVO>();
    ResultListModel<OrderInfoVO> orderInfoListModel = proxyDao
        .selectListPage(MapperConstants.ORDER_MANAGE + "selectOrdListFrontPaging", so);
    List<OrderInfoVO> list = orderInfoListModel.getResultList();
    List<OrderVO> newList = new ArrayList<OrderVO>();

    if (list != null && list.size() > 0) {
      for (OrderInfoVO infoVO : list) {
        // 결제 정보
        List<OrderPayVO> orderPayVO = selectOrderPayInfoList(infoVO);
        // 상품 정보
        Map<String, String> map = new HashMap<String, String>();
        map.put("ordNo", infoVO.getOrdNo());
        map.put("siteNo", Long.toString(so.getSiteNo()));
        map.put("addOptYn", "N");
        List<OrderGoodsVO> goodsList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdDtlNoOptionList",
            map);

        // 세트 상품 목록을 추가할 새로운 상품 목록
        List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

        for (OrderGoodsVO gvo : goodsList) {
          List<OrderGoodsVO> freebieList = new ArrayList<>();

          if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
            List<OrderGoodsVO> goodsSetList = selectOrdGoodsSetList(gvo);
            gvo.setGoodsSetList(goodsSetList);
          }

          // 매장정보
          if ("Y".equals(infoVO.getStoreYn())) {
            StoreManageSO storeManageSO = new StoreManageSO();
            storeManageSO.setSiteNo(so.getSiteNo());
            storeManageSO.setPartnerNo(gvo.getPartnerNo());
            storeManageSO.setStoreNo(gvo.getStoreNo());
            gvo.setStoreManageVO(storeManageService.selectStoreInfo(storeManageSO).getData());
          }

          // 사은품 정보
          try {
            OrderSO freebieSO = new OrderSO();
            freebieSO.setOrdNo(gvo.getOrdNo());
            freebieSO.setOrdDtlSeq(gvo.getOrdDtlSeq());
            freebieList = selectOrdFreebieList(freebieSO);
            if (freebieList != null && freebieList.size() > 0) {
              gvo.setFreebieList(freebieList);
            }
          } catch (Exception e) {
            log.debug("{}", e.getMessage());
          }

          newGoodsList.add(gvo);
        }

        OrderVO vo = new OrderVO();
        // 기본 정보
        vo.setOrderInfoVO(infoVO);
        // 결제 목록
        vo.setOrderPayVO(orderPayVO);
        // 상품 목록
        vo.setOrderGoodsVO(newGoodsList);

        // 주문 사은품 정보
        List<OrderGoodsVO> ordFreebieList = new ArrayList<>();
        try {
          OrderSO freebieSO = new OrderSO();
          freebieSO.setOrdNo(infoVO.getOrdNo());
          freebieSO.setOrdDtlSeq("0");
          ordFreebieList = selectOrdFreebieList(freebieSO);
        } catch (Exception e) {
          log.debug("{}", e.getMessage());
        }
        vo.setOrdFreebieList(ordFreebieList);

        newList.add(vo);
      }
    }

    resultList.setResultList(newList);
    resultList.setRows(orderInfoListModel.getRows());
    resultList.setTotalRows(orderInfoListModel.getTotalRows());
    resultList.setTotalPages(orderInfoListModel.getTotalPages());
    resultList.setFilterdRows(orderInfoListModel.getFilterdRows());
    resultList.setSuccess(orderInfoListModel.getSuccess());
    resultList.setPage(orderInfoListModel.getPage());
    return resultList;

  }

  /**
   * <pre>
   * 작성일 : 2017. 11. 27.
   * 작성자 : proliebe
   * 설명   : 프론트 취소/교환/환불 내역 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 27. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public ResultListModel<OrderVO> selectOrdClaimListFrontPaging(OrderSO so) throws CustomException {

    if (so.getSidx().length() == 0) {
      so.setSidx("A.REG_DTTM");
      so.setSord("DESC");
    }

    ResultListModel<OrderVO> resultList = new ResultListModel<OrderVO>();
    ResultListModel<OrderInfoVO> orderInfoClaimListModel = proxyDao
        .selectListPage(MapperConstants.ORDER_MANAGE + "selectOrdClaimListFrontPaging", so);
    List<OrderInfoVO> list = orderInfoClaimListModel.getResultList();
    List<OrderVO> newList = new ArrayList<OrderVO>();

    if (list != null && list.size() > 0) {
      for (OrderInfoVO infoVO : list) {
        // 결제 정보
        // List<OrderPayVO> orderPayVO = selectOrderPayInfoList(infoVO);
        // 상품 정보
        Map<String, String> map = new HashMap<String, String>();
        map.put("ordNo", infoVO.getOrdNo());
        map.put("siteNo", Long.toString(so.getSiteNo()));
        map.put("claimTurn", Integer.toString(infoVO.getClaimTurn()));
        List<OrderGoodsVO> goodsList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdClaimDtlList", map);

        // 세트 상품 목록을 추가할 새로운 상품 목록
        List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

        for (OrderGoodsVO gvo : goodsList) {
          if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
            List<OrderGoodsVO> goodsSetList = selectOrdGoodsSetList(gvo);
            gvo.setGoodsSetList(goodsSetList);
          }
          newGoodsList.add(gvo);
        }

        // 취소 일반 사은품 정보
        OrderSO cSO = new OrderSO();
        cSO.setOrdNo(infoVO.getOrdNo());
        cSO.setClaimTurn(infoVO.getClaimTurn());
        List<OrderGoodsVO> cancelFreebieList = selectCancelFreebieList(cSO);

        OrderVO vo = new OrderVO();
        // 기본 정보
        vo.setOrderInfoVO(infoVO);
        // 결제 목록
        // vo.setOrderPayVO(orderPayVO);
        // 상품 목록
        vo.setOrderGoodsVO(newGoodsList);
        // 취소 사은품 목록
        vo.setCancelFreebieList(cancelFreebieList);

        newList.add(vo);
      }
    }
    resultList.setResultList(newList);
    resultList.setRows(orderInfoClaimListModel.getRows());
    resultList.setTotalRows(orderInfoClaimListModel.getTotalRows());
    resultList.setTotalPages(orderInfoClaimListModel.getTotalPages());
    resultList.setFilterdRows(orderInfoClaimListModel.getFilterdRows());
    resultList.setSuccess(orderInfoClaimListModel.getSuccess());
    resultList.setPage(orderInfoClaimListModel.getPage());
    return resultList;

  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 8. 12.
   * 작성자 : Gongi
   * 설명   : 부가 비용 사용 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 8. 12. Gongi - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public List<OrderGoodsVO> selectAddedAmountList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectAddedAmountList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2018. 01. 21.
   * 작성자 : proliebe
   * 설명   : 부가 비용 사용 목록 전체 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 01. 21. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public List<OrderGoodsVO> selectAddedAmountAllList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectAddedAmountAllList", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 8. 25.
   * 작성자 : 김찬호
   * 설명   : 주문 상태 변경시 자동 SMS 보내기
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 8. 25. 김찬호 - 최초생성
   /**
   * SMS
   * 주문완료 시(택배배송) : 03
   * 주문취소 시 : 04
   * 배송중 : 05
   * 반품/교환신청 : 06
   * 반품신청 : 07
   * 환불처리 : 08
   * 품절알림 : 09
   * 반품/교환완료 : 10
   * 반품완료 : 11
   * 반품/환불신청 : 12
   * 반품/환불완료 : 13
   * </pre>
   *
   * @param sendTypeCd
   * @param vo
   * @return
   * @throws Exception
   */
  @Override
  public boolean sendOrdAutoSms(String sendTypeCd, OrderGoodsVO vo) throws Exception {
    SmsSendSO sendSo = new SmsSendSO();
    ReplaceCdVO replaceVO = new ReplaceCdVO();
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    Calendar cal = Calendar.getInstance();
    try {
      // 기본 정보
      OrderInfoVO orderInfoVo = new OrderInfoVO();
      orderInfoVo.setSiteNo(vo.getSiteNo());
      orderInfoVo.setPartnerNo(vo.getPartnerNo());
      orderInfoVo.setOrdNo(vo.getOrdNo());
      OrderInfoVO orderDtl = selectOrdDtlInfo(orderInfoVo);

      // 결제 정보
      List<OrderPayVO> payVo = selectOrgOrderPayInfo(orderInfoVo);
      sendSo.setSendTypeCd(sendTypeCd); //
      sendSo.setMemberNo((!StringUtil.isEmpty(vo.getMemberNo())) ? vo.getMemberNo()
          : SessionDetailHelper.getDetails().getSession().getMemberNo());
      sendSo.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
      sendSo.setPartnerNo((!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : 0);
      sendSo.setRecvTelno(orderDtl.getOrdrMobile());
      sendSo.setReceiverNm(orderDtl.getOrdrNm());
      sendSo.setReceiverId(orderDtl.getLoginId());

      // 배송 정보 조회
      DeliveryVO delivVo = new DeliveryVO();
      delivVo.setOrdNo(vo.getOrdNo());
      List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);

      SiteCacheVO siteVO = siteService.getSiteInfo(vo.getSiteNo(),
          (!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : 0);
      replaceVO.setOrdPartnerNm(orderDtl.getPartnerNm());
      replaceVO.setOrderNm(orderDtl.getOrdrNm());
      replaceVO.setOrderNo(vo.getOrdNo());
      replaceVO.setSiteNm(siteVO.getSiteNm());

      cal.setTime(orderDtl.getOrdAcceptDttm());
      String ordAcceptDttm = df.format(cal.getTime());
      replaceVO.setOrdAcceptDttm(ordAcceptDttm);
      replaceVO.setOrdAddr("(" + orderDtl.getPostNo() + ") " + orderDtl.getRoadnmAddr() + " " + orderDtl.getDtlAddr());

      cal.add(Calendar.DATE, 5);
      String ordShipPvdDate = df.format(cal.getTime());
      replaceVO.setOrdShipPvdDate(ordShipPvdDate);

      // 방문수령일때
      if ("Y".equals(orderDtl.getStoreYn())) {
        String securePrefix = "https://";
        replaceVO
            .setStoreUrl(securePrefix + siteVO.getDlgtDomain().replace("/kr", "").replace("/en", "").replace("/jp", "")
                + "/m/kr/front/order/storeOrderVoucherLmsPop.do?ordNo=" + vo.getOrdNo());
      }

      // 상품정보
      OrderVO claimGoods = null;
      if (StringUtils.isBlank(vo.getGoodsNm())) {
        OrderInfoVO tVO = new OrderInfoVO();
        tVO.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
        tVO.setOrdNo(vo.getOrdNo());
        tVO.setPartnerNo((!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : 0);

        List<OrderGoodsVO> goodsList = null;
        if ("21".equals(vo.getOrdStatusCd()) || "60".equals(vo.getOrdStatusCd()) || "66".equals(vo.getOrdStatusCd())
            || "70".equals(vo.getOrdStatusCd()) || "74".equals(vo.getOrdStatusCd())) { // 클레임의
          // 경우
          // 취소 주문 리스트
          OrderInfoVO orderInfoVO = new OrderInfoVO();
          orderInfoVO.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
          orderInfoVO.setOrdNo(tVO.getOrdNo());
          orderInfoVO.setClaimTurn(vo.getClaimTurn());
          claimGoods = selectOrdClaimDtl(orderInfoVO);
          goodsList = claimGoods.getOrderGoodsVO();
        } else { // 클레임이 아닐 경우
          goodsList = selectOrgOrdDtlList(tVO);
        }

        if (goodsList != null) {
          if (goodsList.size() == 1) {
            replaceVO.setOrderItem(goodsList.get(0).getGoodsNm());
            replaceVO.setOrderRequestItem(goodsList.get(0).getGoodsNm());
            replaceVO.setOrdGoodsNo(goodsList.get(0).getGoodsNo());
          } else {
            replaceVO.setOrderItem(goodsList.get(0).getGoodsNm() + " 외 " + (goodsList.size() - 1) + "건");
            replaceVO.setOrderRequestItem(goodsList.get(0).getGoodsNm() + " 외 " + (goodsList.size() - 1) + "건");
            replaceVO.setOrdGoodsNo(goodsList.get(0).getGoodsNo() + " 외 " + (goodsList.size() - 1) + "건");
          }

          // 색상
          if (!StringUtils.isBlank(goodsList.get(0).getModelNm())) {
            String oriStyleCd = goodsList.get(0).getModelNm();
            String styleCd = goodsList.get(0).getModelNm().substring(0, 10);
            String resultStyleCd = oriStyleCd.replace(styleCd, "");
            GoodsDetailSO colorSo = new GoodsDetailSO();
            colorSo.setSiteNo(goodsList.get(0).getSiteNo());
            colorSo.setPartnerNo(goodsList.get(0).getPartnerNo());
            colorSo.setStyleCd(styleCd);
            List<GoodsDetailVO> colorList = goodsManageService.selectGoodsColorByStyleCd(colorSo);
            if (colorList.size() == 1) {
              replaceVO.setOrdGoodsColor(resultStyleCd);
            } else {
              replaceVO.setOrdGoodsColor(resultStyleCd + " 외 " + (colorList.size() - 1) + "건");
            }
          } else {
            replaceVO.setOrdGoodsColor("-");
          }
        }
      } else {
        replaceVO.setOrderItem(vo.getGoodsNm());
      }

      // 배송정보
      for (DeliveryVO dvo : deliveryVOList) {
        replaceVO.setCourierNm(dvo.getRlsCourierNm());
        replaceVO.setInvoiceNo(dvo.getRlsInvoiceNo());
      }

      OrderPayVO refundPayVo = null;
      if ("21".equals(vo.getOrdStatusCd()) || "74".equals(vo.getOrdStatusCd())) { // 클레임의
        OrderPayPO opp = new OrderPayPO();
        opp.setOrdNo(Long.parseLong(vo.getOrdNo()));
        opp.setClaimTurn(vo.getClaimTurn());
        refundPayVo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectPaymentRefund", opp);
      }

      // 결제정보
      long ordPayAmt = 0;
      long ordSvmnAmt = 0;
      long ordRefundAmt = 0;
      if ("21".equals(vo.getOrdStatusCd()) || "70".equals(vo.getOrdStatusCd()) || "74".equals(vo.getOrdStatusCd())) { // 클레임의
        if ("70".equals(vo.getOrdStatusCd())) {
          ordRefundAmt = (long) (new Double(claimGoods.getOrderGoodsVO().get(0).getEstimatedRefundAmt())).doubleValue();
        } else {
          long pointRefundAmt = (long) (new Double(refundPayVo.getPointRefundAmt())).doubleValue();
          long pgRefundAmt = (long) (new Double(refundPayVo.getPgRefundAmt())).doubleValue();
          ordSvmnAmt = pointRefundAmt;
          ordPayAmt = pgRefundAmt;
          ordRefundAmt = pointRefundAmt + pgRefundAmt;
        }
      } else {
        for (OrderPayVO pvo : payVo) {
          ordPayAmt += pvo.getPaymentAmt();
          ordRefundAmt += pvo.getPaymentAmt();
          if (pvo.getPaymentWayCd().equals("01")) {
            // 적립금
            replaceVO
                .setOrdSvmnAmt(StringUtil.formatMoney((long) (new Double(pvo.getPaymentAmt())).doubleValue() + ""));
          } else if (pvo.getPaymentWayCd().equals("11") || pvo.getPaymentWayCd().equals("22")) {// 가상계좌,
            // 무통장
            replaceVO.setOrdBankNm(pvo.getBankNm()); // 입금은행명
            replaceVO.setOrdBankAccntNm(pvo.getHolderNm()); // 예금주명
            replaceVO.setOrdBankAccntNo(pvo.getActNo()); // 입금은행 계좌
            replaceVO.setOrdPayAmt(StringUtil.formatMoney((long) (new Double(pvo.getPaymentAmt())).doubleValue() + ""));
          }
          // else if ("21".equals(pvo.getPaymentWayCd()) ||
          // "23".equals(pvo.getPaymentWayCd())) {
          // ordPayAmt += pvo.getPaymentAmt();
          // }
        }
      }

      // 결제금액
      replaceVO.setOrdPayAmt(StringUtil.formatMoney(ordPayAmt + ""));
      // 적립금
      replaceVO.setOrdSvmnAmt(StringUtil.formatMoney(ordSvmnAmt + ""));
      // 환불금액
      replaceVO.setOrdRefundAmt(StringUtil.formatMoney(String.valueOf(ordRefundAmt)));

      if ("07".equals(sendTypeCd) || "08".equals(sendTypeCd)) {
        ClaimSO so = new ClaimSO();
        so.setOrdNo(vo.getOrdNo());
        ResultListModel<ClaimGoodsVO> cvoList = exchangeService.selectOrdDtlExchange(so);
        List<ClaimGoodsVO> list = cvoList.getResultList();
        for (ClaimGoodsVO cvo : list) {
          if (cvo.getClaimAcceptDttm() != null && !"".equals(cvo.getClaimAcceptDttm())) {
            Calendar caldate = Calendar.getInstance();
            ;
            caldate.setTime(cvo.getClaimAcceptDttm());
            replaceVO.setReqDate(DateUtil.getFormatDate(caldate, "yyyy-MM-dd"));
          }
        }
      }
    } catch (Exception e) {
      log.debug("{}", e.getMessage());
    }
    return smsSendService.sendAutoSms(sendSo, replaceVO);

  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 8. 17.
   * 작성자 : Gongi
   * 설명   : 주문 상태 변경시 자동 이메일 보내기
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 8. 17. Gongi - 최초생성
   *
   * </pre>
   *
   * @param sendTypeCd
   * @param vo
   * @return
   */
  @Override
  public ResultListModel<String> sendOrdAutoEmail(String sendTypeCd, OrderGoodsVO vo) {
    ResultListModel<String> result = new ResultListModel<>();
    try {
      /**
       * Email 주문완료(매장수령) : 08 주문완료(택배배송) : 09 주문취소 : 10 배송중 : 11 구매확정요청 : 12 자동구매확정완료
       * : 13 교환신청 : 14 품절알림 : 15 교환완료 : 16 반품신청 : 17 반품완료 : 18 매장수령 자동취소 : 22
       **/

      result.setSuccess(false);
      // 기본 정보 조회
      OrderInfoVO tVO = new OrderInfoVO();
      tVO.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
      tVO.setOrdNo(vo.getOrdNo());
      tVO.setPartnerNo((!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : 0);
      OrderInfoVO orderDtl = selectOrdDtlInfo(tVO);

      // 배송 정보 조회
      DeliveryVO delivVo = new DeliveryVO();
      delivVo.setOrdNo(vo.getOrdNo());
      List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);

      // 방문수령 상세 조회..
      OrderInfoVO orderInfoVo = new OrderInfoVO();
      orderInfoVo.setOrdNo(vo.getOrdNo());
      orderInfoVo.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
      OrderVO storeVo = selectOrdDtl(orderInfoVo);

      List<OrderGoodsVO> goodsList = null;
      List<OrderGoodsVO> orgGoodsList = null;
      /**
       * ordStatusCd 21: 결제취소 60: 교환신청 66: 교환완료 70: 반품신청 74: 반품완료
       */
      OrderPayVO refundPayVo = null;
      int claimTurn = 0;
      OrderVO claimGoods = null;
      OrderPayVO claimDlvr = null;
      if ("21".equals(vo.getOrdStatusCd()) || "60".equals(vo.getOrdStatusCd()) || "66".equals(vo.getOrdStatusCd())
          || "70".equals(vo.getOrdStatusCd()) || "74".equals(vo.getOrdStatusCd())) { // 클레임의
        // 경우
        // 취소 주문 리스트

        claimTurn = vo.getClaimTurn();

        OrderInfoVO orderInfoVO = new OrderInfoVO();
        orderInfoVO.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
        orderInfoVO.setOrdNo(tVO.getOrdNo());
        orderInfoVO.setClaimTurn(vo.getClaimTurn());
        claimGoods = selectOrdClaimDtl(orderInfoVO);
        goodsList = claimGoods.getOrderGoodsVO();

        OrderPayPO opp = new OrderPayPO();
        opp.setOrdNo(Long.parseLong(tVO.getOrdNo()));
        opp.setClaimTurn(vo.getClaimTurn());
        refundPayVo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectPaymentRefund", opp);
        // 최종환불금액

        // 추가 결제 배송비
        claimDlvr = claimGoods.getOrderDlvrPayVO();

        // 원주문
        orgGoodsList = selectOrgOrdDtlList(tVO);

      } else { // 클레임이 아닐 경우
        // 일반 주문 리스트
        if ("Y".equals(orderDtl.getStoreYn())) {
          goodsList = storeVo.getOrderGoodsVO();
        } else {
          // 구매확정 메일일 경우
          if ("12".equals(sendTypeCd) || "13".equals(sendTypeCd)) {
            tVO.setMailTypeCd(sendTypeCd);
          }
          goodsList = selectOrgOrdDtlList(tVO);
        }
      }

      // 결제 정보
      List<OrderPayVO> payVo = selectOrderPayInfoList(tVO);
      EmailSendSO sendSo = new EmailSendSO();
      /* 변경할 치환 코드 설정 */
      ReplaceCdVO replaceVO = new ReplaceCdVO();
      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
      Calendar cal = Calendar.getInstance();

      // 메인정보
      /* 이메일 자동 발송 기본 설정 */
      sendSo.setMailTypeCd(sendTypeCd); // ERD 메일 유형 코드 참조 ex)1:1문의 답변 코드 : 23
      sendSo.setSiteNo((!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo());
      sendSo.setOrdNo(new Long(tVO.getOrdNo()));
      if (orderDtl.getMemberNo() != null)
        sendSo.setReceiverNo(new Long(orderDtl.getMemberNo()));
      sendSo.setReceiverId(orderDtl.getLoginId());
      sendSo.setReceiverNm(orderDtl.getOrdrNm());
      sendSo.setReceiverEmail(orderDtl.getOrdrEmail());

      double dlvrTotalAmt = 0;
      String securePrefix = "https://";
      SiteVO siteVO = proxyDao.selectOne(MapperConstants.SETUP_SITE_INFO + "selectSiteInfo", tVO);
      replaceVO.setCustomerUrl(securePrefix + siteVO.getDlgtDomain() + "/front/customer/customerMain.do");
      if (orderDtl.getMemberNo() != null && !"0".equals(orderDtl.getMemberNo())) {
        replaceVO.setOrderListUrl(securePrefix + siteVO.getDlgtDomain() + "/front/order/orderList.do");
        replaceVO.setOrderDetailUrl(
            securePrefix + siteVO.getDlgtDomain() + "/front/order/orderDetail.do?ordNo=" + tVO.getOrdNo());
        replaceVO.setClaimDetailUrl(securePrefix + siteVO.getDlgtDomain() + "/front/order/orderClaimDetail.do?ordNo="
            + tVO.getOrdNo() + "&claimTurn=" + claimTurn);
      } else {
        replaceVO.setOrderListUrl(securePrefix + siteVO.getDlgtDomain() + "/front/login/viewLogin.do");
        replaceVO.setOrderDetailUrl(securePrefix + siteVO.getDlgtDomain() + "/front/login/viewLogin.do");
        replaceVO.setClaimDetailUrl(securePrefix + siteVO.getDlgtDomain() + "/front/login/viewLogin.do");
      }
      replaceVO.setOrderDetailImg(
          securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/btn_order_detail.jpg");
      replaceVO.setClaimDetailImg(
          securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/btn_order_return.jpg");

      // 주문일자
      cal.setTime(orderDtl.getOrdAcceptDttm());
      String ordAcceptDttm = df.format(cal.getTime());
      replaceVO.setOrdAcceptDttm(ordAcceptDttm);

      // 배송예정일
      cal.add(Calendar.DATE, 5);
      String ordShipPvdDate = df.format(cal.getTime());
      replaceVO.setOrdShipPvdDate(ordShipPvdDate);

      replaceVO.setShopName(siteVO.getSiteNm());
      replaceVO.setCustCtEmail(siteVO.getCustCtEmail());
      replaceVO.setCustCtTelNo(siteVO.getCustCtTelNo());
      replaceVO.setDlgtDomain(securePrefix + siteVO.getDlgtDomain());
      replaceVO.setLogoPath(
          securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/img_header.jpg");
      replaceVO.setFooterPath(
          securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/img_footer.jpg");
      replaceVO
          .setImgDot(securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/img_dot.jpg");
      replaceVO.setDlvrSearchBtnImg(
          securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/btn_order_delivery.jpg");
      replaceVO.setOrderNo(tVO.getOrdNo());
      replaceVO.setMemberNm(orderDtl.getOrdrNm());
      replaceVO.setOrdEmail(orderDtl.getOrdrEmail()); // 이메일
      replaceVO.setOrdTel(orderDtl.getOrdrTel());
      replaceVO.setOrdMobile(orderDtl.getOrdrMobile());
      replaceVO.setOrdAdrsNm(orderDtl.getAdrsNm());

      if ("60".equals(vo.getOrdStatusCd()) || "66".equals(vo.getOrdStatusCd()) || "70".equals(vo.getOrdStatusCd())
          || "74".equals(vo.getOrdStatusCd())) { // 클레임의
        replaceVO.setOrdAdrsMobile(goodsList.get(0).getOrdrMobile());
        replaceVO
            .setOrdAdrsTel(StringUtils.isBlank(goodsList.get(0).getOrdrTel()) ? "-" : goodsList.get(0).getOrdrTel());
        replaceVO.setOrdPostNo(goodsList.get(0).getPostNo());
        replaceVO.setOrdRoadAddr(goodsList.get(0).getRoadnmAddr());
        replaceVO.setOrdDtlAddr(goodsList.get(0).getDtlAddr());
      } else {
        replaceVO.setOrdAdrsMobile(orderDtl.getAdrsMobile());
        replaceVO.setOrdAdrsTel(StringUtils.isBlank(orderDtl.getAdrsTel()) ? "-" : orderDtl.getAdrsTel());
        replaceVO.setOrdPostNo(orderDtl.getPostNo());
        replaceVO.setOrdRoadAddr(orderDtl.getRoadnmAddr());
        replaceVO.setOrdDtlAddr(orderDtl.getDtlAddr());
      }

      replaceVO.setOrdNumAddr(orderDtl.getNumAddr());
      replaceVO.setOrdDlvrMsg(orderDtl.getDlvrMsg());
      // ordDcAmt : 일단 포인트 할인금액만 박아놓고 추후 쿠폰금액가져와서 더해서 적용하자..(2017.12.10 김찬호)
      replaceVO.setOrdCpUseCnt(orderDtl.getCpUseCnt());
      replaceVO.setOrdUseSvmnAmt(StringUtil.formatMoney(orderDtl.getUsePrcAmt()));
      replaceVO.setOrdDcAmt("0");

      // 배송정보
      for (DeliveryVO dvo : deliveryVOList) {
        replaceVO.setCourierNm(dvo.getRlsCourierNm());
        replaceVO.setInvoiceNo(dvo.getRlsInvoiceNo());
      }
      replaceVO.setDlvrSearchUrl(
          "http://www.hanjin.co.kr/Delivery_html/inquiry/result_waybill.jsp?wbl_num=" + replaceVO.getInvoiceNo());

      // 결제정보
      long ordPayAmt = 0;
      long ordSvmnAmt = 0;
      long ordRefundAmt = 0;
      if ("21".equals(vo.getOrdStatusCd()) || "74".equals(vo.getOrdStatusCd())) { // 클레임의
        long pointRefundAmt = (long) (new Double(refundPayVo.getPointRefundAmt())).doubleValue();
        long pgRefundAmt = (long) (new Double(refundPayVo.getPgRefundAmt())).doubleValue();
        ordSvmnAmt = pointRefundAmt;
        ordPayAmt = pgRefundAmt;
        ordRefundAmt = pointRefundAmt + pgRefundAmt;
      } else {
        for (OrderPayVO pvo : payVo) {
          if (StringUtils.isBlank(replaceVO.getOrdPaymentWayNm())) {
            replaceVO.setOrdPaymentWayNm(pvo.getPaymentWayNm());
          } else {
            replaceVO.setOrdPaymentWayNm(replaceVO.getOrdPaymentWayNm() + " / " + pvo.getPaymentWayNm());
          }

          // 적립금
          if ("01".equals(pvo.getPaymentWayCd())) {
            ordSvmnAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt += (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            replaceVO.setOrdCommonWayNm("");
            replaceVO.setOrdInstmntMonth("");
          } else if ("23".equals(pvo.getPaymentWayCd())) {
            ordPayAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            replaceVO.setOrdCommonWayNm("");
            if (StringUtils.isBlank(pvo.getInstmntMonth()) || "00".equals(pvo.getInstmntMonth())) {
              replaceVO.setOrdInstmntMonth("일시불");
            } else {
              replaceVO.setOrdInstmntMonth(pvo.getInstmntMonth() + "개월");
            }

            replaceVO.setOrdPaymentWayNm(
                replaceVO.getOrdPaymentWayNm() + " (" + pvo.getCardNm() + "/" + replaceVO.getOrdInstmntMonth() + ")");
          } else if ("21".equals(pvo.getPaymentWayCd())) {
            ordPayAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt += (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            replaceVO.setOrdCommonWayNm("/ " + pvo.getBankNm());
            replaceVO.setOrdInstmntMonth("");
          }
        }

        if ("60".equals(vo.getOrdStatusCd()) || "70".equals(vo.getOrdStatusCd())) {
          ordRefundAmt = (long) (new Double(claimGoods.getOrderGoodsVO().get(0).getPayAmt())).doubleValue();
        }
      }

      // 결제금액
      replaceVO.setOrdPayAmt(StringUtil.formatMoney(ordPayAmt + ""));
      // 적립금
      replaceVO.setOrdSvmnAmt(StringUtil.formatMoney(ordSvmnAmt + ""));
      // 총 결제금액
      replaceVO.setOrdTotalAmt(StringUtil.formatMoney((ordPayAmt + ordSvmnAmt) + ""));
      // 추가 배송비
      replaceVO.setClaimDlvrAmt(StringUtil.formatMoney(0 + ""));

      // 환불금액
      replaceVO.setOrdRefundAmt(StringUtil.formatMoney(String.valueOf(ordRefundAmt)));

      // 상품리스트
      StringBuffer itemBuf = new StringBuffer();
      long totalOrdQtt = 0;
      long addOptPresentAmt = 0;
      long addOptSuitAmt = 0;
      long ordSaleAmt = 0;
      Float packTotalAmt = 0f;
      Date tempClaimAcceptDttm = null;
      Date tempClaimCmpltDttm = null;
      Date ordRlsCmpltDttm = null; // 배송시작일
      String tempClaimReasonCd = "";
      String tempOrdRefundAmt = "";
      long tempSiteNo = (!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo();

      for (OrderGoodsVO goodVo : goodsList) {
        totalOrdQtt += goodVo.getOrdQtt();
        tempClaimAcceptDttm = goodVo.getClaimAcceptDttm();
        tempClaimCmpltDttm = goodVo.getClaimCmpltDttm();
        tempClaimReasonCd = ServiceUtil.getCodeName("CLAIM_REASON_CD", goodVo.getClaimReasonCd());
        if ("22".equals(sendTypeCd)) {
          tempClaimReasonCd += " (" + goodVo.getClaimDtlReason() + ")";
        }
        if (goodVo.getRefundAmt() != null && goodVo.getRefundAmt() > 0) {
          tempOrdRefundAmt = StringUtil.formatMoney("" + goodVo.getRefundAmt().intValue());
        }
        ordRlsCmpltDttm = goodVo.getRlsCmpltDttm();
        ordSaleAmt += (long) (new Double(goodVo.getSaleAmt())).doubleValue() * goodVo.getOrdQtt();

        // 상품 구성
        itemBuf.append("<tr>");
        itemBuf.append("    <td>");
        itemBuf.append("        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width:720px;\">");
        itemBuf.append("            <tr>");
        itemBuf.append("            <td style=\"width:470px;border-top:1px solid #ddd;border-right:1px solid #eee;\">");
        itemBuf
            .append("                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width:470px;\">");
        itemBuf.append("                <tr>");
        itemBuf.append("                <td style=\"width:70px;padding:16px 20px;line-height:0;\">");
        itemBuf.append("                    <img src=\"" + securePrefix + siteVO.getDlgtDomain().replace("/kr", "")
            + goodVo.getGoodsDispImgC() + "\" alt=\"" + goodVo.getGoodsNm() + "\" style=\"width:70px;\"/>");
        itemBuf.append("                </td>");
        itemBuf.append("                <td style=\"color:#666;font-size:12px;\">");
        itemBuf.append("                    <span style=\"color:#111;\">" + goodVo.getPartnerNm() + "</span><br/>");
        itemBuf.append("                    <span style=\"color:#111;\">" + goodVo.getGoodsNm() + "</span>");
        itemBuf.append("                    <span style=\"color:#999;\">(" + goodVo.getGoodsNo() + ")</span>");
        itemBuf.append("            <img src=\"" + securePrefix + siteVO.getDlgtDomain().replace("/kr", "")
            + goodVo.getIconImgPath() + "\" style=\"vertical-align:middle;\" alt=\"\"");
        itemBuf.append("                    <br/><br/>");

        // 세트상품은 값이 없어서 null 체크
        if (!StringUtils.isBlank(goodVo.getItemNm())) {
          itemBuf.append(goodVo.getItemNm());
        }

        if ("Y".equals(goodVo.getAddOptYn())) {
          itemBuf.append(" / " + goodVo.getAddOptNm() + " : " + goodVo.getAddOptQtt() + "개");
          packTotalAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
        }
        if ("SUITCASE".equals(goodVo.getAddOptNm())) {
          addOptSuitAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
        }
        if ("선물포장".equals(goodVo.getAddOptNm())) {
          addOptPresentAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
        }

        itemBuf.append("                </td>");
        itemBuf.append("</tr>");
        // 세트 상품
        if (goodVo.getGoodsSetNo() != null && !"".equals(goodVo.getGoodsSetNo())) {
          List<OrderGoodsVO> goodsSetList = selectOrdGoodsSetList(goodVo);
          if (goodsSetList != null) {
            itemBuf.append("    <tr>");
            itemBuf.append(
                "        <td colspan=\"2\" style=\"width:470px;padding:5px 0;background:#f6f6f6;border-top:1px solid #eee;border-bottom:1px solid #eee;font-size:12px;text-align:center;\">세트구성</td>");
            itemBuf.append("    </tr>");
            for (OrderGoodsVO goodsSetVo : goodsSetList) {
              itemBuf.append("    <tr>");
              itemBuf.append("        <td colspan=\"2\" style=\"width:470px;\">");
              itemBuf.append(
                  "            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width:470px;\">");
              itemBuf.append("<tr>");
              itemBuf.append("                    <td style=\"width:70px;padding:16px 20px;line-height:0;\"><img src=\""
                  + securePrefix + siteVO.getDlgtDomain().replace("/kr", "") + goodsSetVo.getGoodsDispImgC()
                  + "\" alt=\"" + goodsSetVo.getGoodsNm() + "\" style=\"width:70px;\"/></td>");
              itemBuf.append("                    <td style=\"color:#666;font-size:12px;\">");
              itemBuf
                  .append("                        <span style=\"color:#111;\">" + goodsSetVo.getGoodsNm() + "</span>");
              itemBuf.append(
                  "                        <span style=\"color:#999;\">(" + goodsSetVo.getGoodsNo() + ")</span>");
              itemBuf.append("                        <br/><br/>");
              itemBuf.append(goodsSetVo.getItemNm());

              if ("Y".equals(goodsSetVo.getAddOptYn())) {
                itemBuf.append(goodsSetVo.getAddOptNm() + " : " + goodsSetVo.getAddOptQtt() + "개");
                packTotalAmt += goodsSetVo.getAddOptQtt() * goodsSetVo.getAddOptAmt();
              }

              itemBuf.append("    </td>");
              itemBuf.append("                </tr>");
              itemBuf.append("            </table>");
              itemBuf.append("    </td>");
              itemBuf.append("    </tr>");
            }
          }
        }

        itemBuf.append("        </table>");
        itemBuf.append("    </td>");
        itemBuf.append(
            "    <td style=\"width:150px;font-size:12px;text-align:center;border-top:1px solid #ddd;line-height:20px;\">");

        String tempSaleAmt = "";
        // 한국
        if (tempSiteNo == 1) {
          tempSaleAmt = StringUtil.formatMoney(goodVo.getSaleAmt().longValue() + "");
        }
        itemBuf.append(tempSaleAmt + "원" + " / " + goodVo.getOrdQtt() + "개<br/>");

        // 구매확정요청에만 상태값을 별도노출
        if ("12".equals(sendTypeCd)) {
          String confirmText = "";
          if ("50".equals(goodVo.getOrdDtlStatusCd())) {
            confirmText = "구매확정대상";
          } else {
            confirmText = goodVo.getOrdDtlStatusNm();
          }
          itemBuf.append("<td style=\"border-top:1px solid #eee;\">" + confirmText + "</td>");
        } else if ("13".equals(sendTypeCd)) {
          itemBuf.append("<td style=\"border-top:1px solid #eee;\">" + goodVo.getOrdDtlStatusNm() + "</td>");
        }

        if ("Y".equals(orderDtl.getStoreYn())) {
          itemBuf.append("</br><a href=\"" + securePrefix + siteVO.getDlgtDomain()
              + "/front/order/orderDetail.do?ordNo=" + tVO.getOrdNo()
              + "\" target=\"_blank\" style=\"display:inline-block;margin-top:15px;\"><img src=\"" + securePrefix
              + siteVO.getDlgtDomain().replace("/kr", "") + "/front/img/common/email/btn_order_store.jpg"
              + "\" style=\"vertical-align:middle;\" alt=\"매장수령 상품교환권\" /></a>");
        }

        itemBuf.append("   </td>");
        itemBuf.append("</tr>");

        // 배송비 계산
        double amt2 = new Double(goodVo.getAreaAddDlvrc());
        dlvrTotalAmt = dlvrTotalAmt + amt2;

        itemBuf.append("        </table>");
        itemBuf.append("    </td>");
        itemBuf.append("</tr>");

        if ("20".equals(vo.getOrdStatusCd())) {
          if ("Y".equals(orderDtl.getStoreYn())) {
            itemBuf.append("<tr>");
            itemBuf.append("    <td>");
            itemBuf.append("        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width:720px;\">");
            itemBuf.append("            <tr>");
            itemBuf.append(
                "                <td style=\"width:130px;padding: 14px 0 14px 10px;font-size:12px;border-top:1px solid #ddd;\">수령매장</td>");
            itemBuf.append("                <td style=\"padding: 14px 0;font-size:12px;border-top:1px solid #ddd;\">");
            itemBuf.append(goodVo.getStoreManageVO().getStoreName());
            itemBuf.append("                    <a href=\"" + securePrefix + siteVO.getDlgtDomain()
                + "/front/order/orderDetail.do?ordNo=" + tVO.getOrdNo()
                + "\" target=\"_blank\" style=\"display:inline-block;margin:0 12px;color:#666;text-decoration:underline;\">매장위치</a>");
            itemBuf.append("                    (방문예정일 : " + goodVo.getVisitScdDt().substring(0, 4) + "-"
                + goodVo.getVisitScdDt().substring(4, 6) + "-" + goodVo.getVisitScdDt().substring(6, 8) + ")");
            itemBuf.append("                </td>");
            itemBuf.append("            </tr>");
            itemBuf.append("        </table>");
            itemBuf.append("    </td>");
            itemBuf.append("</tr>");
          }
        }
      }

      // 상품 가격
      replaceVO.setOrdSaleAmt(StringUtil.formatMoney(ordSaleAmt + ""));

      // 최종 할인 금액 계산
      OrderInfoVO orderAccountDtlVo = selectOrdAccountDtlInfo(orderInfoVo); // 최종

      int dcAmt = 0;
      int prmtAmt = 0; // 프로모션 금액
      dcAmt = orderAccountDtlVo.getOrdCpDcAmt().intValue() + orderAccountDtlVo.getOrdPrmtDcAmt().intValue()
          + orderAccountDtlVo.getOrdDupltCpDcAmt().intValue() + orderAccountDtlVo.getOrdDupltPrmtDcAmt().intValue()
          + orderAccountDtlVo.getDlvrcCpDcAmt().intValue() + orderAccountDtlVo.getDlvrcPrmtDcAmt().intValue()
          + orderAccountDtlVo.getGoodsCpDcAmt().intValue() + orderAccountDtlVo.getGoodsPrmtDcAmt().intValue();

      prmtAmt = orderAccountDtlVo.getOrdPrmtDcAmt().intValue() + orderAccountDtlVo.getOrdDupltPrmtDcAmt().intValue()
          + orderAccountDtlVo.getDlvrcPrmtDcAmt().intValue() + orderAccountDtlVo.getGoodsPrmtDcAmt().intValue();

      replaceVO.setOrdDcAmt(StringUtil.formatMoney((dcAmt) + "")); // 총 할인금액
      replaceVO.setOrgOrdPrmtAmt(StringUtil.formatMoney(prmtAmt + "")); // 프로모션

      // 클레임 관련정보 세팅
      if (tempClaimCmpltDttm != null) {
        replaceVO.setOrdClaimCmpltDttm(df.format(tempClaimCmpltDttm.getTime()));
      }

      if (tempClaimAcceptDttm != null) {
        replaceVO.setOrdClaimAcceptDttm(df.format(tempClaimAcceptDttm.getTime()));
      }

      if (ordRlsCmpltDttm != null) {
        replaceVO.setOrdRlsCmpltDttm(df.format(ordRlsCmpltDttm.getTime()));

        // 자동구매확정 예정일 (배송완료일 + 8일)
        cal.setTime(ordRlsCmpltDttm);
        cal.add(Calendar.DATE, 8);
        String OrdConfirmPvdDate = df.format(cal.getTime());
        replaceVO.setOrdConfirmPvdDate(OrdConfirmPvdDate);

        Calendar cal2 = Calendar.getInstance();
        replaceVO.setReqDate(df.format(cal2.getTime()));
      }

      if (!StringUtils.isBlank(tempClaimReasonCd)) {
        replaceVO.setOrdClaimReason(tempClaimReasonCd);
      }

      if (!StringUtils.isBlank(tempOrdRefundAmt)) {
        replaceVO.setOrdClaimAmt(tempOrdRefundAmt); // 승인취소금액
      }

      Calendar nowCal = Calendar.getInstance();
      replaceVO.setReqDate(df.format(nowCal.getTime()));
      replaceVO.setOrdClaimCouponCnt("0"); // 쿠폰결제는 아직 미구현이라 0으로 고정 (2017.12.10 김찬호)
      replaceVO.setOrdClaimPoint("0"); // 포인트 결제가 결제수단으로가는지 단순 할인으로 가는지 확인해야함, 0으로 고정 (2017.12.10 김찬호)

      Float accountDlvrAmt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectRealDlvrAmt", vo.getOrdNo());

      // 배송비: accountDlvrAmt, 지역배송비: dlvrTotalAmt
      Float realDlvrAmt = accountDlvrAmt + (float) dlvrTotalAmt;

      replaceVO.setOrdDlvrAmt(StringUtil.formatMoney(realDlvrAmt.intValue() + "")); // 배송비
      replaceVO.setOrderItemList(itemBuf.toString());
      replaceVO.setOrddtlOrdQtt("" + totalOrdQtt);
      // 선물포장+suit+쇼핑백
      addOptPresentAmt = addOptPresentAmt + addOptSuitAmt + orderDtl.getShoppingbagAmt().intValue();
      replaceVO.setOrdAddOptPresentAmt(StringUtil.formatMoney(addOptPresentAmt + ""));

      // 클레임시 추가 배송비 결제내역 관련
      if (claimDlvr != null) {
        String instmntMonth = "";
        replaceVO.setClaimDlvrAmt(StringUtil.formatMoney(claimDlvr.getPaymentAmt().intValue() + "")); // 추가 배송비
        replaceVO.setClaimDlvrPaymentWayNm(claimDlvr.getPaymentWayNm()); // 수단

        if ("23".equals(claimDlvr.getPaymentWayCd())) {
          if (StringUtils.isBlank(claimDlvr.getInstmntMonth()) || "00".equals(claimDlvr.getInstmntMonth())) {
            instmntMonth = "일시불";
          } else {
            instmntMonth = claimDlvr.getInstmntMonth() + "개월";
          }
          replaceVO.setClaimDlvrPaymentWayNm(
              replaceVO.getClaimDlvrPaymentWayNm() + " (" + claimDlvr.getCardNm() + "/" + instmntMonth + ")");
        } else if ("21".equals(claimDlvr.getPaymentWayCd())) {
          replaceVO.setClaimDlvrPaymentWayNm(replaceVO.getClaimDlvrPaymentWayNm() + " (" + claimDlvr.getBankNm() + ")");
        }
      }

      // 원주문 내역조회
      if (orgGoodsList != null) {
        totalOrdQtt = 0;
        ordPayAmt = 0;
        ordSvmnAmt = 0;
        ordSaleAmt = 0;
        addOptPresentAmt = 0;
        addOptSuitAmt = 0;
        packTotalAmt = 0f;

        for (OrderPayVO pvo : payVo) {
          String instmntMonth = "";
          replaceVO.setOrgOrdPaymentWayNm(pvo.getPaymentWayNm());

          // 적립금
          if ("01".equals(pvo.getPaymentWayCd())) {
            ordSvmnAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt += (long) (new Double(pvo.getPaymentAmt())).doubleValue();
          } else if ("23".equals(pvo.getPaymentWayCd())) {
            ordPayAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            if (StringUtils.isBlank(pvo.getInstmntMonth()) || "00".equals(pvo.getInstmntMonth())) {
              instmntMonth = "일시불";
            } else {
              instmntMonth = pvo.getInstmntMonth() + "개월";
            }
            replaceVO.setOrgOrdPaymentWayNm(
                replaceVO.getOrgOrdPaymentWayNm() + " (" + pvo.getCardNm() + "/" + instmntMonth + ")");
          } else if ("21".equals(pvo.getPaymentWayCd())) {
            ordPayAmt = (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            ordRefundAmt += (long) (new Double(pvo.getPaymentAmt())).doubleValue();
            replaceVO.setOrgOrdPaymentWayNm(replaceVO.getOrgOrdPaymentWayNm() + " (" + claimDlvr.getBankNm() + ")");
          }
          log.debug("====== ordPayAmt : {}", ordPayAmt);
        }

        for (OrderGoodsVO goodVo : orgGoodsList) {
          totalOrdQtt += goodVo.getOrdQtt();
          ordSaleAmt += (long) (new Double(goodVo.getSaleAmt())).doubleValue() * goodVo.getOrdQtt();

          if ("Y".equals(goodVo.getAddOptYn())) {
            packTotalAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
          }
          if ("SUITCASE".equals(goodVo.getAddOptNm())) {
            addOptSuitAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
          }
          if ("선물포장".equals(goodVo.getAddOptNm())) {
            addOptPresentAmt += goodVo.getAddOptQtt() * goodVo.getAddOptAmt();
          }
          // 세트 상품
          if (goodVo.getGoodsSetNo() != null && !"".equals(goodVo.getGoodsSetNo())) {
            List<OrderGoodsVO> goodsSetList = selectOrdGoodsSetList(goodVo);
            if (goodsSetList != null) {
              for (OrderGoodsVO goodsSetVo : goodsSetList) {
                if ("Y".equals(goodsSetVo.getAddOptYn())) {
                  packTotalAmt += goodsSetVo.getAddOptQtt() * goodsSetVo.getAddOptAmt();
                }
              }
            }
          }
          String tempSaleAmt = "";
          // 한국
          if (tempSiteNo == 1) {
            tempSaleAmt = StringUtil.formatMoney(goodVo.getSaleAmt().longValue() + "");
          }
          // 배송비 계산
          double amt1 = new Double(goodVo.getRealDlvrAmt());
          double amt2 = new Double(goodVo.getAreaAddDlvrc());
          dlvrTotalAmt = dlvrTotalAmt + amt1 + amt2;
        }

        // 상품 가격
        replaceVO.setOrgOrdSaleAmt(StringUtil.formatMoney(ordSaleAmt + ""));
        replaceVO.setOrgOrdDcAmt(StringUtil.formatMoney((dcAmt) + "")); // 총 할인금액
        replaceVO.setOrgOrdPrmtAmt(StringUtil.formatMoney(prmtAmt + "")); // 프로모션
        replaceVO.setOrgOrdDlvrAmt(StringUtil.formatMoney((long) dlvrTotalAmt + "")); // 배송비

        // 선물포장+suit+쇼핑백
        addOptPresentAmt = addOptPresentAmt + addOptSuitAmt + orderDtl.getShoppingbagAmt().intValue();
        replaceVO.setOrgOrdAddOptPresentAmt(StringUtil.formatMoney(addOptPresentAmt + ""));

        // 결제금액
        replaceVO.setOrgOrdPayAmt(StringUtil.formatMoney(ordPayAmt + ""));
        // 포인트
        replaceVO.setOrgOrdSvmnAmt(StringUtil.formatMoney(ordSvmnAmt + ""));
        // 총 결제금액
        replaceVO.setOrgOrdTotalAmt(StringUtil.formatMoney((ordPayAmt + ordSvmnAmt) + ""));

        log.debug("replaceVO : " + replaceVO);
      }

      result = emailSendService.emailAutoSend(sendSo, replaceVO); // 원본
      /** start - SMTP 테스트용 **/
      // boolean testVal = emailSendService.emailAutoSend(sendSo, replaceVO);
      // result.setSuccess(testVal);
      /** end - SMTP 테스트용 **/
    } catch (Exception e) {
      log.debug("{}", e.getMessage(), e);
    }
    return result;
  }

  /**
   * 취소시 배송비 재 계산용 주문 정보 조회
   */
  @Override
  public List<ClaimGoodsVO> selectDlvrCalOrdGoodsList(GoodsDetailSO so) throws Exception {
    // 정상 주문 확인
    List<ClaimGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectDlvrCalOrdGoodsList", so);
    // 배송비 재계산

    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 9. 1.
   * 작성자 : Gongi
   * 설명   : 결제 정보 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 9. 1. Gongi - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public List<OrderPayVO> selectOrderPayInfoList(OrderInfoVO vo) {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdDtlPayInfo", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 11. 1.
   * 작성자 : Gongi
   * 설명   : 최초의 적립금 제외한 결제금액
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 11. 1. Gongi - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public List<OrderPayVO> selectOrgOrderPayInfo(OrderInfoVO vo) {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrgOrdDtlPayInfo", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 27.
   * 작성자 : proliebe
   * 설명   : 배송비 결제 정보 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 27. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public OrderPayVO selectOrderDlvrPayInfo(OrderInfoVO vo) {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrderDlvrPayInfo", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 9. 1.
   * 작성자 : Gongi
   * 설명   : 주문 기본 정보 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 9. 1. Gongi - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public OrderInfoVO selectOrdDtlInfo(OrderInfoVO vo) {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdDtlInfo", vo);
  }

  /**
   *
   * <pre>
   * 작성일 : 2018. 1. 2.
   * 작성자 : proliebe
   * 설명   : 주문 기본 정보 조회(최종 할인 금액)
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2018. 1. 2. proliebe - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public OrderInfoVO selectOrdAccountDtlInfo(OrderInfoVO vo) {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdAccountDtlInfo", vo);
  }

  /**
   * <pre>
   * 작성일 : 2016. 09. 01.
   * 작성자 : zouki
   * 설명   : 주문번호를 변수로 받아 주문한 상품 목록 정보를 조회 (상품, 쿠폰, 적립금 관련 조회 리스트 )
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 09. 01. 배종욱 - 최초생성
   * </pre>
   *
   * @return2454
   */
  public List<OrderGoodsVO> selectOrdCancelDtlList(OrderInfoVO vo) throws CustomException {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdCancelDtlList", vo);
  }

  /**
   * <pre>
   * 작성일 : 2016. 09. 01.
   * 작성자 : zouki
   * 설명   : 주문번호를 변수로 받아 주문한 상품 목록 정보를 조회 (상품, 쿠폰, 적립금 관련 조회 )
  
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 09. 01. 배종욱 - 최초생성
   * </pre>
   *
   * @return
   */
  public OrderGoodsVO selectOrdCancelDtlInfo(OrderGoodsVO vo) throws CustomException {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdCancelDtlInfo", vo);
  }

  /** 묶음배송 해제 및 환불 금액 조회 **/
  public OrderVO changePriceData(OrderPO po) throws CustomException {
    OrderVO orderVO = new OrderVO();
    boolean dlvrChangeYn = false;
    boolean refundDlvrChangeYn = false;
    Float orgDlvrPrice = 0f; // 기존 총 배송비
    Float realDlvrAmt = 0f; // 기존 배송비
    Float areaAddDlvrc = 0f; // 기존 지역 배송비
    int plusGoodsCnt = 0;
    int freebieGoodsCnt = 0;

    // 첫번째 인자 : 재결제할 상품리스트
    // 두번째 인자 : 주문 or 장바구니(order/basket)
    // 재결제할 상품리스트에 dlvrSetCd(배송설정코드)/dlvrcPaymentCd(배송비결제코드)
    OrderInfoVO oiv = new OrderInfoVO();
    oiv.setOrdNo(Long.toString(po.getOrdNo()));
    List<OrderGoodsVO> orgGoodsList = selectOrgOrdDtlList(oiv); // 최초
    List<OrderGoodsVO> orderGoodsList = selectOrgOrdAccountDtlList(oiv); // 최종

    for (OrderGoodsVO vo : orderGoodsList) {
      areaAddDlvrc += vo.getAreaAddDlvrc();
    }

    // 정산테이블에서 배송비 확인
    Float accountDlvrAmt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectRealDlvrAmt", po.getOrdNo());
    if (accountDlvrAmt > 0) {
      realDlvrAmt = accountDlvrAmt;
    }

    // 클레임 수량 0으로 초기화
    for (OrderGoodsVO vo : orderGoodsList) {
      vo.setClaimQtt(0);
      vo.setAddOptClaimQtt(0);
    }
    for (OrderGoodsVO vo : orgGoodsList) {
      vo.setClaimQtt(0);
      vo.setAddOptClaimQtt(0);
    }

    // 주문 남은 수량 셋팅
    List<OrderGoodsVO> goodsRemainList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdRemainQtt", po);
    // int refundCnt = selectRefundCount(po); // 환불 카운트
    for (OrderGoodsVO vo : orderGoodsList) {
      for (OrderGoodsVO reVO : goodsRemainList) {
        if (vo.getOrdDtlSeq().equals(reVO.getOrdDtlSeq())) {
          vo.setRemainQtt(reVO.getRemainQtt());
        }
      }
    }

    // 프론트 산출내역 노출용 데이터 셋팅
    for (int i = 0; i < po.getOrdDtlSeqArr().length; i++) {
      String ordDtlSeq = po.getOrdDtlSeqArr()[i];
      if (ordDtlSeq != null && !"".equals(ordDtlSeq)) {
        for (int ov = 0; ov < orgGoodsList.size(); ov++) {
          if (ordDtlSeq.equals(orgGoodsList.get(ov).getOrdDtlSeq())) {
            orgGoodsList.get(ov).setClaimQtt(Integer.parseInt(po.getClaimQttArr()[i]));
            orgGoodsList.get(ov).setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[i]));
          }
        }
      }
    }

    try {
      // 최종 주문에 대한 배송비 계산(클레임 전 원본 데이터)
      for (OrderGoodsVO vo : orderGoodsList) {
        vo.setOrdQtt(vo.getRemainQtt());
      }
      Map map = calcDlvrAmt(orderGoodsList, "order", po.getSiteNo());

      Map<String, Float> dlvrPriceMap = (Map<String, Float>) map.get("dlvrPriceMap");

      String grpId = "";
      String preGrpId = "";
      boolean areaDlvrApplyYn = false; // 지역추가배송비 적용 여부

      for (OrderGoodsVO vo : orderGoodsList) {
        grpId = vo.getDlvrSetCd() + "**" + vo.getDlvrcPaymentCd();

        log.debug("grpId : " + grpId);
        log.debug("preGrpId : " + preGrpId);
        log.debug("grpId : " + dlvrPriceMap.get(grpId));
        if (!grpId.equals(preGrpId)) {
          orgDlvrPrice += (Float) dlvrPriceMap.get(grpId);
        } else {
          orgDlvrPrice += 0f;
        }

        // 지역추가 배송비
        if (areaAddDlvrc > 0 && !areaDlvrApplyYn) {
          if (!"04".equals(vo.getDlvrcPaymentCd())) {
            areaDlvrApplyYn = true;
            orgDlvrPrice += areaAddDlvrc;
          }
        }
        preGrpId = grpId;
      }
    } catch (Exception e) {
      log.debug("원본 배송비 계산 오류");
    }

    // 선택된 상품 취소 데이터 추가
    for (int i = 0; i < po.getOrdDtlSeqArr().length; i++) {
      String ordDtlSeq = po.getOrdDtlSeqArr()[i];
      if (ordDtlSeq != null && !"".equals(ordDtlSeq)) {
        for (int ov = 0; ov < orderGoodsList.size(); ov++) {
          if (ordDtlSeq.equals(orderGoodsList.get(ov).getOrdDtlSeq())) {
            orderGoodsList.get(ov).setClaimQtt(Integer.parseInt(po.getClaimQttArr()[i]));
            orderGoodsList.get(ov).setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[i]));
          }
        }
      }
    }

    // 원본 데이터 처리
    List<OrderGoodsVO> selectList = new ArrayList<>();
    try {
      for (OrderGoodsVO selectVO : orderGoodsList) {
        if (selectVO.getClaimQtt() == null)
          selectVO.setClaimQtt(0);
        if (selectVO.getAddOptClaimQtt() == null)
          selectVO.setAddOptClaimQtt(0);
        selectList.add(selectVO.clone());
        if ("Y".equals(selectVO.getPlusGoodsYn())) {
          plusGoodsCnt++;
        }
        if ("Y".equals(selectVO.getFreebieGoodsYn())) {
          freebieGoodsCnt++;
        }
      }
    } catch (Exception e) {
      log.debug("원본 데이터 셋팅 오류");
    }

    // 취소된 상품 제거 ( 과거 부분취소 제거 )
    // 11:주문취소, 21:결제취소, 66:교환완료, 74:환불완료
    for (int ov = 0; ov < orderGoodsList.size(); ov++) {
      if ((orderGoodsList.get(ov).getOrdDtlStatusCd().equals("11")
          || orderGoodsList.get(ov).getOrdDtlStatusCd().equals("21")
          || orderGoodsList.get(ov).getOrdDtlStatusCd().equals("74"))) {
        orderGoodsList.remove(ov);
        ov--;
      }
    }

    // 재주문 데이터로 변경
    for (int ov = 0; ov < orderGoodsList.size(); ov++) {
      OrderGoodsVO vo = (OrderGoodsVO) orderGoodsList.get(ov);
      vo.setOrdQtt(vo.getRemainQtt() - vo.getClaimQtt());
    }

    try {
      // 재주문된 상품에 대해 배송비 재계산
      Map map = calcDlvrAmt(orderGoodsList, "order", po.getSiteNo());

      Map<String, Float> dlvrPriceMap = (Map<String, Float>) map.get("dlvrPriceMap");

      String grpId = "";
      String preGrpId = "";
      boolean areaDlvrApplyYn = false; // 지역추가배송비 적용 여부
      Float dlvrPrice = 0f; // 재계산 배송비
      String freeDlvrYn = "N"; // 무료배송/쿠폰 유무
      String preFreeDlvrYn = "N"; // 이전 무료배송/쿠폰 유무
      String pricePartCancelYn = "N"; // 금액 계산용 부분 취소 여부

      // if (orderGoodsList != null && orderGoodsList.size() > 0) {
      for (OrderGoodsVO vo : orderGoodsList) {
        grpId = vo.getDlvrSetCd() + "**" + vo.getDlvrcPaymentCd();

        log.debug("grpId : " + grpId);
        log.debug("preGrpId : " + preGrpId);
        log.debug("grpId : " + dlvrPriceMap.get(grpId));
        if (!grpId.equals(preGrpId)) {
          dlvrPrice += (Float) dlvrPriceMap.get(grpId);
        } else {
          dlvrPrice += 0f;
        }

        // 지역추가 배송비
        if (areaAddDlvrc > 0 && !areaDlvrApplyYn) {
          if (!"04".equals(vo.getDlvrcPaymentCd())) {
            areaDlvrApplyYn = true;
            dlvrPrice += areaAddDlvrc;
          }
        }
        preGrpId = grpId;
      }

      log.debug("지역 배송비 : " + areaAddDlvrc);
      log.debug("재계산 배송비 : " + dlvrPrice);
      log.debug("기존 배송비 : " + realDlvrAmt);
      if (dlvrPrice > 0 && Float.compare(realDlvrAmt, dlvrPrice) != 0) {
        dlvrChangeYn = true;
      }

      log.debug("========= 환불 금액 계산 =======");
      String strOrdNo = Long.toString(po.getOrdNo());
      long longOrdNo = po.getOrdNo();
      long longSiteNo = po.getSiteNo();

      Float totAmt = 0f; // 총 결제금액
      Float pgAmt = 0f; // 적립금 제외한 금액
      Float payReserveAmt = 0f; // 적립금 금액
      Float orgReserveAmt = 0f; // 적립금 원 결제금액
      Float restAmt = 0f; // 취소 후 남은 금액
      Float refundAmt = 0f; // 환불 금액
      Float orgPgAmt = 0f;
      String paymentTurn = ""; // 결제 차수

      // 기본 정보
      OrderInfoVO infoVO = new OrderInfoVO();
      infoVO.setSiteNo(longSiteNo);
      infoVO.setOrdNo(strOrdNo);
      OrderInfoVO orderInfoVo = selectOrdAccountDtlInfo(infoVO); // 최종
      OrderInfoVO orgOrdInfoVo = selectOrdDtlInfo(infoVO); // 최초
      orderInfoVo.setSiteNo(po.getSiteNo());
      // 결제정보 조회(최종)
      List<OrderPayVO> orderPayList = selectOrderPayInfoList(infoVO);
      // 최초 결제 정보 조회
      List<OrderPayVO> orgOrdPayList = selectOrgOrderPayInfo(infoVO);

      int i = 0;
      Float shoppingbagAmt = orderInfoVo.getShoppingbagAmt();
      Float ordCpDcAmt = orderInfoVo.getOrdCpDcAmt();
      Float ordPrmtDcAmt = orderInfoVo.getOrdPrmtDcAmt();
      Float ordDupltCpDcAmt = orderInfoVo.getOrdDupltCpDcAmt();
      Float ordDupltPrmtDcAmt = orderInfoVo.getOrdDupltPrmtDcAmt();
      Float defaultDlvrMinDlvrc = 0f; // 최소금액 이하 시 배송비 금액
      String dlvrYn = "Y"; // Y:배송전(결제취소), N:배송후(교환,환불)
      String partCancelYn = "N"; // Y:부분취소, N:전체취소
      Float cancelAddDlvrAmt = 0f; // 3만원미만 추가 배송비
      int cancelCpCnt = 0; // 취소 쿠폰 수량
      Float cancelCpAmt = 0f; // 취소 쿠폰 금액(깨진 경우)
      Float cancelCpDcAmt = 0f; // 취소 쿠폰 할인 금액(깨진 경우+재계산)
      Float cancelPrmtDcAmt = 0f; // 취소 프로모션 할인 금액
      if (po.getOrdDtlSeqArr().length != (orderGoodsList.size() - plusGoodsCnt - freebieGoodsCnt)) {
        for (OrderGoodsVO vo : orderGoodsList) {
          if (vo.getRemainQtt() - vo.getClaimQtt() > 0) {
            partCancelYn = "Y";
          }
        }
      }
      long preGoodsPrmtGrpNo = 0;
      log.debug("============== 상품 프로모션 적용 여부 확인 ==============");
      List<OrderGoodsVO> cancelGoodsPrmtList = new ArrayList<>(); // 취소 상품 프로모션 리스트
      List<OrderGoodsVO> groupList = selectPrmtAccountGoodsGroupList(infoVO);
      if (groupList != null && groupList.size() > 0) {
        for (OrderGoodsVO groupVO : groupList) {
          for (OrderGoodsVO vo : selectList) {
            if (groupVO.getGoodsPrmtGrpNo() != 0 && groupVO.getGoodsPrmtGrpNo() == vo.getGoodsPrmtGrpNo()
                && preGoodsPrmtGrpNo != vo.getGoodsPrmtGrpNo()) {
              if (vo.getClaimQtt() > 0) {
                List<OrderGoodsVO> newSelectList = new ArrayList<>();
                for (OrderGoodsVO vo2 : selectList) {
                  if (vo.getGoodsPrmtGrpNo() == vo2.getGoodsPrmtGrpNo()) {
                    newSelectList.add(vo2);
                  }
                }
                // 상품 프로모션 적용 확인
                Integer goodsCnt = 0;
                Float sumSaleAmt = 0f; // 판매가 합계
                Float sumCustomerAmt = 0f; // 소비자가 합계
                Float sumFreebieAmt = 0f; // 사은품 합계
                Float sumDcAmt = 0f; // 할인 합계
                Float sumExtraSvmnAmt = 0f; // 추가 포인트 합계
                String prmtBrokenYn = "N";
                PromotionSO promotionSO = new PromotionSO();
                promotionSO.setPrmtNo(vo.getGoodsPrmtNo());
                PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
                if ("01".equals(prmtVO.getPrmtBnfCd1())) { // 해당상품 전체
                  if ("01".equals(prmtVO.getPrmtBnfCd2())) { // 개별 할인
                    if ("01".equals(prmtVO.getPrmtBnfCd3())) { // 실판가 정률
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          if ("04".equals(prmtVO.getPrmtKindCd())) {
                            cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                          } else {
                            cancelCpAmt += newVO.getGoodsCpDcAmt();
                            cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                          }
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(0f);
                              } else {
                                reVO.setGoodsCpDcAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              Float eachDcAmt = (float) Math
                                  .round((reVO.getSaleAmt() * reVO.getOrdQtt()) * (prmtVO.getPrmtBnfDcRate() / 100));
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                              } else {
                                reVO.setGoodsCpDcAmt(eachDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                              }
                            }
                          }
                        }
                      }
                    } else if ("02".equals(prmtVO.getPrmtBnfCd3())) { // 소비자가 정률
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          if ("04".equals(prmtVO.getPrmtKindCd())) {
                            cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                          } else {
                            cancelCpAmt += newVO.getGoodsCpDcAmt();
                            cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                          }
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(0f);
                              } else {
                                reVO.setGoodsCpDcAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              Float eachDcAmt = (float) Math
                                  .round((reVO.getCustomerAmt() * reVO.getOrdQtt()) * (prmtVO.getPrmtBnfDcRate() / 100))
                                  - ((reVO.getCustomerAmt() - reVO.getSaleAmt()) * reVO.getOrdQtt());
                              log.debug("======= eachDcAmt : {}", eachDcAmt);
                              log.debug("======= vo.getOrdQtt() : {}", vo.getOrdQtt());
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                              } else {
                                reVO.setGoodsCpDcAmt(eachDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                              }
                            }
                          }
                        }
                      }
                    } else if ("03".equals(prmtVO.getPrmtBnfCd3())) { // 할인율+추가정률
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          if ("04".equals(prmtVO.getPrmtKindCd())) {
                            cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                          } else {
                            cancelCpAmt += newVO.getGoodsCpDcAmt();
                            cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                          }
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(0f);
                              } else {
                                reVO.setGoodsCpDcAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              Float dcRate = (float) Math.round(
                                  ((reVO.getCustomerAmt() * reVO.getOrdQtt()) - (reVO.getSaleAmt() * reVO.getOrdQtt()))
                                      / (reVO.getCustomerAmt() * reVO.getOrdQtt()) * 100);
                              dcRate = dcRate + prmtVO.getPrmtBnfDcRate();
                              Float eachDcAmt = (float) Math
                                  .round((reVO.getCustomerAmt() * reVO.getOrdQtt()) * (dcRate / 100))
                                  - ((reVO.getCustomerAmt() - reVO.getSaleAmt()) * reVO.getOrdQtt());
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                              } else {
                                reVO.setGoodsCpDcAmt(eachDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                              }
                            }
                          }
                        }
                      }
                    }
                  } else if ("02".equals(prmtVO.getPrmtBnfCd2())) { // 개별 균일가
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                      sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    }
                    log.debug("=== prmtBrokenYn : {}", prmtBrokenYn);
                    log.debug("=== sumSaleAmt : {}", sumSaleAmt);
                    log.debug("=== goodsCnt : {}", goodsCnt);
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        if ("04".equals(prmtVO.getPrmtKindCd())) {
                          cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                          log.debug("======= newVO.getGoodsPrmtDcAmt() : {}", newVO.getGoodsPrmtDcAmt());
                        } else {
                          cancelCpAmt += newVO.getGoodsCpDcAmt();
                          cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                        }
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산
                      for (OrderGoodsVO newVO : newSelectList) {
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            Float eachDcAmt = (reVO.getSaleAmt() - prmtVO.getPrmtBnfValue()) * reVO.getOrdQtt();
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(eachDcAmt);
                              cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                            } else {
                              reVO.setGoodsCpDcAmt(eachDcAmt);
                              cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                            }
                          }
                        }
                      }
                    }
                  } else if ("03".equals(prmtVO.getPrmtBnfCd2())) { // 개별 정액
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                      sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    }
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        if ("04".equals(prmtVO.getPrmtKindCd())) {
                          cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                        } else {
                          cancelCpAmt += newVO.getGoodsCpDcAmt();
                          cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                        }
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산
                      for (OrderGoodsVO newVO : newSelectList) {
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            Float eachDcAmt = prmtVO.getPrmtBnfValue() * reVO.getOrdQtt();
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(eachDcAmt);
                              cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                            } else {
                              reVO.setGoodsCpDcAmt(eachDcAmt);
                              cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                            }
                          }
                        }
                      }
                    }
                  } else if ("04".equals(prmtVO.getPrmtBnfCd2())) { // 증정
                    if ("06".equals(prmtVO.getPrmtBnfCd3())) { // 포인트 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      Float extraSvmnAmt = sumSaleAmt * prmtVO.getPrmtBnfValue() / 100;
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setExtraSvmnAmt(0f);
                              } else {
                                reVO.setExtraSvmnAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산
                        int k = 0;
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              Float eachExtraSvmnAmt = (float) Math
                                  .round((reVO.getSaleAmt() * reVO.getOrdQtt()) / sumCustomerAmt * extraSvmnAmt);
                              if (k == newSelectList.size()) {
                                reVO.setGoodsPrmtDcAmt(extraSvmnAmt - sumExtraSvmnAmt);
                              } else {
                                reVO.setGoodsPrmtDcAmt(eachExtraSvmnAmt);
                              }
                              sumExtraSvmnAmt += eachExtraSvmnAmt;
                            }
                          }
                          k++;
                        }
                      }
                    } else if ("07".equals(prmtVO.getPrmtBnfCd3())) { // 쿠폰 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      }
                    } else if ("08".equals(prmtVO.getPrmtBnfCd3())) { // 사은품 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        if ("Y".equals(newVO.getFreebieGoodsYn())) {
                          sumFreebieAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        }
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (int ov = 0; ov < orderGoodsList.size(); ov++) {
                            OrderGoodsVO reVO = orderGoodsList.get(ov);
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(0f);
                              } else {
                                reVO.setGoodsCpDcAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                              if ("Y".equals(reVO.getFreebieGoodsYn())) {
                                orderGoodsList.remove(ov);
                                ov--;
                              }
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산(분배금액)
                        int k = 0;
                        log.debug("===== sumFreebieAmt : {}", sumFreebieAmt);
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              Float eachDcAmt = (float) Math
                                  .round((reVO.getSaleAmt() * reVO.getOrdQtt()) / sumSaleAmt * sumFreebieAmt);
                              if (k == newSelectList.size()) {
                                if ("04".equals(prmtVO.getPrmtKindCd())) {
                                  reVO.setGoodsPrmtDcAmt(sumFreebieAmt - sumDcAmt);
                                } else {
                                  reVO.setGoodsCpDcAmt(sumFreebieAmt - sumDcAmt);
                                }
                              } else {
                                if ("04".equals(prmtVO.getPrmtKindCd())) {
                                  reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                } else {
                                  reVO.setGoodsCpDcAmt(eachDcAmt);
                                }
                              }
                              sumDcAmt += eachDcAmt;
                            }
                          }
                          k++;
                        }
                      }
                    }
                  } else if ("05".equals(prmtVO.getPrmtBnfCd2())) { // 무료배송
                    preFreeDlvrYn = "Y";
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                      sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    }
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산(분배 금액)
                      freeDlvrYn = "Y";
                    }
                  }
                } else if ("02".equals(prmtVO.getPrmtBnfCd1())) { // 묶음별
                  if ("04".equals(prmtVO.getPrmtBnfCd2())) { // 묶음별 증정
                    if ("06".equals(prmtVO.getPrmtBnfCd3())) { // 포인트 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      } else {
                        // 깨지는 조건 추가 확인
                        if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                          for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                            boolean existYn = false;
                            for (OrderGoodsVO reVO : orderGoodsList) {
                              if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                                existYn = true;
                              }
                            }
                            if (!existYn) {
                              prmtBrokenYn = "Y";
                              break;
                            }
                          }
                        }
                      }
                      Float extraSvmnAmt = sumSaleAmt * prmtVO.getPrmtBnfValue() / 100;
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setExtraSvmnAmt(0f);
                              } else {
                                reVO.setExtraSvmnAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산
                        int k = 0;
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq() && reVO.getOrdQtt() > 0) {
                              Float eachExtraSvmnAmt = (float) Math
                                  .round((reVO.getSaleAmt() * reVO.getOrdQtt()) / sumCustomerAmt * extraSvmnAmt);
                              if (k == newSelectList.size()) {
                                reVO.setGoodsPrmtDcAmt(extraSvmnAmt - sumExtraSvmnAmt);
                              } else {
                                reVO.setGoodsPrmtDcAmt(eachExtraSvmnAmt);
                              }
                              sumExtraSvmnAmt += eachExtraSvmnAmt;
                            }
                          }
                          k++;
                        }
                      }
                    } else if ("07".equals(prmtVO.getPrmtBnfCd3())) { // 쿠폰 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      } else {
                        // 깨지는 조건 추가 확인
                        if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                          for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                            boolean existYn = false;
                            for (OrderGoodsVO reVO : orderGoodsList) {
                              if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                                existYn = true;
                              }
                            }
                            if (!existYn) {
                              prmtBrokenYn = "Y";
                              break;
                            }
                          }
                        }
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      }
                    } else if ("08".equals(prmtVO.getPrmtBnfCd3())) { // 사은품 증정
                      for (OrderGoodsVO newVO : newSelectList) {
                        goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                        sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        if ("Y".equals(newVO.getFreebieGoodsYn())) {
                          sumFreebieAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                        }
                      }
                      if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                        prmtBrokenYn = "Y";
                      } else {
                        // 깨지는 조건 추가 확인
                        if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                          for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                            boolean existYn = false;
                            for (OrderGoodsVO reVO : orderGoodsList) {
                              if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                                existYn = true;
                              }
                            }
                            log.debug("========= existYn : {}", existYn);
                            if (!existYn) {
                              prmtBrokenYn = "Y";
                              break;
                            }
                          }
                        }
                      }
                      if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                        OrderGoodsVO cancelVO = new OrderGoodsVO();
                        if ("05".equals(prmtVO.getPrmtKindCd())) {
                          cancelCpCnt++;
                        }
                        for (OrderGoodsVO newVO : newSelectList) {
                          cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                          cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                          for (int ov = 0; ov < orderGoodsList.size(); ov++) {
                            OrderGoodsVO reVO = orderGoodsList.get(ov);
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(0f);
                              } else {
                                reVO.setGoodsCpDcAmt(0f);
                              }
                              reVO.setGoodsPrmtGrpNo(0l);
                              reVO.setGoodsPrmtNo(0l);
                              if ("Y".equals(reVO.getFreebieGoodsYn())) {
                                orderGoodsList.remove(ov);
                                ov--;
                              }
                            }
                          }
                        }
                        cancelGoodsPrmtList.add(cancelVO);
                      } else { // 재계산(분배금액)
                        int k = 0;
                        log.debug("===== sumFreebieAmt : {}", sumFreebieAmt);
                        for (OrderGoodsVO newVO : newSelectList) {
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq() && reVO.getOrdQtt() > 0) {
                              Float eachDcAmt = (float) Math
                                  .round((reVO.getSaleAmt() * reVO.getOrdQtt()) / sumSaleAmt * sumFreebieAmt);
                              if (k == newSelectList.size()) {
                                if ("04".equals(prmtVO.getPrmtKindCd())) {
                                  reVO.setGoodsPrmtDcAmt(sumFreebieAmt - sumDcAmt);
                                } else {
                                  reVO.setGoodsCpDcAmt(sumFreebieAmt - sumDcAmt);
                                }
                              } else {
                                if ("04".equals(prmtVO.getPrmtKindCd())) {
                                  reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                } else {
                                  reVO.setGoodsCpDcAmt(eachDcAmt);
                                }
                              }
                              sumDcAmt += eachDcAmt;
                            }
                          }
                          k++;
                        }
                      }
                    }
                  } else if ("05".equals(prmtVO.getPrmtBnfCd2())) { // 무료배송
                    preFreeDlvrYn = "Y";
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                      sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                      sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    } else {
                      // 깨지는 조건 추가 확인
                      if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                        for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                          boolean existYn = false;
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                              existYn = true;
                            }
                          }
                          log.debug("========= existYn : {}", existYn);
                          if (!existYn) {
                            prmtBrokenYn = "Y";
                            break;
                          }
                        }
                      }
                    }
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산(분배 금액)
                      freeDlvrYn = "Y";
                    }
                  } else if ("06".equals(prmtVO.getPrmtBnfCd2())) { // 묶음별 정액가
                    int minQtt = 0;
                    for (OrderGoodsVO newVO : newSelectList) {
                      for (OrderGoodsVO reVO : orderGoodsList) {
                        if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                          if (minQtt == 0) {
                            minQtt = (int) reVO.getOrdQtt();
                          } else if (minQtt >= reVO.getOrdQtt()) {
                            minQtt = (int) reVO.getOrdQtt();
                          }
                        }
                      }
                    }
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += minQtt;
                      sumSaleAmt += (newVO.getSaleAmt() * minQtt);
                      sumCustomerAmt += (newVO.getCustomerAmt() * minQtt);
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    } else {
                      // 깨지는 조건 추가 확인
                      if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                        for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                          boolean existYn = false;
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                              existYn = true;
                            }
                          }
                          log.debug("========= existYn : {}", existYn);
                          if (!existYn) {
                            prmtBrokenYn = "Y";
                            break;
                          }
                        }
                      }
                    }
                    log.debug("=== prmtBrokenYn : {}", prmtBrokenYn);
                    log.debug("=== sumSaleAmt : {}", sumSaleAmt);
                    log.debug("=== goodsCnt : {}", goodsCnt);
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        if ("04".equals(prmtVO.getPrmtKindCd())) {
                          cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                          log.debug("======= newVO.getGoodsPrmtDcAmt() : {}", newVO.getGoodsPrmtDcAmt());
                        } else {
                          cancelCpAmt += newVO.getGoodsCpDcAmt();
                          cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                        }
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산
                      int k = 0;
                      for (OrderGoodsVO newVO : newSelectList) {
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq() && reVO.getOrdQtt() > 0) {
                            Float eachDcAmt = (float) Math.round(
                                (reVO.getSaleAmt() * minQtt) / sumSaleAmt * (sumSaleAmt - prmtVO.getPrmtBnfValue()));
                            if (k == newSelectList.size()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(prmtVO.getPrmtBnfValue() - sumDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - (prmtVO.getPrmtBnfValue() - sumDcAmt));
                              } else {
                                reVO.setGoodsCpDcAmt(prmtVO.getPrmtBnfValue() - sumDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - (prmtVO.getPrmtBnfValue() - sumDcAmt));
                              }
                            } else {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                              } else {
                                reVO.setGoodsCpDcAmt(eachDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                              }
                            }
                            sumDcAmt += eachDcAmt;
                          }
                        }
                        k++;
                      }
                    }
                  } else if ("07".equals(prmtVO.getPrmtBnfCd2())) { // 묶음별 정액할인
                    int minQtt = 0;
                    for (OrderGoodsVO newVO : newSelectList) {
                      for (OrderGoodsVO reVO : orderGoodsList) {
                        if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                          if (minQtt == 0) {
                            minQtt = (int) reVO.getOrdQtt();
                          } else if (minQtt >= reVO.getOrdQtt()) {
                            minQtt = (int) reVO.getOrdQtt();
                          }
                        }
                      }
                    }
                    for (OrderGoodsVO newVO : newSelectList) {
                      goodsCnt += minQtt;
                      sumSaleAmt += (newVO.getSaleAmt() * minQtt);
                      sumCustomerAmt += (newVO.getCustomerAmt() * minQtt);
                    }
                    if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                      prmtBrokenYn = "Y";
                    } else {
                      // 깨지는 조건 추가 확인
                      if (prmtVO.getGoodsList() != null && prmtVO.getGoodsList().size() > 0) {
                        for (ExhibitionTargetVO targetVO : prmtVO.getGoodsList()) {
                          boolean existYn = false;
                          for (OrderGoodsVO reVO : orderGoodsList) {
                            if (targetVO.getSetNo() == reVO.getSetNo() && reVO.getOrdQtt() > 0) {
                              existYn = true;
                            }
                          }
                          log.debug("========= existYn : {}", existYn);
                          if (!existYn) {
                            prmtBrokenYn = "Y";
                            break;
                          }
                        }
                      }
                    }
                    log.debug("=== prmtBrokenYn : {}", prmtBrokenYn);
                    log.debug("=== sumSaleAmt : {}", sumSaleAmt);
                    log.debug("=== goodsCnt : {}", goodsCnt);
                    if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                      OrderGoodsVO cancelVO = new OrderGoodsVO();
                      if ("05".equals(prmtVO.getPrmtKindCd())) {
                        cancelCpCnt++;
                      }
                      for (OrderGoodsVO newVO : newSelectList) {
                        cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                        cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                        if ("04".equals(prmtVO.getPrmtKindCd())) {
                          cancelPrmtDcAmt += newVO.getGoodsPrmtDcAmt();
                        } else {
                          cancelCpAmt += newVO.getGoodsCpDcAmt();
                          cancelCpDcAmt += newVO.getGoodsCpDcAmt();
                        }
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(0f);
                            } else {
                              reVO.setGoodsCpDcAmt(0f);
                            }
                            reVO.setGoodsPrmtGrpNo(0l);
                            reVO.setGoodsPrmtNo(0l);
                          }
                        }
                      }
                      cancelGoodsPrmtList.add(cancelVO);
                    } else { // 재계산
                      int k = 0;
                      for (OrderGoodsVO newVO : newSelectList) {
                        for (OrderGoodsVO reVO : orderGoodsList) {
                          if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq() && reVO.getOrdQtt() > 0) {
                            Float eachDcAmt = (float) Math
                                .round((reVO.getSaleAmt() * minQtt) / sumSaleAmt * (prmtVO.getPrmtBnfValue() * minQtt));
                            if (k == newSelectList.size()) {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt((prmtVO.getPrmtBnfValue() * minQtt) - sumDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt()
                                    - ((prmtVO.getPrmtBnfValue() * minQtt) - sumDcAmt));
                              } else {
                                reVO.setGoodsCpDcAmt(prmtVO.getPrmtBnfValue() - sumDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt()
                                    - ((prmtVO.getPrmtBnfValue() * minQtt) - sumDcAmt));
                              }
                            } else {
                              if ("04".equals(prmtVO.getPrmtKindCd())) {
                                reVO.setGoodsPrmtDcAmt(eachDcAmt);
                                cancelPrmtDcAmt += (newVO.getGoodsPrmtDcAmt() - eachDcAmt);
                              } else {
                                reVO.setGoodsCpDcAmt(eachDcAmt);
                                cancelCpDcAmt += (newVO.getGoodsCpDcAmt() - eachDcAmt);
                              }
                            }
                            sumDcAmt += eachDcAmt;
                          }
                        }
                        k++;
                      }
                    }
                  }
                } else if ("03".equals(prmtVO.getPrmtBnfCd1())) { // 추가증정
                  for (OrderGoodsVO newVO : newSelectList) {
                    goodsCnt += (newVO.getRemainQtt() - newVO.getClaimQtt());
                    sumSaleAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    sumCustomerAmt += (newVO.getCustomerAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    if ("Y".equals(newVO.getFreebieGoodsYn())) {
                      sumFreebieAmt += (newVO.getSaleAmt() * (newVO.getRemainQtt() - newVO.getClaimQtt()));
                    }
                  }
                  if (sumSaleAmt < prmtVO.getPrmtApplicableAmt() || goodsCnt < prmtVO.getPrmtApplicableQtt()) {
                    prmtBrokenYn = "Y";
                  }
                  if ("Y".equals(prmtBrokenYn)) { // 프로모션 제외
                    OrderGoodsVO cancelVO = new OrderGoodsVO();
                    if ("05".equals(prmtVO.getPrmtKindCd())) {
                      cancelCpCnt++;
                    }
                    for (OrderGoodsVO newVO : newSelectList) {
                      cancelVO.setGoodsPrmtNo(newVO.getGoodsPrmtNo());
                      cancelVO.setGoodsPrmtGrpNo(newVO.getGoodsPrmtGrpNo());
                      for (int ov = 0; ov < orderGoodsList.size(); ov++) {
                        OrderGoodsVO reVO = orderGoodsList.get(ov);
                        if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
                          if ("04".equals(prmtVO.getPrmtKindCd())) {
                            reVO.setGoodsPrmtDcAmt(0f);
                          } else {
                            reVO.setGoodsCpDcAmt(0f);
                          }
                          reVO.setGoodsPrmtGrpNo(0l);
                          reVO.setGoodsPrmtNo(0l);
                          if ("Y".equals(reVO.getFreebieGoodsYn())) {
                            orderGoodsList.remove(ov);
                            ov--;
                          }
                        }
                      }
                    }
                    cancelGoodsPrmtList.add(cancelVO);
                  } else { // 재계산(분배금액)
                    int k = 0;
                    log.debug("===== sumFreebieAmt : {}", sumFreebieAmt);
                    for (OrderGoodsVO newVO : newSelectList) {
                      for (OrderGoodsVO reVO : orderGoodsList) {
                        if (newVO.getOrdDtlSeq() == reVO.getOrdDtlSeq() && reVO.getOrdQtt() > 0) {
                          Float eachDcAmt = (float) Math
                              .round((reVO.getSaleAmt() * reVO.getOrdQtt()) / sumSaleAmt * sumFreebieAmt);
                          if (k == newSelectList.size()) {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(sumFreebieAmt - sumDcAmt);
                            } else {
                              reVO.setGoodsCpDcAmt(sumFreebieAmt - sumDcAmt);
                            }
                          } else {
                            if ("04".equals(prmtVO.getPrmtKindCd())) {
                              reVO.setGoodsPrmtDcAmt(eachDcAmt);
                            } else {
                              reVO.setGoodsCpDcAmt(eachDcAmt);
                            }
                          }
                          sumDcAmt += eachDcAmt;
                        }
                      }
                      k++;
                    }
                  }
                }
                preGoodsPrmtGrpNo = vo.getGoodsPrmtGrpNo();
              }
            }
          }
        }
      }
      log.debug("======= cancelPrmtDcAmt : {}", cancelPrmtDcAmt);

      // 적립금 재계산
      for (OrderGoodsVO vo : orderGoodsList) {
        SiteVO siteVO = ServiceUtil.getSiteBasicInfo(po.getSiteNo(), vo.getPartnerNo());
        Float saleAmt = vo.getSaleAmt() * vo.getOrdQtt();
        Float dcRate = 0f;
        if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
          saleAmt = (vo.getSaleAmt() * vo.getOrdQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt();
          dcRate = 100f - (float) Math.floor(saleAmt / (vo.getCustomerAmt() * vo.getOrdQtt()) * 100);
        } else {
          saleAmt = 0f;
          dcRate = 0f;
        }
        int svmnTruncStndrdCd = 1;
        if ("0".equals(siteVO.getSvmnTruncStndrdCd())) {
          svmnTruncStndrdCd = 1;
        } else if ("1".equals(siteVO.getSvmnTruncStndrdCd())) {
          svmnTruncStndrdCd = 10;
        } else if ("2".equals(siteVO.getSvmnTruncStndrdCd())) {
          svmnTruncStndrdCd = 100;
        }
        if ("Y".equals(siteVO.getSvmnPvdYn()) && "Y".equals(siteVO.getGoodsPointPvdYn())
            && Float.compare(saleAmt, 0f) > 0) {
          if (Float.compare(dcRate, (float) siteVO.getGoodsDcrateExceed()) > 0) {
            Float pvdSvmn = saleAmt * siteVO.getAccurateExceed() / 100 / svmnTruncStndrdCd;
            pvdSvmn = (float) Math.floor(pvdSvmn) * svmnTruncStndrdCd;
            vo.setPvdSvmn(pvdSvmn);
            log.debug("=== vo.getPvdSvmn() : {}", vo.getPvdSvmn());
          } else {
            Float pvdSvmn = saleAmt * siteVO.getAccurateBelow() / 100 / svmnTruncStndrdCd;
            pvdSvmn = (float) Math.floor(pvdSvmn) * svmnTruncStndrdCd;
            vo.setPvdSvmn(pvdSvmn);
            log.debug("=== vo.getPvdSvmn() : {}", vo.getPvdSvmn());
          }
        } else {
          vo.setPvdSvmn(0f);
        }
      }

      log.debug("============== 주문/중복 프로모션 적용 여부 확인 ==============");
      String ordPrmtKindCd = "";
      String dupltPrmtKindCd = "";
      String ordPrmtBrokenYn = "N";
      String dupltPrmtBrokenYn = "N";
      Float sumOrdPrmtSaleAmt = 0f;
      Float sumDupltPrmtSaleAmt = 0f;
      int sumOrdPrmtGoodsCnt = 0;
      int sumDupltPrmtGoodsCnt = 0;
      long ordPrmtNo = orderInfoVo.getOrdPrmtNo();
      long dupltPrmtNo = orderInfoVo.getOrdDupltPrmtNo();
      long ordPrmtGrpNo = orderInfoVo.getOrdPrmtGrpNo();
      long ordDupltPrmtGrpNo = orderInfoVo.getOrdDupltPrmtGrpNo();
      log.debug("========= ordCpDcAmt : {}", ordCpDcAmt);
      log.debug("========= ordPrmtDcAmt : {}", ordPrmtDcAmt);
      log.debug("========= ordDupltCpDcAmt : {}", ordDupltCpDcAmt);
      log.debug("========= ordDupltPrmtDcAmt : {}", ordDupltPrmtDcAmt);
      if (ordPrmtNo > 0 || dupltPrmtNo > 0) {
        PromotionSO promotionSO = new PromotionSO();
        log.debug("------------ ordPrmtNo : {}", ordPrmtNo);
        if (ordPrmtNo != 0) {
          promotionSO.setPrmtNo(ordPrmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          ordPrmtKindCd = prmtVO.getPrmtKindCd();
          for (OrderGoodsVO vo : selectList) {
            String ordFreebieYn = "N";
            if ("04".equals(prmtVO.getPrmtBnfCd2()) && "08".equals(prmtVO.getPrmtBnfCd3())) {
              if ("Y".equals(vo.getFreebieGoodsYn())) {
                ordFreebieYn = "Y";
              }
            }
            if (!"Y".equals(ordFreebieYn)) {
              if (vo.getOrdPrmtNo() != null && ordPrmtNo == vo.getOrdPrmtNo()) {
                sumOrdPrmtSaleAmt += ((vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) - vo.getGoodsCpDcAmt()
                    - vo.getGoodsPrmtDcAmt());
                sumOrdPrmtGoodsCnt += (vo.getRemainQtt() - vo.getClaimQtt());
                log.debug("====== sumOrdPrmtSaleAmt : {}", sumOrdPrmtSaleAmt);
                log.debug("====== sumOrdPrmtGoodsCnt : {}", sumOrdPrmtGoodsCnt);
              }
            }
          }
          if (sumOrdPrmtSaleAmt < prmtVO.getPrmtApplicableAmt() || sumOrdPrmtGoodsCnt < prmtVO.getPrmtApplicableQtt()) {
            ordPrmtBrokenYn = "Y";
          } else {
            if ("05".equals(prmtVO.getPrmtBnfCd2())) {
              // 무료배송 쿠폰이 있을 경우
              freeDlvrYn = "Y";
            }
          }
        }
        if (dupltPrmtNo != 0) {
          promotionSO.setPrmtNo(dupltPrmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          dupltPrmtKindCd = prmtVO.getPrmtKindCd();
          for (OrderGoodsVO vo : orderGoodsList) {
            if (dupltPrmtNo == vo.getDupltPrmtNo()) {
              sumDupltPrmtSaleAmt += ((vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) - vo.getGoodsCpDcAmt()
                  - vo.getGoodsPrmtDcAmt());
              sumDupltPrmtGoodsCnt += (vo.getRemainQtt() - vo.getClaimQtt());
            }
          }
          if (sumDupltPrmtSaleAmt < prmtVO.getPrmtApplicableAmt()
              || sumDupltPrmtGoodsCnt < prmtVO.getPrmtApplicableQtt()) {
            dupltPrmtBrokenYn = "Y";
          } else {
            if ("05".equals(prmtVO.getPrmtBnfCd2())) {
              // 무료배송 쿠폰이 있을 경우
              freeDlvrYn = "Y";
            }
          }
        }
        // 취소 쿠폰 수량 및 금액 확인
        OrderInfoVO orderInfoVO = new OrderInfoVO();
        orderInfoVO.setOrdNo(strOrdNo);
        List<OrderGoodsVO> amountList = selectAddedAmountAllList(orderInfoVO);
        for (OrderGoodsVO vo : amountList) {
          promotionSO.setPrmtNo(vo.getPrmtNo());
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("06".equals(prmtVO.getPrmtKindCd())) {
            if ((ordPrmtNo == vo.getPrmtNo() && "Y".equals(ordPrmtBrokenYn))
                || (dupltPrmtNo == vo.getPrmtNo() && "Y".equals(dupltPrmtBrokenYn))) {
              cancelCpAmt += vo.getAddedAmountAmt();
              cancelCpCnt++;
            }
          }
        }
      }
      log.debug("========= ordPrmtBrokenYn : {}", ordPrmtBrokenYn);
      log.debug("========= ordPrmtNo : {}", ordPrmtNo);
      log.debug("========= dupltPrmtBrokenYn : {}", dupltPrmtBrokenYn);
      log.debug("========= dupltPrmtNo : {}", dupltPrmtNo);
      log.debug("========= selectList : {}", selectList);
      log.debug("========= orderGoodsList : {}", orderGoodsList);
      log.debug("======= 부분취소 확인 ========");
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : orderGoodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            if (vo.getRemainQtt() != vo.getClaimQtt()) {
              partCancelYn = "Y";
            }
            if ("20".equals(vo.getOrdDtlStatusCd())) {
              dlvrYn = "N";
            }
          }
          defaultDlvrMinDlvrc = vo.getDefaultDlvrMinDlvrc();
        }
      }
      // 환불 금액 계산
      log.debug("======= 환불금액 계산 (프로모션 적용 여부에 따른 환불 금액 계산)========");
      log.debug("=======  partCancelYn : {}", partCancelYn);
      Float cancelGoodsAmt = 0f; // 취소 상품 금액
      Float cancelPresentAmt = 0f; // 취소 선물포장 금액
      Float cancelSuitcaseAmt = 0f; // 취소 suitcase 금액
      Float cancelShoppingbagAmt = 0f; // 취소 쇼핑백 금액
      Float cancelDlvrAmt = 0f; // 취소 배송비 금액
      Float cancelAreaAddDlvrAmt = 0f; // 취소 지역추가 배송비 금액
      String presentNm = ServiceUtil.getCodeName("PACK_STATUS_CD", "0");
      String suitcaseNm = ServiceUtil.getCodeName("PACK_STATUS_CD", "1");
      for (OrderGoodsVO vo : selectList) {
        cancelGoodsAmt += (vo.getSaleAmt() * vo.getClaimQtt());
        if (presentNm.equals(vo.getAddOptNm())) {
          cancelPresentAmt += (vo.getAddOptAmt() * vo.getAddOptClaimQtt());
        }
        if (suitcaseNm.equals(vo.getAddOptNm())) {
          cancelSuitcaseAmt += (vo.getAddOptAmt() * vo.getAddOptClaimQtt());
        }
      }
      List<OrderGoodsVO> refundList = new ArrayList();
      refundList.addAll(orderGoodsList);
      for (OrderGoodsVO refundVO : refundList) {
        if (refundVO.getOrdPrmtDcAmt() == null)
          refundVO.setOrdPrmtDcAmt(0f);
        if (refundVO.getOrdCpDcAmt() == null)
          refundVO.setOrdCpDcAmt(0f);
        if (refundVO.getOrdDupltPrmtDcAmt() == null)
          refundVO.setOrdDupltPrmtDcAmt(0f);
        if (refundVO.getOrdDupltCpDcAmt() == null)
          refundVO.setOrdDupltCpDcAmt(0f);
        if (refundVO.getDlvrcPrmtDcAmt() == null)
          refundVO.setDlvrcPrmtDcAmt(0f);
        if (refundVO.getDlvrcCpDcAmt() == null)
          refundVO.setDlvrcCpDcAmt(0f);
      }
      if ("Y".equals(partCancelYn)) {
        if ("Y".equals(ordPrmtBrokenYn) && "N".equals(dupltPrmtBrokenYn)) { // 주문프로모션 깨짐, 중복프로모션 안깨짐
          Float orgAmt = 0f;
          Float repayAmt = 0f;
          Float sumOrdDupltPrmtDcAmt = 0f;
          Float sumOrdDupltCpDcAmt = 0f;
          if (po.getOrdDtlSeqArr() != null && po.getOrdDtlSeqArr().length > 0) {
            for (OrderGoodsVO vo : selectList) {
              // 원주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                orgAmt += (vo.getSaleAmt() * vo.getRemainQtt());
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  orgAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              orgAmt += (vo.getAddOptAmt() * vo.getRemainAddOptQtt());
            }
            orgAmt = orgAmt - ordPrmtDcAmt - ordCpDcAmt - ordDupltPrmtDcAmt - ordDupltCpDcAmt;
            // 상품이 전체 취소인 경우 해당 상품 로우 삭제
            for (int ov = 0; ov < refundList.size(); ov++) {
              if (refundList.get(ov).getRemainQtt() - refundList.get(ov).getClaimQtt() <= 0) {
                refundList.remove(ov);
                ov--;
              }
            }
            refundList = calcPrmtDiscount(refundList, ordPrmtNo, dupltPrmtNo);
            for (OrderGoodsVO vo : refundList) {
              // 재주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                repayAmt += (vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())); // 상품금액
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  repayAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              repayAmt += (vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt())); // 옵션금액
              sumOrdDupltPrmtDcAmt += vo.getOrdDupltPrmtDcAmt();
              sumOrdDupltCpDcAmt += vo.getOrdDupltCpDcAmt();
              vo.setOrdPrmtGrpNo(null);
              vo.setOrdPrmtNo(null);
              if (vo.getOrdDupltPrmtDcAmt() > 0 || vo.getOrdDupltCpDcAmt() > 0) {
                vo.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
              }
            }
            repayAmt = repayAmt - sumOrdDupltPrmtDcAmt - sumOrdDupltCpDcAmt;
            refundAmt = orgAmt - repayAmt;
            cancelCpDcAmt += ((ordCpDcAmt + ordDupltCpDcAmt) - (sumOrdDupltCpDcAmt));
            cancelPrmtDcAmt += ((ordPrmtDcAmt + ordDupltPrmtDcAmt) - (sumOrdDupltPrmtDcAmt));
            if ("06".equals(ordPrmtKindCd)) {
              cancelCpCnt++;
              cancelCpAmt += ordCpDcAmt;
            }
          }
          log.debug("=======  orgAmt1 : {}", orgAmt);
          log.debug("=======  repayAmt1 : {}", repayAmt);
          log.debug("=======  refundAmt1 : {}", refundAmt);
        } else if ("Y".equals(ordPrmtBrokenYn) && "Y".equals(dupltPrmtBrokenYn)) { // 주문프로모션 깨짐, 중복프로모션 깨짐
          Float orgAmt = 0f;
          Float repayAmt = 0f;
          if (po.getOrdDtlSeqArr() != null && po.getOrdDtlSeqArr().length > 0) {
            for (OrderGoodsVO vo : selectList) {
              // 원주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                orgAmt += (vo.getSaleAmt() * vo.getRemainQtt());
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  orgAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              orgAmt += (vo.getAddOptAmt() * vo.getRemainAddOptQtt());
            }
            orgAmt = orgAmt - ordPrmtDcAmt - ordCpDcAmt - ordDupltPrmtDcAmt - ordDupltCpDcAmt;
            // 상품이 전체 취소인 경우 해당 상품 로우 삭제
            for (int ov = 0; ov < refundList.size(); ov++) {
              if (refundList.get(ov).getRemainQtt() - refundList.get(ov).getClaimQtt() <= 0) {
                refundList.remove(ov);
                ov--;
              }
            }
            for (OrderGoodsVO vo : refundList) {
              // 재주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                repayAmt += (vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())); // 상품금액
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  repayAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              repayAmt += (vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt())); // 옵션금액
              vo.setOrdPrmtGrpNo(null);
              vo.setOrdPrmtNo(null);
              vo.setDupltPrmtGrpNo(null);
              vo.setDupltPrmtNo(null);
            }
            refundAmt = orgAmt - repayAmt;
            cancelCpDcAmt += (ordCpDcAmt + ordDupltCpDcAmt);
            cancelPrmtDcAmt += (ordPrmtDcAmt + ordDupltPrmtDcAmt);
            if ("06".equals(ordPrmtKindCd)) {
              cancelCpCnt++;
              cancelCpAmt += ordCpDcAmt;
            }
            if ("06".equals(dupltPrmtKindCd)) {
              cancelCpCnt++;
              cancelCpAmt += ordDupltCpDcAmt;
            }
          }
          log.debug("=======  orgAmt2 : {}", orgAmt);
          log.debug("=======  repayAmt2 : {}", repayAmt);
          log.debug("=======  refundAmt2 : {}", refundAmt);
        } else if ("N".equals(ordPrmtBrokenYn) && "Y".equals(dupltPrmtBrokenYn)) { // 주문프로모션 안깨짐, 중복프로모션 깨짐
          Float orgAmt = 0f;
          Float repayAmt = 0f;
          Float sumOrdPrmtDcAmt = 0f;
          Float sumOrdCpDcAmt = 0f;
          if (po.getOrdDtlSeqArr() != null && po.getOrdDtlSeqArr().length > 0) {
            for (OrderGoodsVO vo : selectList) {
              // 원주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                orgAmt += (vo.getSaleAmt() * vo.getRemainQtt());
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  orgAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              orgAmt += (vo.getAddOptAmt() * vo.getRemainAddOptQtt());
            }
            orgAmt = orgAmt - ordPrmtDcAmt - ordCpDcAmt - ordDupltPrmtDcAmt - ordDupltCpDcAmt;
            // 상품이 전체 취소인 경우 해당 상품 로우 삭제
            for (int ov = 0; ov < refundList.size(); ov++) {
              if (refundList.get(ov).getRemainQtt() - refundList.get(ov).getClaimQtt() <= 0) {
                refundList.remove(ov);
                ov--;
              }
            }
            refundList = calcPrmtDiscount(orderGoodsList, ordPrmtNo, 0L);
            for (OrderGoodsVO vo : refundList) {
              // 재주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                repayAmt += (vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())); // 상품금액
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  repayAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              repayAmt += (vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt())); // 옵션금액
              sumOrdPrmtDcAmt += vo.getOrdPrmtDcAmt();
              sumOrdCpDcAmt += vo.getOrdCpDcAmt();
              vo.setDupltPrmtGrpNo(null);
              vo.setDupltPrmtNo(null);
              if (vo.getOrdPrmtDcAmt() > 0 || vo.getOrdCpDcAmt() > 0) {
                vo.setOrdPrmtGrpNo(ordPrmtGrpNo);
              }
            }
            repayAmt = repayAmt - sumOrdPrmtDcAmt - sumOrdCpDcAmt;
            refundAmt = orgAmt - repayAmt;
            cancelCpDcAmt += ((ordCpDcAmt + ordDupltCpDcAmt) - (sumOrdCpDcAmt));
            cancelPrmtDcAmt += ((ordPrmtDcAmt + ordDupltPrmtDcAmt) - (sumOrdPrmtDcAmt));
            if ("06".equals(dupltPrmtKindCd)) {
              cancelCpCnt++;
              cancelCpAmt += ordDupltCpDcAmt;
            }
          }
          log.debug("=======  orgAmt3 : {}", orgAmt);
          log.debug("=======  repayAmt3 : {}", repayAmt);
          log.debug("=======  refundAmt3 : {}", refundAmt);
        } else if ("N".equals(ordPrmtBrokenYn) && "N".equals(dupltPrmtBrokenYn)) { // 주문프로모션 안깨짐, 중복프로모션 안깨짐
          Float orgAmt = 0f;
          Float repayAmt = 0f;
          Float sumOrdPrmtDcAmt = 0f;
          Float sumOrdCpDcAmt = 0f;
          Float sumOrdDupltPrmtDcAmt = 0f;
          Float sumOrdDupltCpDcAmt = 0f;
          if (po.getOrdDtlSeqArr() != null && po.getOrdDtlSeqArr().length > 0) {
            for (OrderGoodsVO vo : selectList) {
              // 원주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                log.debug("==== vo.getSaleAmt()11 : {}", vo.getSaleAmt());
                log.debug("==== vo.getRemainQtt()11 : {}", vo.getRemainQtt());
                orgAmt += (vo.getSaleAmt() * vo.getRemainQtt());
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  orgAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              orgAmt += (vo.getAddOptAmt() * vo.getRemainAddOptQtt());
              log.debug("==== totalorgAmt : {}", orgAmt);
            }
            log.debug("==== ordPrmtDcAmt : {}", ordPrmtDcAmt);
            log.debug("==== ordCpDcAmt : {}", ordCpDcAmt);
            log.debug("==== ordDupltPrmtDcAmt : {}", ordDupltPrmtDcAmt);
            log.debug("==== ordDupltCpDcAmt : {}", ordDupltCpDcAmt);
            orgAmt = orgAmt - ordPrmtDcAmt - ordCpDcAmt - ordDupltPrmtDcAmt - ordDupltCpDcAmt;
            // 상품이 전체 취소인 경우 해당 상품 로우 삭제

            log.debug("==== ordPrmtNo : {}", ordPrmtNo);
            log.debug("==== dupltPrmtNo : {}", dupltPrmtNo);
            refundList = calcPrmtDiscount(refundList, ordPrmtNo, dupltPrmtNo);
            log.debug("========= refundList : {}", refundList);
            for (OrderGoodsVO vo : refundList) {
              log.debug("=== refundList..getSaleAmt() : {}", vo.getSaleAmt());
              log.debug("=== refundList.getRemainQtt() : {}", vo.getRemainQtt());
              log.debug("=== refundList.getClaimQtt() : {}", vo.getClaimQtt());
              log.debug("=== refundList.getOrdQtt() : {}", vo.getOrdQtt());
              log.debug("=== refundList.getOrdPrmtDcAmt() : {}", vo.getOrdPrmtDcAmt());
              log.debug("=== refundList.getRemainAddOptQtt() : {}", vo.getRemainAddOptQtt());
              log.debug("=== refundList.getAddOptClaimQtt() : {}", vo.getAddOptClaimQtt());
              log.debug("=== refundList.getAddOptAmt() : {}", vo.getAddOptAmt());
              // 재주문 금액
              if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
                repayAmt += (vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())); // 상품금액
                if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                  repayAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
                }
              }
              repayAmt += (vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt())); // 옵션금액
              log.debug("=== addOpt : {}", (vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt())));
              log.debug("=== vo.getOrdDupltPrmtDcAmt : {}", vo.getOrdDupltPrmtDcAmt());
              sumOrdPrmtDcAmt += vo.getOrdPrmtDcAmt();
              sumOrdCpDcAmt += vo.getOrdCpDcAmt();
              sumOrdDupltPrmtDcAmt += vo.getOrdDupltPrmtDcAmt();
              sumOrdDupltCpDcAmt += vo.getOrdDupltCpDcAmt();
              log.debug("=== sumOrdPrmtDcAmt {}", sumOrdPrmtDcAmt);
              log.debug("=== sumOrdCpDcAmt {}", sumOrdCpDcAmt);
              log.debug("=== sumOrdDupltPrmtDcAmt {}", sumOrdDupltPrmtDcAmt);
              log.debug("=== sumOrdDupltCpDcAmt {}", sumOrdDupltCpDcAmt);
              if (vo.getOrdPrmtDcAmt() > 0 || vo.getOrdCpDcAmt() > 0) {
                vo.setOrdPrmtGrpNo(ordPrmtGrpNo);
              }
              if (vo.getOrdDupltPrmtDcAmt() > 0 || vo.getOrdDupltCpDcAmt() > 0) {
                vo.setDupltPrmtGrpNo(ordDupltPrmtGrpNo);
              }
            }
            repayAmt = repayAmt - sumOrdPrmtDcAmt - sumOrdCpDcAmt - sumOrdDupltPrmtDcAmt - sumOrdDupltCpDcAmt;
            refundAmt = orgAmt - repayAmt;
            cancelCpDcAmt += ((ordCpDcAmt + ordDupltCpDcAmt) - (sumOrdCpDcAmt + sumOrdDupltCpDcAmt));
            cancelPrmtDcAmt += ((ordPrmtDcAmt + ordDupltPrmtDcAmt) - (sumOrdPrmtDcAmt + sumOrdDupltPrmtDcAmt));
          }
          log.debug("=======  orgAmt4 : {}", orgAmt);
          log.debug("=======  repayAmt4 : {}", repayAmt);
          log.debug("=======  refundAmt4 : {}", refundAmt);
        }
      } else { // 전체취소
        Float orgAmt = 0f;
        Float repayAmt = 0f;
        if (po.getOrdDtlSeqArr() != null && po.getOrdDtlSeqArr().length > 0) {
          for (OrderGoodsVO vo : selectList) {
            // 원주문 금액
            if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
              orgAmt += (vo.getSaleAmt() * vo.getRemainQtt());
              if (!"03".equals(vo.getPrmtBnfCd1()) && !"08".equals(vo.getPrmtBnfCd3())) {
                orgAmt += (-vo.getGoodsPrmtDcAmt() - vo.getGoodsCpDcAmt());
              }
            }
            log.debug("==== vo.getAddOptAmt() : {}", vo.getAddOptAmt());
            log.debug("==== vo.getRemainAddOptQtt() : {}", vo.getRemainAddOptQtt());
            log.debug("==== vo.getAddOptClaimQtt() : {}", vo.getAddOptClaimQtt());
            orgAmt += (vo.getAddOptAmt() * vo.getAddOptClaimQtt());
          }
          log.debug("==== ordPrmtDcAmt : {}", ordPrmtDcAmt);
          log.debug("==== ordCpDcAmt : {}", ordCpDcAmt);
          log.debug("==== ordDupltPrmtDcAmt : {}", ordDupltPrmtDcAmt);
          log.debug("==== ordDupltCpDcAmt : {}", ordDupltCpDcAmt);
          orgAmt = orgAmt - ordPrmtDcAmt - ordCpDcAmt - ordDupltPrmtDcAmt - ordDupltCpDcAmt;
          refundAmt = orgAmt;
          cancelCpDcAmt += (ordCpDcAmt + ordDupltCpDcAmt);
          cancelPrmtDcAmt += (ordPrmtDcAmt + ordDupltPrmtDcAmt);
          if ("06".equals(ordPrmtKindCd)) {
            cancelCpCnt++;
            cancelCpAmt += ordCpDcAmt;
          }
          if ("06".equals(dupltPrmtKindCd)) {
            cancelCpCnt++;
            cancelCpAmt += ordDupltCpDcAmt;
          }
        }
        log.debug("=======  orgAmt5 : {}", orgAmt);
        log.debug("=======  repayAmt5 : {}", repayAmt);
        log.debug("=======  refundAmt5 : {}", refundAmt);
        log.debug("=======  ordPrmtDcAmt5 : {}", ordPrmtDcAmt);
        log.debug("=======  ordCpDcAmt5 : {}", ordCpDcAmt);
        log.debug("=======  ordDupltPrmtDcAmt5 : {}", ordDupltPrmtDcAmt);
        log.debug("=======  ordDupltCpDcAmt5 : {}", ordDupltCpDcAmt);
      }

      // 추가 배송비 결제 목록 조회
      String addRlsDlvrYn = "N"; // 추가 결제로 출고배송비 결제 여부
      String dlvrPartCancelYn = "N"; // 추가 배송비 부분취소 여부
      Float addDlvrPaymentAmt = 0f; // 추가 배송비 금액
      Float dlvrPartCancelAmt = 0f; // 부분취소할 금액
      Float dlvrRemainAmt = 0f; // 부분취소후 남은 금액
      String cancelDlvrOrdNo = "";
      OrderInfoVO orderInfoVO = new OrderInfoVO();
      orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      orderInfoVO.setSiteNo(po.getSiteNo());
      List<OrderPayVO> addPayList = selectOrderDlvrPayInfoList(orderInfoVO);
      if (addPayList != null && addPayList.size() > 0) {
        for (OrderPayVO payVO : addPayList) {
          if ("03".equals(payVO.getPaymentReasonCd())) { // 환불 추가배송비일 경우만
            if ("02".equals(payVO.getPaymentStatusCd()) && payVO.getDlvrAmt() > 2500f) {
              addRlsDlvrYn = "Y";
              addDlvrPaymentAmt = payVO.getPaymentAmt();
              dlvrPartCancelAmt = defaultDlvrMinDlvrc;
              dlvrRemainAmt = addDlvrPaymentAmt - dlvrPartCancelAmt;
              cancelDlvrOrdNo = payVO.getDlvrOrdNo();
            }
          }
        }
      }

      // 최종 결제 금액 확인
      for (OrderPayVO orderPayVO : orderPayList) {
        totAmt += (orderPayVO.getPaymentAmt());
        if ("01".equals(orderPayVO.getPaymentWayCd())) {
          orgPgAmt += 0f;
          orgReserveAmt += (orderPayVO.getPaymentAmt());
        } else {
          pgAmt += (orderPayVO.getPaymentAmt());
          orgPgAmt += (orderPayVO.getPaymentAmt());
          orgReserveAmt += 0f;
        }
        paymentTurn = orderPayVO.getPaymentTurn(); // 결제 차수
      }

      // 배송 전 일 경우 전체취소시 총 금액에 배송비,지역배송비, 쇼핑백 금액을 추가하여 환불
      Float orgPaymentAmt = (orgPgAmt + orgReserveAmt) - (realDlvrAmt + areaAddDlvrc + shoppingbagAmt);
      if (Float.compare(orgPaymentAmt, refundAmt) != 0) {
        pricePartCancelYn = "Y";
      }
      log.debug("========= dlvrYn : {}", dlvrYn);
      log.debug("========= partCancelYn : {}", partCancelYn);
      log.debug("========= refundAmt : {}", refundAmt);
      log.debug("========= areaAddDlvrc : {}", areaAddDlvrc);
      log.debug("========= shoppingbagAmt : {}", shoppingbagAmt);
      log.debug("========= pricePartCancelYn : {}", pricePartCancelYn);
      log.debug("========= orgPaymentAmt : {}", orgPaymentAmt);
      if ("N".equals(dlvrYn) && "N".equals(partCancelYn)) {
        if ("Y".equals(addRlsDlvrYn)) {
          refundAmt += (areaAddDlvrc + shoppingbagAmt);
          dlvrPartCancelYn = "Y";
        } else {
          refundAmt += (realDlvrAmt + areaAddDlvrc + shoppingbagAmt);
          cancelDlvrAmt = realDlvrAmt;
        }
        cancelAreaAddDlvrAmt = areaAddDlvrc;
        cancelShoppingbagAmt = shoppingbagAmt;
        dlvrChangeYn = false;
      }
      // 환불일경우 사유에 따라 쇼핑백 및 배송비 추가 환불
      if (!"N".equals(dlvrYn)) {
        if ("70".equals(po.getClaimGbCd()) || "90".equals(po.getClaimGbCd())) { // 환불신청, 환불완료
          if (!("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
              || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd()))) {
            if ("Y".equals(addRlsDlvrYn)) {
              refundAmt += (areaAddDlvrc + shoppingbagAmt);
              if ("N".equals(partCancelYn)) {
                dlvrPartCancelYn = "Y";
              }
            } else {
              if ("N".equals(partCancelYn)) {
                refundAmt += (realDlvrAmt + areaAddDlvrc + shoppingbagAmt);
                cancelDlvrAmt = realDlvrAmt;
              }
            }
            cancelShoppingbagAmt = shoppingbagAmt;
            cancelAreaAddDlvrAmt = areaAddDlvrc;
            dlvrChangeYn = false;
          }
        }
      }

      // 최종 배송비 추가 결제 여부 확인
      log.debug("========= refundAmt : {}", refundAmt);
      log.debug("========= defaultDlvrMinDlvrc : {}", defaultDlvrMinDlvrc);
      log.debug("========= dlvrChangeYn : {}", dlvrChangeYn);
      log.debug("========= adminYn : {}", po.getAdminYn());
      if (dlvrChangeYn) {
        if ("Y".equals(freeDlvrYn)) { // 무료배송 쿠폰/프로모션이 있으면
          dlvrChangeYn = false;
        } else { // 무료배송 쿠폰/프로모션이 없으면
          if (Float.compare(refundAmt, defaultDlvrMinDlvrc) < 0) {
            dlvrChangeYn = true;
          } else {
            if ("N".equals(dlvrYn)) {
              dlvrChangeYn = false;
              // 관리자 취소시 판매자 사유이면 환불금액에서 배송비 차감 제외
              if (!("Y".equals(po.getAdminYn())
                  && !("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
                      || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd())))) {
                log.debug("========= 요기요");
                refundAmt = refundAmt - defaultDlvrMinDlvrc;
                cancelAddDlvrAmt = defaultDlvrMinDlvrc;
              }
            }
          }
        }
      }
      // 환불 배송비 변경 여부 확인
      if ("Y".equals(preFreeDlvrYn)) {
        // 이전에 무료배송을 쓴적이 있으면 원본 배송비에서 배송비를 뺀다
        Float tmpDlvrAmt = orgDlvrPrice - areaAddDlvrc;
        orgDlvrPrice = orgDlvrPrice - tmpDlvrAmt;
      }
      if ("Y".equals(partCancelYn)) {
        if (Float.compare(realDlvrAmt, (orgDlvrPrice - areaAddDlvrc)) == 0) {
          if (realDlvrAmt > 0) {
            refundDlvrChangeYn = false;
          } else {
            if (Float.compare(realDlvrAmt, (dlvrPrice - areaAddDlvrc)) != 0) {
              refundDlvrChangeYn = true;
            } else {
              refundDlvrChangeYn = false;
            }
          }
        } else {
          refundDlvrChangeYn = true;
        }
      } else {
        if (realDlvrAmt > 0) {
          refundDlvrChangeYn = false;
        } else {
          refundDlvrChangeYn = true;
        }
      }
      log.debug("==== partCancelYn : {}", partCancelYn);
      log.debug("==== dlvrPrice : {}", dlvrPrice);
      log.debug("==== realDlvrAmt : {}", realDlvrAmt);
      log.debug("==== orgDlvrPrice : {}", orgDlvrPrice);
      log.debug("==== refundDlvrChangeYn : {}", refundDlvrChangeYn);

      // 관리자 취소시 환불 사유에 따른 배송비 차감
      Float refundDlvrAmt = 0f;
      Float rlsDlvrAmt = 0f;
      Float refundAreaAddDlvrc = 0f;
      if ("Y".equals(po.getAdminYn()) && po.getClaimTurn() != null) {
        // 추가 배송비 결제 정보 조회
        orderInfoVO = new OrderInfoVO();
        orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderInfoVO.setSiteNo(po.getSiteNo());
        orderInfoVO.setClaimTurn(po.getClaimTurn());
        OrderPayVO addPayVO = selectOrderDlvrPayInfo(orderInfoVO);
        if (addPayVO == null) {
          if (("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
              || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd()))) {
            if (refundDlvrChangeYn) {
              refundAmt = refundAmt - ((defaultDlvrMinDlvrc * 2) + areaAddDlvrc);
              refundDlvrAmt = defaultDlvrMinDlvrc;
              rlsDlvrAmt = defaultDlvrMinDlvrc;
              refundAreaAddDlvrc = areaAddDlvrc;
            } else {
              refundAmt = refundAmt - (defaultDlvrMinDlvrc + areaAddDlvrc);
              refundDlvrAmt = defaultDlvrMinDlvrc;
              rlsDlvrAmt = 0f;
              refundAreaAddDlvrc = areaAddDlvrc;
            }
          }
        }
      }

      restAmt = totAmt - refundAmt;
      if (Float.compare(pgAmt, refundAmt) < 0) {
        payReserveAmt = refundAmt - pgAmt;
      } else if (Float.compare(pgAmt, refundAmt) == 0) {
        payReserveAmt = 0f;
      } else {
        pgAmt = refundAmt;
        payReserveAmt = 0f;
      }

      // 이니시스 부분 취소 여부 확인 START
      String inicisPartCancelYn = "N";
      log.debug("======== paymentTurn : {}", paymentTurn);
      if (!"1".equals(paymentTurn) || Float.compare(pgAmt, orgPgAmt) != 0) {
        inicisPartCancelYn = "Y";
      }
      log.debug("===== 이니시스 부분 취소 여부(inicisPartCancelYn) : {}", inicisPartCancelYn);
      log.debug("===== 금액 부분 취소 여부(pricePartCancelYn) : {}", pricePartCancelYn);
      // 이니시스 부분 취소 여부 확인 END

      // 예상환불 내역 데이터 셋팅 start
      orderVO.setOrdNo(po.getOrdNo());
      orderVO.setDlvrChangeYn(dlvrChangeYn); // 배송비 변경 여부
      orderVO.setRefundDlvrChangeYn(refundDlvrChangeYn); // 환불 배송비 변경 여부
      orderVO.setRefundAmt(refundAmt); // 환불 금액
      orderVO.setTotAmt(totAmt); // 환불전 최종 결제 금
      orderVO.setRestAmt(restAmt); // 취소후 남은 금액
      orderVO.setOrgReserveAmt(orgReserveAmt); // 원본 포인트 금액
      orderVO.setPayReserveAmt(payReserveAmt); // 취소 포인트 금액
      orderVO.setOrgPgAmt(orgPgAmt); // 원본 PG금액
      orderVO.setPgAmt(pgAmt); // 취소 PG 금액
      orderVO.setPartCancelYn(partCancelYn); // 부분 취소 여부
      orderVO.setPricePartCancelYn(pricePartCancelYn); // 금액 부분 취소 여부
      orderVO.setDlvrYn(dlvrYn); // 배송전 여부(취소 or 환불)
      orderVO.setPaymentTurn(paymentTurn); // 결제 차수
      orderVO.setInicisPartCancelYn(inicisPartCancelYn); // 이니시스 부분취소 여부
      orderVO.setCancelAddDlvrAmt(cancelAddDlvrAmt); // 취소 배송비 차감 금액
      orderVO.setCancelCpCnt(cancelCpCnt); // 취소된 쿠폰 수량
      orderVO.setCancelCpAmt(cancelCpAmt); // 취소된 쿠폰 금액
      orderVO.setCancelGoodsAmt(cancelGoodsAmt); // 취소 상품 금액
      orderVO.setCancelCpDcAmt(cancelCpDcAmt); // 할인 쿠폰 취소 금액
      orderVO.setCancelPrmtDcAmt(cancelPrmtDcAmt); // 할인 프로모션 취소 금액
      orderVO.setCancelPresentAmt(cancelPresentAmt); // 선물포장 환불금액
      orderVO.setCancelSuitcaseAmt(cancelSuitcaseAmt); // suitcase 환불금액
      orderVO.setCancelShoppingbagAmt(cancelShoppingbagAmt); // 쇼핑백 환불금액
      orderVO.setCancelDlvrAmt(cancelDlvrAmt); // 배송비 환불금액
      orderVO.setCancelAreaAddDlvrAmt(cancelAreaAddDlvrAmt); // 지역추가배송비 환불금액
      orderVO.setRefundDlvrAmt(refundDlvrAmt); // 차감 반품배송비
      orderVO.setRlsDlvrAmt(rlsDlvrAmt); // 차감 출고배송비
      orderVO.setRefundAreaAddDlvrc(refundAreaAddDlvrc); // 차감 반품 지역배송비
      if ("Y".equals(ordPrmtBrokenYn)) {
        orderVO.setCancelOrdPrmtNo(ordPrmtNo); // 취소 주문 프로모션
      }
      if ("Y".equals(dupltPrmtBrokenYn)) {
        orderVO.setCancelDupltPrmtNo(dupltPrmtNo); // 취소 주문 중복 프로모션
      }
      orderVO.setCancelGoodsPrmtInfo(cancelGoodsPrmtList); // 취소 상품 프로모션
      // 취소 일반 사은품 정보
      // 1.상품 사은품
      List<OrderGoodsVO> cancelFreebieList = new ArrayList<>();
      if (cancelGoodsPrmtList != null && cancelGoodsPrmtList.size() > 0) {
        for (OrderGoodsVO cVO : cancelGoodsPrmtList) {
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(cVO.getGoodsPrmtNo());
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("04".equals(prmtVO.getPrmtBnfCd2()) && "08".equals(prmtVO.getPrmtBnfCd3())) {
            OrderSO cSO = new OrderSO();
            cSO.setOrdNo(Long.toString(po.getOrdNo()));
            cSO.setPrmtNo(prmtVO.getPrmtNo());
            cSO.setPrmtGrpNo(cVO.getPrmtGrpNo());
            List<OrderGoodsVO> freebieList = selectCancelFreebieList(cSO);
            for (OrderGoodsVO freebieVO : freebieList) {
              cancelFreebieList.add(freebieVO);
            }
          }
        }
      }
      if (orderVO.getCancelOrdPrmtNo() != null && orderVO.getCancelOrdPrmtNo() > 0) {
        PromotionSO promotionSO = new PromotionSO();
        promotionSO.setPrmtNo(orderVO.getCancelOrdPrmtNo());
        PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
        if ("04".equals(prmtVO.getPrmtBnfCd2()) && "08".equals(prmtVO.getPrmtBnfCd3())) {
          OrderSO cSO = new OrderSO();
          cSO.setOrdNo(Long.toString(po.getOrdNo()));
          cSO.setPrmtNo(prmtVO.getPrmtNo());
          List<OrderGoodsVO> freebieList = selectCancelFreebieList(cSO);
          for (OrderGoodsVO freebieVO : freebieList) {
            cancelFreebieList.add(freebieVO);
          }
        }
      }
      orderVO.setCancelFreebieList(cancelFreebieList);

      orderVO.setAddDlvrPaymentAmt(addDlvrPaymentAmt); // 추가배송비 결제금액
      orderVO.setDlvrPartCancelAmt(dlvrPartCancelAmt); // 추가배송비 부분취소할 금액
      orderVO.setDlvrRemainAmt(dlvrRemainAmt); // 추가배송비 부분취소후 남은금액
      orderVO.setCancelDlvrOrdNo(cancelDlvrOrdNo); // 추가배송비 취소 배송주문번호
      orderVO.setDlvrPartCancelYn(dlvrPartCancelYn); // 추가배송비 부분취소 여부

      orderVO.setOrderInfoVO(orgOrdInfoVo); // 주문 기본 정보(최초)
      orderVO.setNewOrderInfoVO(orgOrdInfoVo); // 원본 주문 기본 정보(재주문 때문에 추가)
      orderVO.setReOrderGoodsVO(refundList); // 재주문 상품정보
      orderVO.setOrderGoodsVO(orgGoodsList); // 원본 상품 정보
      orderVO.setOrgOrderGoodsVO(orgGoodsList); // 원본 상품 정보(재주문 때문에 추가)
      orderVO.setOrderPayVO(orgOrdPayList); // 최초 결제 정보
      // 예상환불 내역 데이터 셋팅 end

      log.debug(" ======= 이니시스 부분취소 여부 : {}", inicisPartCancelYn);
      log.debug(" ======= 부분취소 여부 : {}", partCancelYn);
      log.debug(" ======= 금액 부분취소 여부 : {}", pricePartCancelYn);
      log.debug(" ======= 총 결제금액(최종) : {}", totAmt);
      log.debug(" ======= 환불금액 : {}", refundAmt);
      log.debug(" ======= 취소 후 남은금액 : {}", restAmt);
      log.debug(" ======= 원본 PG 금액 : {}", orgPgAmt);
      log.debug(" ======= PG 금액 : {}", pgAmt);
      log.debug(" ======= 원본 포인트 금액 : {}", orgReserveAmt);
      log.debug(" ======= 포인트 금액 : {}", payReserveAmt);
      log.debug(" ======= 3만원 미만 배송비 추가 금액 : {}", cancelAddDlvrAmt);
      log.debug(" ======= 사유 코드 : {}", po.getClaimReasonCd());
      log.debug(" ======= 상세 사유 : {}", po.getClaimDtlReason());
      log.debug(" ======= 쿠폰 취소 수량 : {}", cancelCpCnt);
      log.debug(" ======= 쿠폰 취소 금액(깨진경우) : {}", cancelCpAmt);
      log.debug(" ======= 쿠폰 취소 할인금액(깨진경우+재계산) : {}", cancelCpDcAmt);
      log.debug(" ======= 프로모션 취소 할인금액(깨진경우+재계산) : {}", cancelPrmtDcAmt);
      log.debug(" ======= 무료배송 쿠폰/프로모션 여부 : {}", freeDlvrYn);
      log.debug(" ======= 깨진 주문 쿠폰/프로모션 : {}", orderVO.getCancelOrdPrmtNo());
      log.debug(" ======= 깨진 주문 중복 쿠폰/프로모션 : {}", orderVO.getCancelDupltPrmtNo());
      // }
    } catch (

    Exception e) {
      e.printStackTrace();
      log.debug("{}", e.getMessage());
    }
    return orderVO;
  }

  /**
   * 주문정보 등록 table : TO_ORD
   */
  @Override
  public ResultModel<OrderInfoPO> updateOrderInfo(OrderInfoPO po) throws Exception {
    ResultModel<OrderInfoPO> result = new ResultModel<>();
    // 주문정보 수정 Biz실행
    try {
      proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrderInfo", po);
    } catch (Exception e) {
      throw new Exception(e);
    }
    return result;
  }

  /**
   *
   * <pre>
   * 작성일 : 2016. 9. 13.
   * 작성자 : Gongi
   * 설명   : 주문테이블의 전체 구매 확정 처리 ( 주문 마스터 )
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2016. 9. 13. Gongi - 최초생성
   * 2017. 12. 19. zouki - 구매 확정시 적립금 지급 ( 주문상세로 변경 )
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  @Override
  public ResultModel<OrderInfoVO> updateOrdStatusCdConfirm(OrderGoodsVO vo) throws Exception {

    ResultModel<OrderInfoVO> result = new ResultModel<>();

    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatusCdConfirm", vo);

    if (cnt > 0) {

      // 구매확정배치 때문에 회원번호를 주문정보에서 조회
      OrderInfoVO infoVO = new OrderInfoVO();
      OrderSO so = new OrderSO();
      so.setOrdNo(vo.getOrdNo());
      infoVO = this.selectBeforePayOrdInfo(so);

      // 프로모션 포인트 증정
      Float amt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectPrmtPvdPointAmt", vo);

      if (amt > 0) {
        Long siteNo = (!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo();
        Integer partnerNo = (!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : siteService.getPartnerNo();
        SiteVO siteVO = cacheService.selectBasicInfo(siteNo, partnerNo);
        String validPeriod = DateUtil.getNowDate();
        if (siteVO.getSvmnUseLimitday() > 0) {
          validPeriod = DateUtil.addMonths(validPeriod, siteVO.getSvmnUseLimitday());
        }

        // 적립금 사용 정보 등록
        SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
        savedmnPointPO.setSiteNo(vo.getSiteNo());
        savedmnPointPO.setOrdNo(vo.getOrdNo());
        savedmnPointPO.setGbCd("10"); // 지급
        if (siteVO.getSvmnUseLimitday() > 0) {
          savedmnPointPO.setEtcValidPeriod(validPeriod); // 유효기간
        } else {
          savedmnPointPO.setEtcValidPeriod("99991231"); // 유효기간
        }
        savedmnPointPO.setMemberNo(infoVO.getMemberNo()); // 회원번호
        savedmnPointPO.setTypeCd("A"); // 유형코드(A:자동, M:수동)
        savedmnPointPO.setReasonCd("08"); // 사유코드( 프로모션 포인트 적립 )
        savedmnPointPO.setEtcReason(""); // 기타사유
        savedmnPointPO.setPrcAmt(amt);
        savedmnPointPO.setSvmnUsePsbYn("Y"); // 적립금 사용 가능 여부
        savedMnPointService.insertSavedMn(savedmnPointPO);
      }

      // 프로모션 쿠폰 증정 ( 상품프로모션 확인 )
      List<OrderGoodsVO> couponList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectGoodsPrmtList", vo);
      for (OrderGoodsVO couponVo : couponList) {
        // 회원 가입 쿠폰 발행
        PromotionPO promotionPO = new PromotionPO();
        promotionPO.setMemberNo(infoVO.getMemberNo());
        promotionPO.setSpecialCouponCd("00"); // 일반 쿠폰
        promotionPO.setPrmtNo(couponVo.getCouponNo()); // 프로모션 번호
        promotionPO.setPrmtCouponType("01"); // 수동
        promotionPO.setPrmtTargetCd("03"); // 개별
        promotionService.insertMemberCoupon(promotionPO);
        log.debug("상품 프로모션 쿠폰발급 ok");
      }

      // 프로모션 쿠폰 증정 ( 주문 프로모션 확인 )
      List<OrderGoodsVO> couponList2 = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdPrmtList", vo);
      for (OrderGoodsVO couponVo2 : couponList2) {
        // 회원 가입 쿠폰 발행
        PromotionPO promotionPO = new PromotionPO();
        promotionPO.setMemberNo(infoVO.getMemberNo());
        promotionPO.setSpecialCouponCd("00"); // 일반 쿠폰
        promotionPO.setPrmtNo(couponVo2.getCouponNo()); // 프로모션 번호
        promotionPO.setPrmtCouponType("01"); // 수동
        promotionPO.setPrmtTargetCd("03"); // 개별
        promotionService.insertMemberCoupon(promotionPO);
        log.debug("주문프로모션 쿠폰발급 ok");
      }
    }
    result.setMessage(MessageUtil.getMessage("biz.common.update"));
    return result;
  }

  /**
   * 현재 결제완료 주문상태 확인
   */
  @Override
  public ResultModel<OrderVO> partCancelStatusOrderCount(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "partCancelStatusOrderCount", so);
    result.setData(vo);
    return result;
  }

  /**
   * 부분 취소 결제 정보 등록 table : TO_PAYMENT
   */
  @Override
  public ResultModel<PaymentModel<?>> insertPartCancelOrderPay(PaymentModel po) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // 결제 정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertPartCancelOrderPay", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 부분 취소 결제 정보 등록 table : TO_PAYMENT
   */
  @Override
  public ResultModel<PaymentModel<?>> insertPartCancelDlvrPay(PaymentModel po) throws Exception {
    ResultModel<PaymentModel<?>> result = new ResultModel<>();
    // 배송비 결제 정보 등록 Biz실행
    try {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertPartCancelDlvrPay", po);
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
    return result;
  }

  /**
   * 주문취소/교환/환불 내역 상세 정보 조회 table : TO_ORD_DTL
   */
  public OrderVO orderCancelDtlInfo(OrderSO vo) {
    OrderVO rVo = new OrderVO();
    // 기본 정보
    OrderInfoVO orderInfoVo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "orderCancelDtlInfo", vo);
    orderInfoVo = selectOrdStatusForward(orderInfoVo);
    orderInfoVo = selectOrdStatusBackward(orderInfoVo, "Y");
    orderInfoVo.setSiteNo(vo.getSiteNo());

    // 결제 정보
    List<OrderPayVO> payVo = selectOrderPayInfoList(orderInfoVo);
    // 배송 정보 조회
    DeliveryVO delivVo = new DeliveryVO();
    delivVo.setOrdNo(vo.getOrdNo());
    List<DeliveryVO> deliveryVOList = deliveryService.selectOrdDtlDelivery(delivVo);
    // 상품 정보
    List<OrderGoodsVO> goodsList = selectOrdDtlList(orderInfoVo);
    List<OrderGoodsVO> newGoodsList = new ArrayList<OrderGoodsVO>();

    for (OrderGoodsVO gvo : goodsList) {
      // 01.상품기본정보 조회
      GoodsDetailSO so = new GoodsDetailSO();
      so.setGoodsNo(gvo.getGoodsNo());
      // so.setItemNo(gvo.getItemNo());
      ResultModel<GoodsDetailVO> goodsInfo = goodsManageService.selectGoodsInfo(so);

      try {
        // 02.단품정보
        String jsonList = "";
        if (goodsInfo.getData().getGoodsItemList() != null) {
          ObjectMapper mapper = new ObjectMapper();
          jsonList = mapper.writeValueAsString(goodsInfo.getData().getGoodsItemList());
        }
        gvo.setJsonList(jsonList);
      } catch (Exception e) {
        log.debug("{}", e.getMessage());
      }
      gvo.setGoodsOptionList(goodsInfo.getData().getGoodsOptionList());
      gvo.setGoodsSetYn("N");
      // 세트 상품
      if (gvo.getGoodsSetNo() != null && !"".equals(gvo.getGoodsSetNo())) {
        gvo.setGoodsSetYn("Y");
        List<OrderGoodsVO> goodsSetList = new ArrayList<>();
        goodsSetList = selectOrdGoodsSetList(gvo);
        gvo.setGoodsSetList(goodsSetList);
      }
      newGoodsList.add(gvo);
    }

    // 부가 비용 목록
    List<OrderGoodsVO> ordAddedAmountList = selectAddedAmountList(orderInfoVo);
    // 처리 로그 정보
    List<OrderGoodsVO> ordHistVOList = selectOrdDtlHistList(orderInfoVo);
    // 클레임 이력
    List<ClaimGoodsVO> ordClaimList = selectClaimList(orderInfoVo);

    rVo.setOrderInfoVO(orderInfoVo);
    rVo.setOrderPayVO(payVo);
    rVo.setDeliveryVOList(deliveryVOList);
    rVo.setOrderGoodsVO(newGoodsList);
    rVo.setOrdAddedAmountList(ordAddedAmountList);
    rVo.setOrdHistVOList(ordHistVOList);
    rVo.setOrdClaimList(ordClaimList);
    return rVo;
  }

  /**
   * 모바일 결제 프로세스
   */
  @Override
  public ResultModel<OrderPO> orderPaymentMobile(OrderPO po, HttpServletRequest request, Map<String, Object> reqMap,
      ModelAndView mav) throws Exception {
    ResultModel<OrderPO> result = new ResultModel<>();
    PaymentModel<?> payResult = new PaymentModel<>();

    // step01. pg결제 처리
    boolean paymentByMileage = false;// 적립금만으로 주문여부

    try {
      if (po.getPaymentAmt() > 0) {
        log.debug("=== orderPO.orderPayPO : {}", po.getOrderPayPO());
        payResult = paymentService.pgPaymentMobile(po.getOrderPayPO(), reqMap, mav).getData();
        // 중복매핑되는 변수들은 if else 밖에둔다
        log.debug("=== orderPO : {}", po);
        log.debug("=== payResult : {}", payResult);
        payResult.setPaymentStatusCd("02"); // 상태코드(완료)
      } else {
        paymentByMileage = true;
      }
      // 공통 변수 세팅
      payResult.setSiteNo(po.getSiteNo());
      payResult.setPartnerNo(po.getPartnerNo());
      payResult.setOrdNo(po.getOrdNo());
      payResult.setPaymentTurn("1");
      payResult.setMemberNo(Long.toString(po.getOrderInfoPO().getMemberNo()));
      payResult.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
      payResult.setRegDttm(po.getRegDttm());
    } catch (Exception e) {
      log.error("PG PAYMENT ERROR : {}", e.getCause(), e);
      ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
      err_result.setMessage("PG 통신중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    try {
      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
      Date today = po.getRegDttm();
      String todayString = df.format(today);
      log.debug("======== payResult.getConfirmResultCd() : {}", payResult.getConfirmResultCd());
      if (paymentByMileage
          || (("00".equals(payResult.getConfirmResultCd()) || "0000".equals(payResult.getConfirmResultCd())))) {
        // step02.결제정보 등록 Biz실행(PG)
        if (!paymentByMileage) {
          payResult.setConfirmResultCd("00");
          payResult.setPaymentTurn("1");
          // 가상계좌일경우 입금자명에 주문자명 세팅
          if ("22".equals(payResult.getPaymentWayCd())) {
            payResult.setDpsterNm("");
            payResult.setPaymentStatusCd("01"); // 상태코드(접수)
          }
          this.insertOrderPay(payResult);
        }

        // step03.결제정보 등록 Biz실행(적립금)
        if (po.getMileageTotalAmt() > 0) {
          String txNo = payResult.getTxNo();
          String confirmNo = payResult.getConfirmNo();
          String confirmResultCd = payResult.getConfirmResultCd();
          String confirmResultMsg = payResult.getConfirmResultCd();
          String cardCd = payResult.getCardCd();
          String instmntMonth = payResult.getInstmntMonth();
          String bankCd = payResult.getBankCd();
          String paymentPgCd = payResult.getPaymentPgCd();

          payResult.setOrdNo(po.getOrdNo());
          payResult.setPaymentPgCd("00"); // PG코드(내부)
          payResult.setPaymentWayCd("01"); // 결제 수단 코드(적립금)
          if (payResult.getPaymentCmpltDttm() == null) {
            payResult.setPaymentCmpltDttm(todayString); // 결제 완료 일시
          }
          payResult.setPaymentStatusCd("02"); // 상태코드(완료)
          payResult.setPaymentAmt(Float.toString(po.getMileageTotalAmt())); // 결제금액
          payResult.setTxNo(null);
          payResult.setConfirmNo(null);
          payResult.setConfirmResultCd(null);
          payResult.setConfirmResultMsg(null);
          payResult.setCardCd(null);
          payResult.setInstmntMonth(null);
          payResult.setBankCd(null);
          this.insertOrderPay(payResult);

          // 등록 후 재셋팅
          payResult.setTxNo(txNo);
          payResult.setConfirmNo(confirmNo);
          payResult.setConfirmResultCd(confirmResultCd);
          payResult.setConfirmResultMsg(confirmResultMsg);
          payResult.setCardCd(cardCd);
          payResult.setInstmntMonth(instmntMonth);
          payResult.setBankCd(bankCd);
          payResult.setPaymentPgCd(paymentPgCd);

          // 적립금 사용 정보 등록
          SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
          savedmnPointPO.setSiteNo(po.getSiteNo());
          savedmnPointPO.setOrdNo(Long.toString(po.getOrdNo()));
          savedmnPointPO.setGbCd("20"); // 차감
          savedmnPointPO.setOrdCanselYn("N"); // 일반차감
          savedmnPointPO.setMemberNo(po.getRegrNo()); // 회원번호
          savedmnPointPO.setTypeCd("M"); // 유형코드(A:자동, M:수동)
          savedmnPointPO.setReasonCd("03"); // 사유코드(상품구매)
          savedmnPointPO.setEtcReason(""); // 기타사유
          savedmnPointPO.setDeductGbCd("01"); // 차감구분코드(사용)
          savedmnPointPO.setClaimTurn(0); // 클레임 차수
          savedmnPointPO.setPrcAmt(po.getMileageTotalAmt());
          savedmnPointPO.setNoRollback(po.getNoRollback());
          savedMnPointService.insertSavedMn(savedmnPointPO);
        }

        // step04.쿠폰 사용 정보 등록
        OrderInfoVO infoVO = new OrderInfoVO();
        infoVO.setOrdNo(Long.toString(po.getOrdNo()));
        List<OrderGoodsVO> amountList = selectAddedAmountAllList(infoVO);
        if (amountList != null && amountList.size() > 0) {
          List<CouponPO> couponList = new ArrayList<>();
          for (OrderGoodsVO vo : amountList) {
            if ("02".equals(vo.getAddedAmountGbCd()) || "04".equals(vo.getAddedAmountGbCd())) {
              int memberCpNo = vo.getMemberCpNo();
              CouponPO couponPO = new CouponPO();
              couponPO.setSiteNo(po.getSiteNo());
              couponPO.setMemberCpNo(memberCpNo);
              couponPO.setOrdNo(po.getOrdNo());
              couponPO.setUseYn("Y");
              couponPO.setUseDttm(today);
              couponPO.setUpdrNo(po.getRegrNo() == null ? 0 : po.getRegrNo());
              couponPO.setUpdDttm(today);
              couponList.add(couponPO);
            }
          }
          // 회원 쿠폰 사용 정보 등록
          couponService.updateMemberUseCoupon(couponList);
        }

        String billYn = (String) reqMap.get("bill_yn"); // N:발급안함,Y:계산서
        log.debug("===billYn : {}", billYn);
        if ("Y".equals(billYn)) { // 계산서
          log.debug("=== 계산서 발행 ===");
          SalesProofPO billPO = new SalesProofPO();
          billPO.setOrdNo(po.getOrdNo());
          billPO.setTaxBillStatusCd("01"); // 상태코드(01:접수,02:승인,03:오류)
          billPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
          billPO.setMemberNo(po.getRegrNo());
          billPO.setCompanyNm((String) reqMap.get("billCompanyNm")); // 업체명
          billPO.setBizNo((String) reqMap.get("billBizNo")); // 사업자번호
          billPO.setCeoNm((String) reqMap.get("billCeoNm")); // 대표자명
          billPO.setBsnsCdts((String) reqMap.get("billBsnsCdts")); // 업태
          billPO.setItem((String) reqMap.get("billItem")); // 종목
          billPO.setPostNo((String) reqMap.get("billPostNo")); // 우편번호
          billPO.setRoadnmAddr((String) reqMap.get("billRoadnmAddr")); // 도로명주소
          billPO.setDtlAddr((String) reqMap.get("billDtlAddr")); // 상세주소
          billPO.setTotAmt(po.getPaymentAmt() + po.getMileageTotalAmt()); // 총금액
          billPO.setManagerNm((String) reqMap.get("billManagerNm")); // 담당자
          billPO.setEmail((String) reqMap.get("billEmail")); // 이메일
          billPO.setTelNo((String) reqMap.get("billTelNo")); // 연락처
          billPO.setAcceptDttm(po.getRegDttm()); // 접수일시
          billPO.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo()); // 등록자
          billPO.setRegDttm(po.getRegDttm()); // 등록일자
          salesProofService.insertTaxBill(billPO);
        } else if ("N".equals(billYn)) {
          if ("Y".equals(payResult.getCashRctYn())) {
            log.debug("=== 현금영수증 발행 ===");
            SalesProofPO cashPO = new SalesProofPO();
            cashPO.setOrdNo(po.getOrdNo());
            cashPO.setCashRctStatusCd("02"); // 상태코드(01:접수,02:승인,03:오류)
            cashPO.setApplicantGbCd("01"); // 신청자구분코드 (01:구매자, 02:관리자)
            cashPO.setMemberNo(po.getRegrNo());
            cashPO.setUseGbCd(payResult.getUseGbCd()); // 사용구분코드(01:소득공제,02:지출증빙)
            cashPO.setIssueWayCd(payResult.getIssueWayCd()); // 발급수단코드(01:주민등록번호,02:휴대폰,03:사업자등록번호)
            cashPO.setIssueWayNo(payResult.getIssueWayNo()); // 발급수단번호
            cashPO.setTotAmt(po.getPaymentAmt()); // 총금액
            cashPO.setFreeAmt(0F); // TODO: 면세금액 처리
            cashPO.setAcceptDttm(po.getRegDttm()); // 접수일시
            cashPO.setLinkTxNo(payResult.getLinkTxNo());
            cashPO.setApplicantNm(po.getOrderInfoPO().getOrdrNm()); // 신청자명
            cashPO.setRegrNo(po.getRegrNo() == null ? 0 : po.getRegrNo()); // 등록자
            cashPO.setRegDttm(po.getRegDttm()); // 등록일자
            salesProofService.insertCashRct(cashPO);
          }
        }

        // 결제완료 처리
        // step05.상품테이블 수정(재고변경)- 입금대기 주문의 경우 결제 완료시점에 재고 차감처리
        this.updateGoodsStock(po.getOrderGoodsPO());
        // step06.주문상태 수정
        OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
        orderGoodsVO.setSiteNo(po.getSiteNo());
        orderGoodsVO.setPartnerNo(po.getPartnerNo());
        orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderGoodsVO.setOrdStatusCd("20"); // 결제완료
        orderGoodsVO.setDlvrcPaymentCd(po.getDlvrcPaymentCd());
        orderGoodsVO.setStoreYn(po.getOrderInfoPO().getStoreYn());
        String curOrdStatusCd = "01"; // 주문접수(현재)
        if (SessionDetailHelper.getDetails().isLogin()) {
          orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
        }

        if (po.getOrderGoodsPO() != null) {
          if (po.getOrderGoodsPO().size() == 1) {
            orderGoodsVO.setGoodsNm(po.getOrderGoodsPO().get(0).getGoodsNm());
          } else {
            orderGoodsVO
                .setGoodsNm(po.getOrderGoodsPO().get(0).getGoodsNm() + " 외 " + (po.getOrderGoodsPO().size() - 1) + "건");
          }
        }

        if (paymentByMileage) { // 적립금 결제일 경우 결제완료일시 동기화 ( 주문, 결제 )
          orderGoodsVO.setPaymentCmpltDttm(todayString); // 결제 완료 일시
        } else { // PG결제일 경우 넘어온 데이터 셋팅
          orderGoodsVO.setPaymentCmpltDttm(payResult.getPaymentCmpltDttm()); // 결제 완료 일시
        }
        this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);

        // 매출 정산 테이블 처리(TO_SALES_ACCOUNT)
        OrderPO op = new OrderPO();
        op.setSiteNo(po.getSiteNo());
        op.setOrdNo(po.getOrdNo());
        op.setClaimGbCd("20"); // 신규주문
        op.setRegDt(payResult.getPaymentCmpltDttm());
        orderSalesAccountProcess(op);

        // 장바구니 삭제
        List<String> itemNoList = new ArrayList();
        List<Long> basketNoArr = new ArrayList();
        BasketSO basketSO = new BasketSO();
        log.debug(" === 로그인 여부 : {}", SessionDetailHelper.getDetails().isLogin());
        if (SessionDetailHelper.getDetails().isLogin()) { // 회원
          long memberNo = SessionDetailHelper.getDetails().getSession().getMemberNo();
          for (int i = 0; i < po.getOrderGoodsPO().size(); i++) {
            OrderGoodsPO orderGoodsPO = (OrderGoodsPO) po.getOrderGoodsPO().get(i);
            basketSO = new BasketSO();
            basketSO.setSiteNo(po.getSiteNo());
            basketSO.setMemberNo(memberNo);
            basketSO.setItemNo(orderGoodsPO.getItemNo());
            basketSO.setBuyQtt(orderGoodsPO.getOrdQtt());
            basketSO.setStoreNo(orderGoodsPO.getStoreNo());
            List<BasketVO> basketVO = frontBasketService.selectBasketByItemNo(basketSO);
            if (basketVO != null) {
              for (BasketVO bvo : basketVO) {
                basketNoArr.add(bvo.getBasketNo());
              }
            }
          }
          if (basketNoArr.size() > 0) {
            Long[] delBasketNoArr = basketNoArr.toArray(new Long[basketNoArr.size()]);
            BasketPO deletePO = new BasketPO();
            deletePO.setSiteNo(po.getSiteNo());
            deletePO.setDelrNo(memberNo);
            deletePO.setDelBasketNoArr(delBasketNoArr);
            frontBasketService.deleteBasket(deletePO);
          }

        } else { // 비회원
          HttpSession session = request.getSession();
          List<BasketSessionPO> basketSession = (List<BasketSessionPO>) session
              .getAttribute(CommonConstants.BASKET_SESSION_ID);
          if (basketSession != null && basketSession.size() > 0) {
            for (int i = 0; i < po.getOrderGoodsPO().size(); i++) {
              OrderGoodsPO orderGoodsPO = (OrderGoodsPO) po.getOrderGoodsPO().get(i);
              for (int k = 0; k < basketSession.size(); k++) {
                BasketSessionPO sessionPO = (BasketSessionPO) basketSession.get(k);
                if (orderGoodsPO.getItemNo().equals(sessionPO.getItemNo())
                    && orderGoodsPO.getOrdQtt() == sessionPO.getBuyQtt()) {
                  if (orderGoodsPO.getStoreNo() != null && !"".equals(orderGoodsPO.getStoreNo())) {
                    if (orderGoodsPO.getStoreNo().equals(sessionPO.getStoreNo())) {
                      basketNoArr.add(new Long(k));
                    }
                  } else {
                    if (sessionPO.getStoreNo() == null || "".equals(sessionPO.getStoreNo())) {
                      basketNoArr.add(new Long(k));
                    }
                  }
                }
              }
            }

            // 중복 제거
            List<Long> newbasketNoArr = new ArrayList<Long>();
            if (basketNoArr.size() > 0) {
              for (int i = 0; i < basketNoArr.size(); i++) {
                if (!newbasketNoArr.contains(basketNoArr.get(i))) {
                  newbasketNoArr.add(basketNoArr.get(i));
                }
              }
            }
            if (newbasketNoArr.size() > 0) {
              Long[] delBasketNoArr = newbasketNoArr.toArray(new Long[newbasketNoArr.size()]);
              BasketPO deletePO = new BasketPO();
              deletePO.setSiteNo(po.getSiteNo());
              deletePO.setDelBasketNoArr(delBasketNoArr);
              frontBasketService.deleteBasket(deletePO, request);
            }
          }
          basketSession = (List<BasketSessionPO>) session.getAttribute(CommonConstants.BASKET_SESSION_ID);
          if (basketSession != null && basketSession.size() == 0) {
            session.removeAttribute(CommonConstants.BASKET_SESSION_ID);
          }
        }

        result.setSuccess(true);
      } else {
        // 결제 실패 처리(로그?)
        OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
        orderGoodsVO.setSiteNo(po.getSiteNo());
        orderGoodsVO.setPartnerNo(po.getPartnerNo());
        orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderGoodsVO.setOrdStatusCd("22"); // 결제실패
        OrderGoodsVO curVo = selectCurOrdStatus(orderGoodsVO);
        String curOrdStatusCd = curVo.getOrdStatusCd(); // 현재 상태
        if (SessionDetailHelper.getDetails().isLogin()) {
          orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
        }
        this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);

        log.error("주문 결제 실패 에러[{}:{}]", payResult.getConfirmResultCd(), payResult.getConfirmResultMsg());
        ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
        // PG 결제오류 코드, 메시지 세팅
        String msg = "오류코드 : " + payResult.getConfirmResultCd();
        if (payResult.getConfirmResultCd() != null || !StringUtil.isEmpty(payResult.getConfirmResultCd().trim())) {
          msg += "<br/>오류메시지 : " + payResult.getConfirmResultMsg();
        }
        err_result.setMessage(msg);
        err_result.setSuccess(false);
        return err_result;
      }
    } catch (Exception e) {
      log.error("주문 결제 등록 에러 : {}", e.getMessage(), e);
      log.error("==== 결제 롤백(취소) start");
      log.error("==== payResult.getPaymentPgCd : {}", payResult);
      if (!paymentByMileage) { // 적립금만으로 결제가 아닐때만
        payResult.setPartCancelYn("N"); // Y:부분취소, N:전체취소
        payResult.setOrdStatusCd("01");
        payResult = paymentService.pgPaymentCancel(payResult).getData();
      }

      // 주문상태 수정(실패)
      OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
      orderGoodsVO.setSiteNo(po.getSiteNo());
      orderGoodsVO.setOrdNo(Long.toString(po.getOrdNo()));
      orderGoodsVO.setOrdStatusCd("22"); // 결제실패
      String curOrdStatusCd = "01"; // 주문접수(현재)
      if (SessionDetailHelper.getDetails().isLogin()) {
        orderGoodsVO.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      }
      this.updateOrdStatus(orderGoodsVO, curOrdStatusCd);
      log.error("==== 결제 롤백(취소) End ");
      ResultModel<OrderPO> err_result = new ResultModel<OrderPO>();
      err_result.setMessage("주문 결제 정보 등록중 오류가 발생하였습니다.");
      err_result.setSuccess(false);
      return err_result;
    }

    result.setSuccess(true);
    return result;
  }

  /**
   * 인터페이스 주문취소 프로세스 ( 상세 번호 확인 및 취소처리 )
   */
  @Override
  public ResultModel<OrderPayPO> orderCancelAllIf(OrderPO po) throws Exception {

    log.debug(" 주문취소 IF 에서 실행 시작 (주문번호) ::::" + po.getOrdNo());
    List<OrderGoodsVO> orderList = selectOrderDtlSeqCancelCount(po);

    log.debug(" 주문취소 IF 에서 실행 시작 (상세정보) ::::" + orderList);

    OrderPayPO opp = new OrderPayPO();
    opp.setOrdNo(po.getOrdNo());

    String strOrdDtlSeq = "";

    if (orderList != null && orderList.size() > 0) {
      for (int x = 0; x < orderList.size(); x++) {
        OrderGoodsVO vo = (OrderGoodsVO) orderList.get(x);
        if (!"".equals(strOrdDtlSeq)) {
          strOrdDtlSeq += ",";
        }
        strOrdDtlSeq += vo.getOrdDtlSeq();
      }
    }
    String[] ordDtlSeqArr = { strOrdDtlSeq };
    String[] ordNoArr = { Long.toString(po.getOrdNo()) };

    po.setOrdNoArr(ordNoArr);
    po.setOrdDtlSeqArr(ordDtlSeqArr);
    po.setOrderPayPO(opp);
    po.setPartCancelYn("N");
    po.setCancelType("02"); // 01:프론트, 02:관리자
    po.setCancelStatusCd("11"); // 주문취소 상태
    ResultModel<OrderPayPO> result = cancelOrder(po);
    log.debug(" 주문취소 IF 에서 실행 끝 ");
    return result;
  }

  /**
   * 주문 상세 카운트 확인
   */
  @Override
  @Transactional(readOnly = true)
  public List<OrderGoodsVO> selectOrderDtlSeqCancelCount(OrderPO po) {
    return proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrderDtlSeqCancelCount", po);
  }

  /**
   * 배치 구매확정 처리 프로세스
   */
  public void updateOrdStatusConfirmOrder(OrderGoodsVO vo) throws Exception {
    Long siteNo = vo.getSiteNo();
    Integer partnerNo = vo.getPartnerNo();
    try {
      // 변경 하려는 시점의 주문상세상태(주문상태)가 현재 상태와 같은 경우면 상태 변경
      int cnt = 0;
      try {
        // 구매 확정일 경우 에스크로 처리 성공일 경우만 상태 변경 16.09.30
        if ("90".equals(vo.getOrdDtlStatusCd())) {
          Map<String, Object> reqMap = new HashMap<String, Object>();
          ModelAndView mav = new ModelAndView();
          String method = "confirm"; // 구매확정
          DeliveryPO po = new DeliveryPO();
          po.setOrdNo(vo.getOrdNo());
          po.setOrdDtlSeq(vo.getOrdDtlSeq());
          // 에스크로 처리
          ResultModel<PaymentModel<?>> resultModel = deliveryService.doEscrowAction(po, reqMap, mav, method);
          if (resultModel.isSuccess()) {
            vo.setOrdStatusCd("90");
            proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatus", vo);
            cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlStatus", vo);
          }
        }
      } catch (Exception e) {
        log.debug("{}", e.getMessage(), e);
      }

      if (cnt > 0) {
        try {
          /** 구매 확정 처리 **/
          proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdStatusCdConfirm", vo);

        } catch (Exception e) {
          log.debug("{}", e.getMessage());
        }
      }

      try {
        // 구매확정
        OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
        orderGoodsVO.setSiteNo(siteNo);
        orderGoodsVO.setPartnerNo(partnerNo);
        orderGoodsVO.setOrdNo(vo.getOrdNo());
        orderGoodsVO.setOrdStatusCd("90");

        // sms, email 코드 적용
        String sendTypeCdEmail = "13";
        // 나중에 sms 발송이 생길수도있으니 주석처리..
        // if (!"".equals(sendTypeCdSms)) sendOrdAutoSms(sendTypeCdSms, orderGoodsVO);
        if (!"".equals(sendTypeCdEmail))
          sendOrdAutoEmail(sendTypeCdEmail, orderGoodsVO);
        log.debug("SMS EMAIL 완료");
      } catch (Exception eAuto) {
        log.debug("취소 sms, email 실패", eAuto);
      }

    } catch (Exception e) {
      log.debug("{}", e.getMessage(), e);
    }
  }

  /**
   * 배치 구매확정요청 처리 프로세스
   */
  public void confirmOrderRequestEmail(OrderGoodsVO vo) throws Exception {
    Long siteNo = vo.getSiteNo();
    Integer partnerNo = vo.getPartnerNo();
    try {
      // 배송완료 주문들 구매확정 요청
      OrderGoodsVO orderGoodsVO = new OrderGoodsVO();
      orderGoodsVO.setSiteNo(siteNo);
      orderGoodsVO.setPartnerNo(partnerNo);
      orderGoodsVO.setOrdNo(vo.getOrdNo());
      orderGoodsVO.setOrdStatusCd("50");

      // sms, email 코드 적용
      String sendTypeCdEmail = "12";
      // 나중에 sms 발송이 생길수도있으니 주석처리..
      // if (!"".equals(sendTypeCdSms)) sendOrdAutoSms(sendTypeCdSms, orderGoodsVO);
      if (!"".equals(sendTypeCdEmail))
        sendOrdAutoEmail(sendTypeCdEmail, orderGoodsVO);
      log.debug("구매확정요청 EMAIL 완료");
    } catch (Exception eAuto) {
      log.debug("구매확정요청 EMAIL 실패", eAuto);
    }
  }

  @Override
  public ResultListModel<OrderGoodsVO> selectOrdPopupList(OrderSO so) throws Exception {
    ResultListModel<OrderGoodsVO> getList = proxyDao
        .selectListPage(MapperConstants.ORDER_MANAGE + "selectOrdPopupListPaging", so);
    return getList;
  }

  /**
   * 부분취소 확인용 총 주문 건수 조회
   */
  @Override
  public Integer selectOrdCnt(long ordNo) throws Exception {
    int cnt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdCnt", ordNo);
    return cnt;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 등록
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public void insertOrderSalesAccount(List<OrderGoodsPO> list) throws Exception {
    for (OrderGoodsPO po : list) {
      proxyDao.insert(MapperConstants.ORDER_MANAGE + "insertOrderSalesAccount", po);
    }
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public List<OrderGoodsVO> selectSalesAccountList(OrderPO po) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectSalesAccountList", po);
    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 최종 교환 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public List<OrderGoodsVO> selectSalesAccountExchangeList(OrderPO po) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectSalesAccountExchangeList", po);
    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 기타 목록 조회(사은품, 추가상품)
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public List<OrderGoodsVO> selectSalesAccountEtcList(OrderPO po) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectSalesAccountEtcList", po);
    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 사은품 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public List<OrderGoodsVO> selectSalesAccountEtcFreebieList(OrderPO po) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectSalesAccountEtcFreebieList",
        po);
    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 12. 11.
   * 작성자 : proliebe
   * 설명   : 정산 정보 클레임 요청 목록 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 12. 11. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public List<OrderGoodsVO> selectSalesAccountRequestList(OrderPO po) throws Exception {
    List<OrderGoodsVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectSalesAccountRequestList", po);
    return list;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 11. 22.
   * 작성자 : proliebe
   * 설명   : 정산 정보 등록 프로세스
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 11. 22. proliebe - 최초생성
   * </pre>
   *
   * @return
   */
  @Override
  public void orderSalesAccountProcess(OrderPO po) throws Exception {

    log.debug("============= 매출 정산 테이블 process ==================");
    List<OrderGoodsPO> accountList = new ArrayList<>();
    List<OrderGoodsPO> cancelRequestList = new ArrayList<>();
    List<Long> cancelGrpNoList = new ArrayList<>(); // 취소 프로모션 그룹 리스트
    OrderInfoVO orderInfoVO = new OrderInfoVO();
    OrderPayVO addPayVO = new OrderPayVO();
    Float cancelAddDlvrAmt = 0f;
    Float cancelAreaAddDlvrAmt = 0f;
    Float addDlvrAmt = 0f;
    Float addAreaAddDlvrAmt = 0f;
    Float sumAddDlvrAmt = 0f;
    Float sumAddAreaAddDlvrAmt = 0f;

    // 주문 정보 조회
    OrderInfoVO tVO = new OrderInfoVO();
    tVO.setSiteNo((!StringUtil.isEmpty(po.getSiteNo())) ? po.getSiteNo() : siteService.getSiteNo());
    tVO.setOrdNo(Long.toString(po.getOrdNo()));
    tVO.setPartnerNo(po.getPartnerNo());
    tVO.setClaimTurn(0);
    OrderVO orderDtl = selectInsertAccountInfo(tVO); // 정산정보 등록용 데이터 조회
    List<OrderGoodsVO> goodsList = orderDtl.getOrderGoodsVO();
    Float shoppingbagAmt = orderDtl.getOrderInfoVO().getShoppingbagAmt();
    Float dlvrAmt = 0f;
    Float areaAddDlvrc = 0f;
    Float sumShoppingbagAmt = 0f;
    Float sumDlvrAmt = 0f;
    Float sumAreaAddDlvrc = 0f;
    Float eachShoppingbagAmt = 0f;
    Float eachDlvrAmt = 0f;
    Float eachAreaAddDlvrc = 0f;
    for (OrderGoodsVO orderGoodsVO : goodsList) {
      dlvrAmt += orderGoodsVO.getRealDlvrAmt();
      areaAddDlvrc += orderGoodsVO.getAreaAddDlvrc();
    }

    String today = po.getRegDt();
    if (StringUtil.isEmpty(today)) {
      today = DateUtil.getNowDateTime("yyyyMMddHHmmss");
    }

    String claimGbCd = po.getClaimGbCd();
    log.debug("======== 매출 정산 분기 claimGbCd : {}", po.getClaimGbCd());
    int i = 1;
    int k = 1;
    int listCnt = 0;
    int ordCnt = 0;
    OrderInfoVO reInfoVO = new OrderInfoVO();
    List<OrderGoodsVO> reOrderGoodsList = new ArrayList<>();
    switch (claimGbCd) {
    case "20": // 신규주문
      log.debug("============= 매출 정산 테이블 process : 신규주문 ==================");
      // 전체 상품 수 및 배분 금액 확인
      ordCnt = 0;
      for (OrderGoodsVO cvo : goodsList) {
        if (StringUtil.isEmpty(cvo.getGoodsSetNo())) {
          ordCnt++;
        } else {
          for (OrderGoodsVO svo : cvo.getGoodsSetList()) {
            ordCnt++;
          }
        }
      }
      if (shoppingbagAmt > 0) {
        eachShoppingbagAmt = (float) Math.floor(shoppingbagAmt / ordCnt);
      }
      if (dlvrAmt > 0) {
        eachDlvrAmt = (float) Math.floor(dlvrAmt / ordCnt);
      }
      if (areaAddDlvrc > 0) {
        eachAreaAddDlvrc = (float) Math.floor(areaAddDlvrc / ordCnt);
      }

      // 신규주문 매출 정산 등록
      for (OrderGoodsVO vo : goodsList) {
        if (StringUtil.isEmpty(vo.getGoodsSetNo())) { // 일반상품
          OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
          BeanUtils.copyProperties(vo, orderGoodsPO);
          orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
          orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
          orderGoodsPO.setClaimTurn(0);
          orderGoodsPO.setClaimGbCd(claimGbCd);
          orderGoodsPO.setAccountStatusCd("01"); // 신규
          log.debug("== 할인 정보 관련 셋팅 START ==");
          orderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt() * (-1));
          orderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt() * (-1));
          orderGoodsPO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
          orderGoodsPO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
          orderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt() * (-1));
          orderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt() * (-1));
          orderGoodsPO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
          orderGoodsPO.setOrdPrmtNo(vo.getOrdPrmtNo());
          orderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt() * (-1));
          orderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt() * (-1));
          orderGoodsPO.setDupltPrmtGrpNo(vo.getDupltPrmtGrpNo());
          orderGoodsPO.setDupltPrmtNo(vo.getDupltPrmtNo());
          orderGoodsPO.setDlvrcCpDcAmt(vo.getDlvrcCpDcAmt() * (-1));
          orderGoodsPO.setDlvrcPrmtDcAmt(vo.getDlvrcPrmtDcAmt() * (-1));
          log.debug("== 할인 정보 관련 셋팅 END ==");
          Float eachAccountAmt = (vo.getSaleAmt() * (int) vo.getOrdQtt()) - vo.getGoodsCpDcAmt()
              - vo.getGoodsPrmtDcAmt() - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt()
              - vo.getOrdDupltPrmtDcAmt();
          orderGoodsPO.setAccountAmt(eachAccountAmt);
          orderGoodsPO.setSaleAmt(vo.getSaleAmt() * (int) vo.getOrdQtt());
          orderGoodsPO.setQtt((int) vo.getOrdQtt());
          orderGoodsPO.setDlvrcGbCd("01"); // 일반
          if ("Y".equals(vo.getAddOptYn())) {
            orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
            orderGoodsPO.setGiftPackQtt(vo.getAddOptQtt());
            orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * vo.getAddOptQtt());
          }
          if (i == ordCnt) {
            orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
            orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
            orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
          } else {
            orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
            orderGoodsPO.setDlvrAmt(eachDlvrAmt);
            orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
          }
          orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
          orderGoodsPO.setStoreNo(vo.getStoreNo());
          orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
          orderGoodsPO.setSvmnAmt(vo.getPvdSvmn());
          orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
          orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
          orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
          orderGoodsPO.setSetNo(vo.getSetNo());
          orderGoodsPO.setRegDt(today);
          accountList.add(orderGoodsPO);
          log.debug("========= vo.getFreebieList() : {}", vo.getFreebieList());
          if (vo.getFreebieList() != null && vo.getFreebieList().size() > 0) {
            for (OrderGoodsVO freebieVO : vo.getFreebieList()) {
              log.debug("========= freebieVO.getPrmtBnfCd3() : {}", freebieVO.getPrmtBnfCd3());
              if ("08".equals(freebieVO.getPrmtBnfCd3())) {
                OrderGoodsPO freebiePO = new OrderGoodsPO();
                freebiePO.setOrdNo(Long.parseLong(vo.getOrdNo()));
                freebiePO.setOrdDtlSeq(0);
                freebiePO.setClaimTurn(0);
                freebiePO.setClaimGbCd(claimGbCd);
                freebiePO.setAccountStatusCd("01"); // 신규
                freebiePO.setGoodsNo(freebieVO.getFreebieNo());
                freebiePO.setQtt(1);
                freebiePO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
                freebiePO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
                freebiePO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
                freebiePO.setOrdPrmtNo(vo.getOrdPrmtNo());
                freebiePO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
                freebiePO.setPlusGoodsYn("N");
                freebiePO.setFreebieGoodsYn("Y");
                freebiePO.setRegDt(today);
                accountList.add(freebiePO);
                log.debug("========= freebiePO : {}", freebiePO);
              }
            }
          }
          sumShoppingbagAmt += eachShoppingbagAmt;
          sumDlvrAmt += eachDlvrAmt;
          sumAreaAddDlvrc += eachAreaAddDlvrc;
          i++;
        } else { // 세트상품
          k = 0;
          boolean giftPackApplyYn = false;
          Float sumSaleAmt = 0f;
          Float sumAccountAmt = 0f;
          Float sumGoodsCpDcAmt = 0f;
          Float sumGoodsPrmtDcAmt = 0f;
          Float sumOrdCpDcAmt = 0f;
          Float sumOrdPrmtDcAmt = 0f;
          Float sumOrdDupltCpDcAmt = 0f;
          Float sumOrdDupltPrmtDcAmt = 0f;
          Float sumDlvrcCpDcAmt = 0f;
          Float sumDlvrcPrmtDcAmt = 0f;
          Float sumSvmnAmt = 0f;
          Float orgSaleAmt = (vo.getSaleAmt() * (int) vo.getOrdQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt()
              - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt() - vo.getOrdDupltPrmtDcAmt(); // 세트상품
                                                                                                                 // 원본
                                                                                                                 // 금액
          List<OrderGoodsVO> goodsSetList = vo.getGoodsSetList();
          for (OrderGoodsVO goodsSetVO : goodsSetList) {
            sumSaleAmt += (goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt());
          }
          for (OrderGoodsVO goodsSetVO : goodsSetList) {
            OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
            BeanUtils.copyProperties(goodsSetVO, orderGoodsPO);
            orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            orderGoodsPO.setClaimTurn(0);
            orderGoodsPO.setClaimGbCd(claimGbCd);
            orderGoodsPO.setAccountStatusCd("01"); // 신규
            Float eachSaleAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getSaleAmt());
            Float eachGoodsCpDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getGoodsCpDcAmt());
            Float eachGoodsPrmtDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getGoodsPrmtDcAmt());
            Float eachOrdCpDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getOrdCpDcAmt());
            Float eachOrdPrmtDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getOrdPrmtDcAmt());
            Float eachOrdDupltCpDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getOrdDupltCpDcAmt());
            Float eachOrdDupltPrmtDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getOrdDupltPrmtDcAmt());
            Float eachDlvrcCpDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getDlvrcCpDcAmt());
            Float eachDlvrcPrmtDcAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getDlvrcPrmtDcAmt());
            Float eachSvmnAmt = (float) Math
                .round((goodsSetVO.getSaleAmt() * (int) vo.getOrdQtt()) / sumSaleAmt * vo.getPvdSvmn());
            Float eachAccountAmt = (eachSaleAmt * (int) vo.getOrdQtt()) - eachGoodsCpDcAmt - eachGoodsPrmtDcAmt
                - eachOrdCpDcAmt - eachOrdPrmtDcAmt - eachOrdDupltCpDcAmt - eachOrdDupltPrmtDcAmt;
            log.debug("====== orgSaleAmt : {}", orgSaleAmt);
            log.debug("====== eachSaleAmt : {}", eachSaleAmt);
            log.debug("====== eachOrdCpDcAmt : {}", eachOrdCpDcAmt);
            log.debug("====== eachOrdPrmtDcAmt : {}", eachOrdPrmtDcAmt);
            log.debug("====== eachOrdDupltCpDcAmt : {}", eachOrdDupltCpDcAmt);
            log.debug("====== eachOrdDupltPrmtDcAmt : {}", eachOrdDupltPrmtDcAmt);
            log.debug("====== eachAccountAmt : {}", eachAccountAmt);
            if (k == goodsSetList.size() - 1) {
              log.debug("====== last ====");
              log.debug("====== eachSaleAmt : {}", eachSaleAmt);
              log.debug("====== eachOrdCpDcAmt : {}", vo.getOrdCpDcAmt() - sumOrdCpDcAmt);
              log.debug("====== eachOrdPrmtDcAmt : {}", vo.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt);
              log.debug("====== eachOrdDupltCpDcAmt : {}", vo.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt);
              log.debug("====== eachOrdDupltPrmtDcAmt : {}", vo.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt);
              log.debug("====== eachSvmnAmt : {}", vo.getPvdSvmn() - sumSvmnAmt);
              orderGoodsPO.setGoodsCpDcAmt((vo.getGoodsCpDcAmt() - sumGoodsCpDcAmt) * (-1));
              orderGoodsPO.setGoodsPrmtDcAmt((vo.getGoodsPrmtDcAmt() - sumGoodsPrmtDcAmt) * (-1));
              orderGoodsPO.setOrdCpDcAmt((vo.getOrdCpDcAmt() - sumOrdCpDcAmt) * (-1));
              orderGoodsPO.setOrdPrmtDcAmt((vo.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt) * (-1));
              orderGoodsPO.setOrdDupltCpDcAmt((vo.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt) * (-1));
              orderGoodsPO.setOrdDupltPrmtDcAmt((vo.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt) * (-1));
              orderGoodsPO.setDlvrcCpDcAmt((vo.getDlvrcCpDcAmt() - sumDlvrcCpDcAmt) * (-1));
              orderGoodsPO.setDlvrcPrmtDcAmt((vo.getDlvrcPrmtDcAmt() - sumDlvrcPrmtDcAmt) * (-1));
              orderGoodsPO.setSvmnAmt(vo.getPvdSvmn() - sumSvmnAmt);
              orderGoodsPO.setAccountAmt(orgSaleAmt - sumAccountAmt);
            } else {
              log.debug("====== k ==== : {}", k);
              log.debug("====== eachSaleAmt : {}", eachSaleAmt);
              log.debug("====== eachOrdCpDcAmt : {}", eachOrdCpDcAmt);
              log.debug("====== eachOrdPrmtDcAmt : {}", eachOrdPrmtDcAmt);
              log.debug("====== eachOrdDupltCpDcAmt : {}", eachOrdDupltCpDcAmt);
              log.debug("====== eachOrdDupltPrmtDcAmt : {}", eachOrdDupltPrmtDcAmt);
              log.debug("====== eachAccountAmt : {}", eachAccountAmt);
              log.debug("====== eachSvmnAmt : {}", eachSvmnAmt);
              orderGoodsPO.setGoodsCpDcAmt(eachGoodsCpDcAmt * (-1));
              orderGoodsPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt * (-1));
              orderGoodsPO.setOrdCpDcAmt(eachOrdCpDcAmt * (-1));
              orderGoodsPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt * (-1));
              orderGoodsPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt * (-1));
              orderGoodsPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt * (-1));
              orderGoodsPO.setDlvrcCpDcAmt(eachDlvrcCpDcAmt * (-1));
              orderGoodsPO.setDlvrcPrmtDcAmt(eachDlvrcPrmtDcAmt * (-1));
              orderGoodsPO.setSvmnAmt(eachSvmnAmt);
              orderGoodsPO.setAccountAmt(eachAccountAmt);
            }
            orderGoodsPO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
            orderGoodsPO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
            orderGoodsPO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
            orderGoodsPO.setOrdPrmtNo(vo.getOrdPrmtNo());
            orderGoodsPO.setDupltPrmtGrpNo(vo.getDupltPrmtGrpNo());
            orderGoodsPO.setDupltPrmtNo(vo.getDupltPrmtNo());
            orderGoodsPO.setDlvrcPrmtGrpNo(vo.getDlvrcPrmtGrpNo());
            orderGoodsPO.setDlvrcPrmtNo(vo.getDlvrcPrmtNo());
            orderGoodsPO.setSaleAmt(goodsSetVO.getSaleAmt() * (int) goodsSetVO.getOrdQtt());
            sumAccountAmt += eachAccountAmt;
            sumGoodsCpDcAmt += eachGoodsCpDcAmt;
            sumGoodsPrmtDcAmt += eachGoodsPrmtDcAmt;
            sumOrdCpDcAmt += eachOrdCpDcAmt;
            sumOrdPrmtDcAmt += eachOrdPrmtDcAmt;
            sumOrdDupltCpDcAmt += eachOrdDupltCpDcAmt;
            sumOrdDupltPrmtDcAmt += eachOrdDupltPrmtDcAmt;
            sumDlvrcCpDcAmt += eachDlvrcCpDcAmt;
            sumDlvrcPrmtDcAmt += eachDlvrcPrmtDcAmt;
            sumSvmnAmt += eachSvmnAmt;
            orderGoodsPO.setQtt((int) goodsSetVO.getOrdQtt());
            orderGoodsPO.setDlvrcGbCd("01"); // 일반
            if ("Y".equals(vo.getAddOptYn()) && !giftPackApplyYn) {
              orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
              orderGoodsPO.setGiftPackQtt(vo.getAddOptQtt());
              orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * vo.getAddOptQtt());
              giftPackApplyYn = true;
            }
            if (i == ordCnt) {
              orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
              orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
              orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
            } else {
              orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
              orderGoodsPO.setDlvrAmt(eachDlvrAmt);
              orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
            }

            orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            orderGoodsPO.setStoreNo(vo.getStoreNo());
            orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
            orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
            orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            orderGoodsPO.setSetNo(vo.getSetNo());
            orderGoodsPO.setRegDt(today);
            accountList.add(orderGoodsPO);
            sumShoppingbagAmt += eachShoppingbagAmt;
            sumDlvrAmt += eachDlvrAmt;
            sumAreaAddDlvrc += eachAreaAddDlvrc;
            i++;
            k++;
          }
        }
      }
      insertOrderSalesAccount(accountList);
      break;

    case "40": // 주문취소
      log.debug("============= 매출 정산 테이블 process : 주문취소 ==================");
      // 추가 배송비 결제 정보 조회
      orderInfoVO = new OrderInfoVO();
      orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      orderInfoVO.setSiteNo(po.getSiteNo());
      orderInfoVO.setClaimTurn(po.getClaimTurn());
      addPayVO = selectOrderDlvrPayInfo(orderInfoVO);
      if (addPayVO != null) {
        addDlvrAmt = addPayVO.getDlvrAmt();
      } else {
        addDlvrAmt = po.getCancelAddDlvrAmt();
      }
      // 취소 요청 데이터 등록
      k = 0;
      dlvrAmt = 0f;
      areaAddDlvrc = 0f;
      shoppingbagAmt = 0f;
      dlvrAmt += addDlvrAmt;
      areaAddDlvrc += addAreaAddDlvrAmt;
      goodsList = selectSalesAccountList(po); // 매출정산 목록 조회
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : goodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
            cancelRequestPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            cancelRequestPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            cancelRequestPO.setClaimTurn(po.getClaimTurn());
            cancelRequestPO.setClaimGbCd("30"); // 취소요청
            cancelRequestPO.setAccountStatusCd("02"); // 취소
            cancelRequestPO.setGoodsNo(vo.getGoodsNo());
            cancelRequestPO.setItemNo(vo.getItemNo());
            cancelRequestPO.setQtt(Integer.parseInt(po.getClaimQttArr()[k]) * (-1));
            cancelRequestPO.setGiftPackQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]) * (-1));
            cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            cancelRequestPO.setStoreNo(vo.getStoreNo());
            cancelRequestPO.setGoodsSetNo(vo.getGoodsSetNo());
            cancelRequestPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            cancelRequestPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            cancelRequestPO.setSvmnAmt(vo.getSvmnAmt());
            cancelRequestPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
            cancelRequestPO.setSetNo(vo.getSetNo());
            cancelRequestPO.setRegDt(today);
            cancelRequestList.add(cancelRequestPO);
          }
        }
        k++;
      }
      for (OrderGoodsVO vo : goodsList) {
        dlvrAmt += vo.getDlvrAmt();
        areaAddDlvrc += vo.getAreaAddDlvrAmt();
        shoppingbagAmt += vo.getShoppingbagAmt();
      }
      // 상품 취소 사은품,추가상품 데이터 추가
      cancelGrpNoList = new ArrayList<>(); // 취소 프로모션 그룹 리스트
      if (po.getCancelGoodsPrmtInfo() != null && po.getCancelGoodsPrmtInfo().size() > 0) {
        for (OrderGoodsVO vo : po.getCancelGoodsPrmtInfo()) {
          long prmtNo = vo.getGoodsPrmtNo();
          long prmtGrpNo = vo.getGoodsPrmtGrpNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("03".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
            for (OrderGoodsVO ogVO : goodsList) {
              if (ogVO.getGoodsPrmtGrpNo() != null) {
                if (ogVO.getGoodsPrmtGrpNo() == prmtGrpNo
                    && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                  OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
                  cancelRequestPO.setOrdNo(Long.parseLong(ogVO.getOrdNo()));
                  cancelRequestPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                  cancelRequestPO.setClaimTurn(po.getClaimTurn());
                  cancelRequestPO.setClaimGbCd("30"); // 취소요청
                  cancelRequestPO.setAccountStatusCd("02"); // 취소
                  cancelRequestPO.setGoodsNo(ogVO.getGoodsNo());
                  cancelRequestPO.setItemNo(ogVO.getItemNo());
                  cancelRequestPO.setQtt(ogVO.getQtt() * (-1));
                  cancelRequestPO.setGiftPackQtt(ogVO.getGiftPackQtt() * (-1));
                  cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
                  cancelRequestPO.setStoreNo(ogVO.getStoreNo());
                  cancelRequestPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                  cancelRequestPO.setPlusGoodsYn(ogVO.getPlusGoodsYn());
                  cancelRequestPO.setFreebieGoodsYn(ogVO.getFreebieGoodsYn());
                  cancelRequestPO.setSvmnAmt(ogVO.getSvmnAmt());
                  cancelRequestPO.setExtraSvmnAmt(ogVO.getExtraSvmnAmt());
                  cancelRequestPO.setSetNo(ogVO.getSetNo());
                  cancelRequestPO.setRegDt(today);
                  cancelRequestList.add(cancelRequestPO);
                  log.debug("======= cancelRequestPO : {}", cancelRequestPO);
                  cancelGrpNoList.add(prmtGrpNo);
                }
              }
            }
          }
        }
      }
      // 주문 취소 사은품 데이터 추가
      if (po.getCancelOrdPrmtNo() != null && po.getCancelOrdPrmtNo() > 0) {
        long prmtNo = po.getCancelOrdPrmtNo();
        PromotionSO promotionSO = new PromotionSO();
        promotionSO.setPrmtNo(prmtNo);
        PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
        if ("03".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
          for (OrderGoodsVO ogVO : goodsList) {
            if (ogVO.getOrdPrmtGrpNo() != null) {
              if (ogVO.getOrdPrmtNo() == prmtNo
                  && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
                cancelRequestPO.setOrdNo(Long.parseLong(ogVO.getOrdNo()));
                cancelRequestPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                cancelRequestPO.setClaimTurn(po.getClaimTurn());
                cancelRequestPO.setClaimGbCd("30"); // 취소요청
                cancelRequestPO.setAccountStatusCd("02"); // 취소
                cancelRequestPO.setGoodsNo(ogVO.getGoodsNo());
                cancelRequestPO.setItemNo(ogVO.getItemNo());
                cancelRequestPO.setQtt(ogVO.getQtt() * (-1));
                cancelRequestPO.setGiftPackQtt(ogVO.getGiftPackQtt() * (-1));
                cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
                cancelRequestPO.setStoreNo(ogVO.getStoreNo());
                cancelRequestPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                cancelRequestPO.setPlusGoodsYn(ogVO.getPlusGoodsYn());
                cancelRequestPO.setFreebieGoodsYn(ogVO.getFreebieGoodsYn());
                cancelRequestPO.setSvmnAmt(ogVO.getSvmnAmt());
                cancelRequestPO.setExtraSvmnAmt(ogVO.getExtraSvmnAmt());
                cancelRequestPO.setSetNo(ogVO.getSetNo());
                cancelRequestPO.setRegDt(today);
                cancelRequestList.add(cancelRequestPO);
                cancelGrpNoList.add(ogVO.getOrdPrmtGrpNo());
              }
            }
          }
        }
      }
      insertOrderSalesAccount(cancelRequestList);

      // 취소 후 남은 데이터
      reInfoVO = new OrderInfoVO();
      reInfoVO.setSiteNo((!StringUtil.isEmpty(po.getSiteNo())) ? po.getSiteNo() : siteService.getSiteNo());
      reInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      reInfoVO.setPartnerNo(po.getPartnerNo());
      reInfoVO.setClaimTurn(po.getClaimTurn()); // 재주문 조회시 필수
      reOrderGoodsList = selectInsertAccountDtlInfoList(reInfoVO); // 재주문 데이터 조회
      // 재주문 데이터 초기 정보 셋팅
      k = 0;
      // 기취소 데이터 제거
      for (int s = 0; s < reOrderGoodsList.size(); s++) {
        OrderGoodsVO vo = reOrderGoodsList.get(s);
        if ("21".equals(vo.getOrdDtlStatusCd()) || "66".equals(vo.getOrdDtlStatusCd())
            || "74".equals(vo.getOrdDtlStatusCd())) {
          reOrderGoodsList.remove(s);
          s--;
        }
      }
      // 상품 전체 취소 데이터 제거
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (int s = 0; s < reOrderGoodsList.size(); s++) { // 상품 전체 취소 데이터 제거
          OrderGoodsVO vo = reOrderGoodsList.get(s);
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            if (vo.getRemainQtt() - Integer.parseInt(po.getClaimQttArr()[k]) == 0) {
              reOrderGoodsList.remove(s);
              s--;
            } else {
              vo.setClaimQtt(Integer.parseInt(po.getClaimQttArr()[k]));
              vo.setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]));
            }
          }
        }
        k++;
      }
      // 취소가 아닌 사은품 정보 조회
      log.debug("==== cancelGrpNoList.size() : {}", cancelGrpNoList.size());
      log.debug("==== cancelGrpNoList : {}", cancelGrpNoList);
      if (cancelGrpNoList != null && cancelGrpNoList.size() > 0) {
        OrderPO addPO = new OrderPO();
        addPO.setOrdNo(po.getOrdNo());
        addPO.setCancelGrpNoList(cancelGrpNoList);
        List<OrderGoodsVO> addFreebieList = selectSalesAccountEtcList(addPO);
        if (addFreebieList != null && addFreebieList.size() > 0) {
          for (OrderGoodsVO addVO : addFreebieList) {
            addVO.setRemainQtt(addVO.getQtt());
            addVO.setClaimQtt(0);
            addVO.setRemainAddOptQtt(0);
            addVO.setAddOptClaimQtt(0);
            addVO.setAddOptAmt(0f);
            addVO.setExceptYn("Y");
            reOrderGoodsList.add(addVO);
          }
        }
      } else {
        OrderPO addPO = new OrderPO();
        addPO.setOrdNo(po.getOrdNo());
        List<OrderGoodsVO> addFreebieList = selectSalesAccountEtcList(addPO);
        if (addFreebieList != null && addFreebieList.size() > 0) {
          for (OrderGoodsVO addVO : addFreebieList) {
            addVO.setRemainQtt(addVO.getQtt());
            addVO.setClaimQtt(0);
            addVO.setRemainAddOptQtt(0);
            addVO.setAddOptClaimQtt(0);
            addVO.setAddOptAmt(0f);
            addVO.setExceptYn("Y");
            reOrderGoodsList.add(addVO);
          }
        }
      }
      log.debug("==== reOrderGoodsList.size() : {}", reOrderGoodsList.size());
      log.debug("==== reOrderGoodsList : {}", reOrderGoodsList);
      for (OrderGoodsVO vo : goodsList) {
        for (OrderGoodsVO reVO : reOrderGoodsList) {
          if (vo.getOrdDtlSeq() == reVO.getOrdDtlSeq()) {
            reVO.setOrdQtt(vo.getQtt() - reVO.getClaimQtt());
            reVO.setAddOptQtt(vo.getGiftPackQtt() - reVO.getAddOptClaimQtt());
          }
        }
      }

      // 세트 상품 조회
      for (OrderGoodsVO gvo : reOrderGoodsList) {
        if (!StringUtil.isEmpty(gvo.getGoodsSetNo())) {
          gvo.setGoodsSetYn("Y");
          List<OrderGoodsVO> goodsSetList = new ArrayList<>();
          goodsSetList = selectOrdGoodsSetList(gvo);
          gvo.setGoodsSetList(goodsSetList);
        }
      }
      ordCnt = 0;
      for (OrderGoodsVO cvo : reOrderGoodsList) {
        if (StringUtil.isEmpty(cvo.getGoodsSetNo())) {
          if (!"Y".equals(cvo.getExceptYn())) {
            ordCnt++;
          }
        } else {
          for (OrderGoodsVO svo : cvo.getGoodsSetList()) {
            ordCnt++;
          }
        }
      }

      // 전체 취소 데이터 등록
      accountList = new ArrayList<>();
      for (OrderGoodsVO vo : goodsList) {
        OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
        BeanUtils.copyProperties(vo, orderGoodsPO);
        orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
        orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
        orderGoodsPO.setClaimTurn(po.getClaimTurn());
        orderGoodsPO.setClaimGbCd("40"); // 주문취소
        orderGoodsPO.setAccountStatusCd("05"); // 환불
        orderGoodsPO.setAccountAmt(vo.getAccountAmt() * (-1));
        orderGoodsPO.setSaleAmt(vo.getSaleAmt() * (-1));
        orderGoodsPO.setQtt((int) vo.getQtt() * (-1));
        orderGoodsPO.setDlvrAmt(vo.getDlvrAmt() * (-1));
        orderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt() * (-1));
        orderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt() * (-1));
        orderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt() * (-1));
        orderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt() * (-1));
        orderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt() * (-1));
        orderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt() * (-1));
        orderGoodsPO.setShoppingbagAmt(vo.getShoppingbagAmt() * (-1));
        orderGoodsPO.setAreaAddDlvrAmt(vo.getAreaAddDlvrAmt() * (-1));
        orderGoodsPO.setGiftPackNm(vo.getGiftPackNm());
        orderGoodsPO.setGiftPackQtt(vo.getGiftPackQtt() * (-1));
        orderGoodsPO.setGiftPackAmt(vo.getGiftPackAmt() * (-1));
        orderGoodsPO.setDlvrcGbCd(vo.getDlvrcGbCd());
        orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
        orderGoodsPO.setStoreNo(vo.getStoreNo());
        orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
        orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
        orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
        orderGoodsPO.setSvmnAmt(vo.getSvmnAmt());
        orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
        orderGoodsPO.setSetNo(vo.getSetNo());
        orderGoodsPO.setRegDt(today);
        accountList.add(orderGoodsPO);
      }
      insertOrderSalesAccount(accountList);

      // 취소 후 남은 데이터 등록
      k = 0;
      accountList = new ArrayList();
      log.debug("======== shoppingbagAmt : {}", shoppingbagAmt);
      log.debug("======== dlvrAmt : {}", dlvrAmt);
      log.debug("======== areaAddDlvrc : {}", areaAddDlvrc);
      log.debug("======== reOrderGoodsList.size() : {}", reOrderGoodsList.size());
      log.debug("======== reOrderGoodsList : {}", reOrderGoodsList);
      if (reOrderGoodsList != null && reOrderGoodsList.size() > 0) {
        if (shoppingbagAmt > 0) {
          eachShoppingbagAmt = (float) Math.floor(shoppingbagAmt / ordCnt);
        }
        if (dlvrAmt > 0) {
          eachDlvrAmt = (float) Math.floor(dlvrAmt / ordCnt);
        }
        if (areaAddDlvrc > 0) {
          eachAreaAddDlvrc = (float) Math.floor(areaAddDlvrc / ordCnt);
        }
        for (OrderGoodsVO vo : reOrderGoodsList) {
          if (StringUtil.isEmpty(vo.getGoodsSetNo())) { // 일반상품
            if (vo.getClaimQtt() == null)
              vo.setClaimQtt(0);
            if (vo.getAddOptClaimQtt() == null)
              vo.setAddOptClaimQtt(0);
            OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
            BeanUtils.copyProperties(vo, orderGoodsPO);
            orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            orderGoodsPO.setClaimTurn(po.getClaimTurn());
            orderGoodsPO.setClaimGbCd("40"); // 주문취소
            orderGoodsPO.setAccountStatusCd("06"); // 변경
            log.debug("======== vo : {}", vo);
            log.debug("======== vo.getClaimQtt() : {}", vo.getClaimQtt());
            log.debug("======== vo.getCancelableQtt() : {}", vo.getCancelableQtt());
            orderGoodsPO.setSaleAmt(vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt()));
            orderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt() * (-1));
            orderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt() * (-1));
            orderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt() * (-1));
            orderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt() * (-1));
            orderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt() * (-1));
            orderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt() * (-1));
            orderGoodsPO.setQtt(vo.getRemainQtt() - vo.getClaimQtt());
            orderGoodsPO.setAccountAmt((vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) - vo.getGoodsCpDcAmt()
                - vo.getGoodsPrmtDcAmt() - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt()
                - vo.getOrdDupltPrmtDcAmt());
            if (!"Y".equals(vo.getExceptYn())) {
              if (i == ordCnt) {
                orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
                log.debug("======== last orderGoodsPO.getShoppingbagAmt() : {}", orderGoodsPO.getShoppingbagAmt());
                log.debug("======== last orderGoodsPO.getDlvrAmt() : {}", orderGoodsPO.getDlvrAmt());
                log.debug("======== last orderGoodsPO.getAreaAddDlvrAmt() : {}", orderGoodsPO.getAreaAddDlvrAmt());
              } else {
                orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(eachDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
                log.debug("======== orderGoodsPO.getShoppingbagAmt() : {}", orderGoodsPO.getShoppingbagAmt());
                log.debug("======== orderGoodsPO.getDlvrAmt() : {}", orderGoodsPO.getDlvrAmt());
                log.debug("======== orderGoodsPO.getAreaAddDlvrAmt() : {}", orderGoodsPO.getAreaAddDlvrAmt());
              }
            }
            orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
            orderGoodsPO.setGiftPackQtt((vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
            orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
            if (addPayVO != null) {
              orderGoodsPO.setDlvrcGbCd("02"); // 추가 배송비
            } else {
              orderGoodsPO.setDlvrcGbCd("01");
            }
            orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            orderGoodsPO.setStoreNo(vo.getStoreNo());
            orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
            orderGoodsPO.setSvmnAmt(vo.getPvdSvmn());
            orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
            orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            orderGoodsPO.setSetNo(vo.getSetNo());
            orderGoodsPO.setRegDt(today);
            accountList.add(orderGoodsPO);
            if (!"Y".equals(vo.getExceptYn())) {
              sumShoppingbagAmt += eachShoppingbagAmt;
              sumDlvrAmt += eachDlvrAmt;
              sumAreaAddDlvrc += eachAreaAddDlvrc;
              i++;
            }
          } else { // 세트 상품
            k = 0;
            boolean giftPackApplyYn = false;
            Float sumSaleAmt = 0f;
            Float sumAccountAmt = 0f;
            Float sumGoodsCpDcAmt = 0f;
            Float sumGoodsPrmtDcAmt = 0f;
            Float sumOrdCpDcAmt = 0f;
            Float sumOrdPrmtDcAmt = 0f;
            Float sumOrdDupltCpDcAmt = 0f;
            Float sumOrdDupltPrmtDcAmt = 0f;
            Float sumDlvrcCpDcAmt = 0f;
            Float sumDlvrcPrmtDcAmt = 0f;
            Float sumSvmnAmt = 0f;
            // 세트상품 원본 금액
            Float orgSaleAmt = (vo.getSaleAmt() * vo.getCancelableQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt()
                - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt() - vo.getOrdDupltPrmtDcAmt();
            List<OrderGoodsVO> goodsSetList = vo.getGoodsSetList();
            for (OrderGoodsVO goodsSetVO : goodsSetList) {
              sumSaleAmt += (goodsSetVO.getSaleAmt() * vo.getCancelableQtt());
            }
            for (OrderGoodsVO setVO : goodsSetList) {
              setVO.setClaimQtt(vo.getClaimQtt());
              setVO.setAddOptClaimQtt(vo.getAddOptClaimQtt());
              OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
              BeanUtils.copyProperties(setVO, orderGoodsPO);
              orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
              orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
              orderGoodsPO.setClaimTurn(po.getClaimTurn());
              orderGoodsPO.setClaimGbCd("40"); // 주문취소
              orderGoodsPO.setAccountStatusCd("06"); // 변경
              log.debug("======== vo : {}", vo);
              log.debug("======== vo.getClaimQtt() : {}", vo.getClaimQtt());
              log.debug("======== vo.getCancelableQtt() : {}", vo.getCancelableQtt());
              Float eachSaleAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getSaleAmt());
              Float eachGoodsCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getGoodsCpDcAmt());
              Float eachGoodsPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getGoodsPrmtDcAmt());
              Float eachOrdCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdCpDcAmt());
              Float eachOrdPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdPrmtDcAmt());
              Float eachOrdDupltCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdDupltCpDcAmt());
              Float eachOrdDupltPrmtDcAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt
                      * vo.getOrdDupltPrmtDcAmt());
              Float eachDlvrcCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getDlvrcCpDcAmt());
              Float eachDlvrcPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getDlvrcPrmtDcAmt());
              Float eachSvmnAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getPvdSvmn());
              Float eachAccountAmt = (eachSaleAmt * (vo.getRemainQtt() - vo.getClaimQtt())) - eachGoodsCpDcAmt
                  - eachGoodsPrmtDcAmt - eachOrdCpDcAmt - eachOrdPrmtDcAmt - eachOrdDupltCpDcAmt
                  - eachOrdDupltPrmtDcAmt;
              if (k == goodsSetList.size() - 1) {
                orderGoodsPO.setGoodsCpDcAmt((vo.getGoodsCpDcAmt() - sumGoodsCpDcAmt) * (-1));
                orderGoodsPO.setGoodsPrmtDcAmt((vo.getGoodsPrmtDcAmt() - sumGoodsPrmtDcAmt) * (-1));
                orderGoodsPO.setOrdCpDcAmt((vo.getOrdCpDcAmt() - sumOrdCpDcAmt) * (-1));
                orderGoodsPO.setOrdPrmtDcAmt((vo.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt) * (-1));
                orderGoodsPO.setOrdDupltCpDcAmt((vo.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt) * (-1));
                orderGoodsPO.setOrdDupltPrmtDcAmt((vo.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt) * (-1));
                orderGoodsPO.setDlvrcCpDcAmt((vo.getDlvrcCpDcAmt() - sumDlvrcCpDcAmt) * (-1));
                orderGoodsPO.setDlvrcPrmtDcAmt((vo.getDlvrcPrmtDcAmt() - sumDlvrcPrmtDcAmt) * (-1));
                orderGoodsPO.setSvmnAmt(vo.getPvdSvmn() - sumSvmnAmt);
                orderGoodsPO.setAccountAmt(orgSaleAmt - sumAccountAmt);
              } else {
                orderGoodsPO.setGoodsCpDcAmt(eachGoodsCpDcAmt * (-1));
                orderGoodsPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt * (-1));
                orderGoodsPO.setOrdCpDcAmt(eachOrdCpDcAmt * (-1));
                orderGoodsPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt * (-1));
                orderGoodsPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt * (-1));
                orderGoodsPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt * (-1));
                orderGoodsPO.setDlvrcCpDcAmt(eachDlvrcCpDcAmt * (-1));
                orderGoodsPO.setDlvrcPrmtDcAmt(eachDlvrcPrmtDcAmt * (-1));
                orderGoodsPO.setSvmnAmt(eachSvmnAmt);
                orderGoodsPO.setAccountAmt(eachAccountAmt);
              }
              orderGoodsPO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
              orderGoodsPO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
              orderGoodsPO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
              orderGoodsPO.setOrdPrmtNo(vo.getOrdPrmtNo());
              orderGoodsPO.setDupltPrmtGrpNo(vo.getDupltPrmtGrpNo());
              orderGoodsPO.setDupltPrmtNo(vo.getDupltPrmtNo());
              orderGoodsPO.setDlvrcPrmtGrpNo(vo.getDlvrcPrmtGrpNo());
              orderGoodsPO.setDlvrcPrmtNo(vo.getDlvrcPrmtNo());
              orderGoodsPO.setQtt((vo.getRemainQtt() - vo.getClaimQtt()));
              orderGoodsPO.setSaleAmt(setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt()));
              if ("Y".equals(vo.getAddOptYn()) && !giftPackApplyYn) {
                orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
                orderGoodsPO.setGiftPackQtt((vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
                orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
                giftPackApplyYn = true;
              }
              if (addPayVO != null) {
                orderGoodsPO.setDlvrcGbCd("02"); // 추가 배송비
              } else {
                orderGoodsPO.setDlvrcGbCd("01");
              }
              if (i == ordCnt) {
                orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
              } else {
                orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(eachDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
              }
              orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
              orderGoodsPO.setStoreNo(vo.getStoreNo());
              orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
              orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
              orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
              orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
              orderGoodsPO.setSetNo(vo.getSetNo());
              orderGoodsPO.setRegDt(today);
              accountList.add(orderGoodsPO);
              sumAccountAmt += eachAccountAmt;
              sumGoodsCpDcAmt += eachGoodsCpDcAmt;
              sumGoodsPrmtDcAmt += eachGoodsPrmtDcAmt;
              sumOrdCpDcAmt += eachOrdCpDcAmt;
              sumOrdPrmtDcAmt += eachOrdPrmtDcAmt;
              sumOrdDupltCpDcAmt += eachOrdDupltCpDcAmt;
              sumOrdDupltPrmtDcAmt += eachOrdDupltPrmtDcAmt;
              sumDlvrcCpDcAmt += eachDlvrcCpDcAmt;
              sumDlvrcPrmtDcAmt += eachDlvrcPrmtDcAmt;
              sumSvmnAmt += eachSvmnAmt;

              sumShoppingbagAmt += eachShoppingbagAmt;
              sumDlvrAmt += eachDlvrAmt;
              sumAreaAddDlvrc += eachAreaAddDlvrc;
              k++;
              i++;
            }
          }
        }
        insertOrderSalesAccount(accountList);
      }
      break;

    case "60": // 교환요청
      log.debug("============= 매출 정산 테이블 process : 교환요청 ==================");
      // 추가 배송비 결제 정보 조회
      Float refundDlvrAmt = 0f;
      Float refundAreaAddDlvrc = 0f;
      Float exchangeDlvrAmt = 0f;
      Float exchangeAreaAddDlvrc = 0f;
      orderInfoVO = new OrderInfoVO();
      if (po.getOrgOrdNo() != 0) {
        orderInfoVO.setOrdNo(Long.toString(po.getOrgOrdNo()));
      } else {
        orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      }
      orderInfoVO.setSiteNo(po.getSiteNo());
      orderInfoVO.setClaimTurn(po.getClaimTurn());
      addPayVO = selectOrderDlvrPayInfo(orderInfoVO);
      if (addPayVO != null) {
        addDlvrAmt = addPayVO.getDlvrAmt();
        addAreaAddDlvrAmt = addPayVO.getAreaAddDlvrc();
        refundDlvrAmt = addDlvrAmt / 2;
        exchangeDlvrAmt = addDlvrAmt / 2;
        refundAreaAddDlvrc = addAreaAddDlvrAmt / 2;
        exchangeAreaAddDlvrc = addAreaAddDlvrAmt / 2;
      }
      // 교환 요청 데이터 등록
      k = 0;
      goodsList = selectSalesAccountList(po); // 매출정산 목록 조회
      // 1/n의 n 갯수 조회
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : goodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq()) && po.getOrdDtlItemNoArr()[k].equals(vo.getItemNo())) {
            listCnt++;
          }
        }
        k++;
      }
      log.debug("======== exchangeDlvrAmt : {}", exchangeDlvrAmt);
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        log.debug("======== po.getOrdDtlSeq() : {}", ordDtlSeq);
      }
      for (String ordDtlItemNo : po.getOrdDtlItemNoArr()) {
        log.debug("======== po.getOrdDtlItemNo() : {}", ordDtlItemNo);
      }
      k = 0;
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : goodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq()) && po.getOrdDtlItemNoArr()[k].equals(vo.getItemNo())) {
            OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
            cancelRequestPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            cancelRequestPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            cancelRequestPO.setClaimTurn(po.getClaimTurn());
            cancelRequestPO.setAccountStatusCd("05"); // 반품
            cancelRequestPO.setClaimGbCd("60"); // 교환요청
            cancelRequestPO.setGoodsNo(vo.getGoodsNo());
            cancelRequestPO.setItemNo(vo.getItemNo());
            log.debug("======== po.getClaimQttArr() : {}", po.getClaimQttArr());
            cancelRequestPO.setQtt(Integer.parseInt(po.getClaimQttArr()[k]) * (-1));
            if (refundDlvrAmt > 0) {
              Float eachAddDlvrAmt = (float) Math.floor(refundDlvrAmt / listCnt);
              Float eachAddAreaDlvrc = (float) Math.floor(refundAreaAddDlvrc / listCnt);
              if (k == po.getOrdDtlSeqArr().length - 1) {
                cancelRequestPO.setDlvrAmt(refundDlvrAmt - sumAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(refundAreaAddDlvrc - sumAddAreaAddDlvrAmt);
              } else {
                cancelRequestPO.setDlvrAmt(eachAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(eachAddAreaDlvrc);
              }
              cancelRequestPO.setDlvrcGbCd("02"); // 추가배송비
              sumAddDlvrAmt += eachAddDlvrAmt;
              sumAddAreaAddDlvrAmt += eachAddAreaDlvrc;
            }
            cancelRequestPO.setGoodsSetNo(vo.getGoodsSetNo());
            cancelRequestPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            cancelRequestPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            cancelRequestPO.setRegDt(today);
            cancelRequestList.add(cancelRequestPO);
          }
        }
        k++;
      }
      // 교환정보 등록
      k = 0;
      sumAddDlvrAmt = 0f;
      sumAddAreaAddDlvrAmt = 0f;
      log.debug("======== po.getExchangeList() : {}", po.getExchangeList());
      log.debug("======== exchangeDlvrAmt : {}", exchangeDlvrAmt);
      for (ClaimGoodsPO exPO : po.getExchangeList()) {
        for (OrderGoodsVO vo : goodsList) {
          if (exPO.getOrdDtlSeq().equals(vo.getOrdDtlSeq()) && exPO.getItemNo().equals(vo.getItemNo())) {
            OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
            cancelRequestPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            cancelRequestPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            cancelRequestPO.setClaimTurn(po.getClaimTurn());
            cancelRequestPO.setAccountStatusCd("01"); // 신규
            cancelRequestPO.setClaimGbCd("60"); // 교환요청
            cancelRequestPO.setGoodsNo(vo.getGoodsNo());
            cancelRequestPO.setItemNo(exPO.getExchangeItemNo());
            cancelRequestPO.setQtt(exPO.getClaimQtt());
            if (exchangeDlvrAmt > 0) {
              Float eachAddDlvrAmt = (float) Math.floor(exchangeDlvrAmt / po.getExchangeList().size());
              Float eachAddAreaDlvrc = (float) Math.floor(exchangeAreaAddDlvrc / po.getExchangeList().size());
              if (k == po.getOrdDtlSeqArr().length - 1) {
                cancelRequestPO.setDlvrAmt(exchangeDlvrAmt - sumAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(exchangeAreaAddDlvrc - sumAddAreaAddDlvrAmt);
              } else {
                cancelRequestPO.setDlvrAmt(eachAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(eachAddAreaDlvrc);
              }
              cancelRequestPO.setDlvrcGbCd("02"); // 추가배송비
              sumAddDlvrAmt += eachAddDlvrAmt;
              sumAddAreaAddDlvrAmt += eachAddAreaDlvrc;
            }
            cancelRequestPO.setGoodsSetNo(vo.getGoodsSetNo());
            cancelRequestPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            cancelRequestPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            cancelRequestPO.setRegDt(today);
            cancelRequestList.add(cancelRequestPO);
          }
        }
        k++;
      }

      // 재주문인 경우 주문번호, 주문상세번호 변경
      if (po.getOrdNo() != po.getOrgOrdNo() && po.getOrgOrdNo() != 0) {
        for (OrderGoodsPO cPO : cancelRequestList) {
          cPO.setOrdNo(po.getOrgOrdNo());
          // 원본 주문 상세 번호 조회
          OrderPO orderPO = new OrderPO();
          orderPO.setSiteNo(po.getSiteNo());
          orderPO.setOrdNo(po.getOrdNo());
          orderPO.setOrdDtlSeqArr(po.getOrdDtlSeqArr());
          List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(orderPO);
          for (OrderGoodsVO orderGoodsVO : orgOrdGoodsList) {
            if (orderGoodsVO.getOrdDtlSeq().equals(Long.toString(cPO.getOrdDtlSeq()))) {
              cPO.setOrgOrdDtlSeq(Long.parseLong(orderGoodsVO.getOrgOrdDtlSeq()));
            }
          }
        }
        for (OrderGoodsPO cPO : cancelRequestList) {
          cPO.setOrdDtlSeq(cPO.getOrgOrdDtlSeq());
        }
      }
      insertOrderSalesAccount(cancelRequestList);

      break;

    case "66": // 교환완료
      log.debug("============= 매출 정산 테이블 process : 교환완료 ==================");
      k = 0;
      dlvrAmt = 0f;
      areaAddDlvrc = 0f;
      shoppingbagAmt = 0f;
      po.setClaimGbCd("60");
      if (po.getOrgOrdNo() != 0) {
        po.setOrdNo(po.getOrgOrdNo());
      }
      List<OrderGoodsVO> orgGoodsList = selectSalesAccountList(po); // 매출 정산 최종 목록 조회
      goodsList = selectSalesAccountRequestList(po); // 매출 정산 교환 요청 목록 조회
      for (OrderGoodsVO orgVO : orgGoodsList) {
        for (OrderGoodsVO requestVO : goodsList) {
          if (orgVO.getOrdDtlSeq().equals(requestVO.getOrdDtlSeq())
              && orgVO.getGoodsNo().equals(requestVO.getGoodsNo())) {
            if (requestVO.getQtt() > 0) {
              requestVO.setAccountAmt(
                  (float) Math.round((orgVO.getAccountAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1))) * (-1));
              requestVO.setSaleAmt(
                  (float) Math.round((orgVO.getSaleAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1))) * (-1));
              requestVO.setGoodsPrmtDcAmt(
                  (float) Math.round((orgVO.getGoodsPrmtDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1)))
                      * (-1));
              requestVO.setGoodsCpDcAmt(
                  (float) Math.round((orgVO.getGoodsCpDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1))) * (-1));
              requestVO.setOrdPrmtDcAmt(
                  (float) Math.round((orgVO.getOrdPrmtDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1))) * (-1));
              requestVO.setOrdCpDcAmt(
                  (float) Math.round((orgVO.getOrdCpDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1))) * (-1));
              requestVO.setOrdDupltPrmtDcAmt(
                  (float) Math.round((orgVO.getOrdDupltPrmtDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1)))
                      * (-1));
              requestVO.setOrdDupltCpDcAmt(
                  (float) Math.round((orgVO.getOrdDupltCpDcAmt() / orgVO.getQtt()) * (requestVO.getQtt() * (-1)))
                      * (-1));
            } else {
              requestVO
                  .setAccountAmt((float) Math.round((orgVO.getAccountAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO.setSaleAmt((float) Math.round((orgVO.getSaleAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO.setGoodsPrmtDcAmt(
                  (float) Math.round((orgVO.getGoodsPrmtDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO
                  .setGoodsCpDcAmt((float) Math.round((orgVO.getGoodsCpDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO
                  .setOrdPrmtDcAmt((float) Math.round((orgVO.getOrdPrmtDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO
                  .setOrdCpDcAmt((float) Math.round((orgVO.getOrdCpDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO.setOrdDupltPrmtDcAmt(
                  (float) Math.round((orgVO.getOrdDupltPrmtDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
              requestVO.setOrdDupltCpDcAmt(
                  (float) Math.round((orgVO.getOrdDupltCpDcAmt() / orgVO.getQtt()) * requestVO.getQtt()));
            }
            log.debug("====== accountAmt() : {} / orgQtt : {} / reqQtt : {} / lastAccountAmt : {}",
                orgVO.getAccountAmt(), orgVO.getQtt(), requestVO.getQtt(), requestVO.getAccountAmt());
          }
        }
      }
      if (goodsList != null && goodsList.size() > 0) {
        for (OrderGoodsVO vo : goodsList) {
          if (vo.getClaimQtt() == null)
            vo.setClaimQtt(0);
          if (vo.getAddOptClaimQtt() == null)
            vo.setAddOptClaimQtt(0);
          OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
          BeanUtils.copyProperties(vo, orderGoodsPO);
          orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
          orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
          orderGoodsPO.setClaimTurn(po.getClaimTurn());
          orderGoodsPO.setClaimGbCd("66"); // 교환완료
          orderGoodsPO.setAccountStatusCd(vo.getAccountStatusCd());
          log.debug("======== vo : {}", vo);
          log.debug("======== vo.getClaimQtt() : {}", vo.getClaimQtt());
          log.debug("======== vo.getQtt() : {}", vo.getQtt());
          orderGoodsPO.setAccountAmt(vo.getAccountAmt());
          orderGoodsPO.setSaleAmt(vo.getSaleAmt());
          orderGoodsPO.setQtt(vo.getQtt());
          orderGoodsPO.setShoppingbagAmt(0f);
          orderGoodsPO.setDlvrAmt(0f);
          orderGoodsPO.setAreaAddDlvrAmt(0f);
          orderGoodsPO.setGiftPackQtt(0);
          orderGoodsPO.setGiftPackAmt(0f);
          orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
          orderGoodsPO.setRegDt(today);
          accountList.add(orderGoodsPO);
        }
        // 추가 배송비 결제 취소 정보 조회
        orderInfoVO = new OrderInfoVO();
        orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
        orderInfoVO.setSiteNo(po.getSiteNo());
        orderInfoVO.setClaimTurn(po.getClaimTurn());
        orderInfoVO.setPaymentStatusCd("03");
        OrderPayVO cancelAddPayVO = selectOrderDlvrPayInfo(orderInfoVO); // 추가배송비 취소 데이터
        if (cancelAddPayVO != null) {
          cancelAddDlvrAmt = cancelAddPayVO.getDlvrAmt() * (-1);
          cancelAreaAddDlvrAmt = cancelAddPayVO.getAreaAddDlvrc() * (-1);
          int j = 1;
          for (OrderGoodsPO orderGoodsPO : accountList) {
            eachDlvrAmt = (float) Math.floor(cancelAddDlvrAmt / accountList.size());
            eachAreaAddDlvrc = (float) Math.floor(cancelAreaAddDlvrAmt / accountList.size());
            if (j == accountList.size()) {
              orderGoodsPO.setDlvrAmt((cancelAddDlvrAmt - sumDlvrAmt));
              orderGoodsPO.setAreaAddDlvrAmt((cancelAreaAddDlvrAmt - sumAreaAddDlvrc));
            } else {
              orderGoodsPO.setDlvrAmt(eachDlvrAmt);
              orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
            }
            sumShoppingbagAmt += eachShoppingbagAmt;
            sumDlvrAmt += eachDlvrAmt;
            sumAreaAddDlvrc += eachAreaAddDlvrc;
            j++;
          }
        }
        insertOrderSalesAccount(accountList);
      }
      break;
    case "69": // 교환철회
      log.debug("============= 매출 정산 테이블 process : 교환철회 ==================");
      po.setClaimGbCd("60");
      goodsList = selectSalesAccountRequestList(po); // 매출정산 클레임 요청 목록 조회
      for (OrderGoodsVO vo : goodsList) {
        OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
        BeanUtils.copyProperties(vo, orderGoodsPO);
        orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
        orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
        orderGoodsPO.setClaimTurn(po.getClaimTurn());
        orderGoodsPO.setClaimGbCd("69"); // 교환철회
        orderGoodsPO.setAccountStatusCd(vo.getAccountStatusCd());
        orderGoodsPO.setAccountAmt(0f);
        orderGoodsPO.setSaleAmt(0f);
        orderGoodsPO.setQtt(vo.getQtt() * (-1));
        orderGoodsPO.setShoppingbagAmt(0f);
        orderGoodsPO.setGiftPackQtt(0);
        orderGoodsPO.setGiftPackAmt(0f);
        if (vo.getDlvrAmt() > 0) {
          orderGoodsPO.setDlvrcGbCd("02"); // 추가 배송비
          orderGoodsPO.setDlvrAmt(vo.getDlvrAmt() * (-1));
          orderGoodsPO.setAreaAddDlvrAmt(vo.getAreaAddDlvrAmt() * (-1));
        } else {
          orderGoodsPO.setDlvrAmt(0f);
          orderGoodsPO.setAreaAddDlvrAmt(0f);
        }
        orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
        orderGoodsPO.setRegDt(today);
        accountList.add(orderGoodsPO);
      }
      insertOrderSalesAccount(accountList);
      break;

    case "70": // 반품요청
      log.debug("============= 매출 정산 테이블 process : 반품요청 ==================");
      // 추가 배송비 결제 정보 조회
      orderInfoVO = new OrderInfoVO();
      if (po.getOrgOrdNo() != 0) {
        orderInfoVO.setOrdNo(Long.toString(po.getOrgOrdNo()));
      } else {
        orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      }
      orderInfoVO.setSiteNo(po.getSiteNo());
      orderInfoVO.setClaimTurn(po.getClaimTurn());
      addPayVO = selectOrderDlvrPayInfo(orderInfoVO);
      if (addPayVO != null) {
        addDlvrAmt = addPayVO.getDlvrAmt();
        addAreaAddDlvrAmt = addPayVO.getAreaAddDlvrc();
      }
      // 반품 요청 데이터 등록
      k = 0;
      i = 0;
      goodsList = selectSalesAccountList(po); // 매출정산 목록 조회
      // 1/n의 n 갯수 조회
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : goodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            listCnt++;
          }
        }
      }
      String tmpOrdDtlSeq = "";
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (OrderGoodsVO vo : goodsList) {
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
            cancelRequestPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            cancelRequestPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            cancelRequestPO.setClaimTurn(po.getClaimTurn());
            cancelRequestPO.setAccountStatusCd("05"); // 환불
            cancelRequestPO.setClaimGbCd("70"); // 반품요청
            cancelRequestPO.setGoodsNo(vo.getGoodsNo());
            cancelRequestPO.setItemNo(vo.getItemNo());
            cancelRequestPO.setQtt(Integer.parseInt(po.getClaimQttArr()[k]) * (-1));
            if (addDlvrAmt > 0) {
              Float eachAddDlvrAmt = (float) Math.floor(addDlvrAmt / listCnt);
              Float eachAddAreaDlvrc = (float) Math.floor(addAreaAddDlvrAmt / listCnt);
              if (i == listCnt - 1) {
                cancelRequestPO.setDlvrAmt(addDlvrAmt - sumAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(addAreaAddDlvrAmt - sumAddAreaAddDlvrAmt);
              } else {
                cancelRequestPO.setDlvrAmt(eachAddDlvrAmt);
                cancelRequestPO.setAreaAddDlvrAmt(eachAddAreaDlvrc);
              }
              cancelRequestPO.setDlvrcGbCd("02"); // 추가배송비
              sumAddDlvrAmt += eachAddDlvrAmt;
              sumAddAreaAddDlvrAmt += eachAddAreaDlvrc;
            }
            if (!vo.getOrdDtlSeq().equals(tmpOrdDtlSeq)) {
              cancelRequestPO.setGiftPackQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]) * (-1));
            } else {
              cancelRequestPO.setGiftPackQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]) * (-1));
            }
            cancelRequestPO.setGoodsSetNo(vo.getGoodsSetNo());
            cancelRequestPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            cancelRequestPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            cancelRequestPO.setSvmnAmt(vo.getSvmnAmt());
            cancelRequestPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
            cancelRequestPO.setSetNo(vo.getSetNo());
            cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            cancelRequestPO.setRegDt(today);
            cancelRequestList.add(cancelRequestPO);
            tmpOrdDtlSeq = vo.getOrdDtlSeq();
            i++;
          }
        }
        k++;
      }

      // 재주문인 경우 주문번호, 주문상세번호 변경
      if (po.getOrdNo() != po.getOrgOrdNo() && po.getOrgOrdNo() != 0) {
        for (OrderGoodsPO cPO : cancelRequestList) {
          cPO.setOrdNo(po.getOrgOrdNo());
          // 원본 주문 상세 번호 조회
          OrderPO orderPO = new OrderPO();
          orderPO.setSiteNo(po.getSiteNo());
          orderPO.setOrdNo(po.getOrdNo());
          orderPO.setOrdDtlSeqArr(po.getOrdDtlSeqArr());
          List<OrderGoodsVO> orgOrdGoodsList = reOrderService.selectOrgOrdGoodsList(orderPO);
          for (OrderGoodsVO orderGoodsVO : orgOrdGoodsList) {
            if (orderGoodsVO.getOrdDtlSeq().equals(Long.toString(cPO.getOrdDtlSeq()))) {
              cPO.setOrgOrdDtlSeq(Long.parseLong(orderGoodsVO.getOrgOrdDtlSeq()));
            }
          }
        }
        for (OrderGoodsPO cPO : cancelRequestList) {
          cPO.setOrdDtlSeq(cPO.getOrgOrdDtlSeq());
        }
      }

      // 상품 취소 사은품,추가상품 데이터 추가
      cancelGrpNoList = new ArrayList<>(); // 취소 프로모션 그룹 리스트
      if (po.getCancelGoodsPrmtInfo() != null && po.getCancelGoodsPrmtInfo().size() > 0) {
        for (OrderGoodsVO vo : po.getCancelGoodsPrmtInfo()) {
          long prmtNo = vo.getGoodsPrmtNo();
          long prmtGrpNo = vo.getGoodsPrmtGrpNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("03".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
            for (OrderGoodsVO ogVO : goodsList) {
              if (ogVO.getGoodsPrmtGrpNo() != null) {
                if (ogVO.getGoodsPrmtGrpNo() == prmtGrpNo
                    && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                  OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
                  cancelRequestPO.setOrdNo(Long.parseLong(ogVO.getOrdNo()));
                  cancelRequestPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                  cancelRequestPO.setClaimTurn(po.getClaimTurn());
                  cancelRequestPO.setAccountStatusCd("05"); // 환불
                  cancelRequestPO.setClaimGbCd("70"); // 반품요청
                  cancelRequestPO.setGoodsNo(ogVO.getGoodsNo());
                  cancelRequestPO.setItemNo(ogVO.getItemNo());
                  cancelRequestPO.setQtt(ogVO.getQtt() * (-1));
                  cancelRequestPO.setGiftPackQtt(ogVO.getGiftPackQtt() * (-1));
                  cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
                  cancelRequestPO.setStoreNo(ogVO.getStoreNo());
                  cancelRequestPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                  cancelRequestPO.setPlusGoodsYn(ogVO.getPlusGoodsYn());
                  cancelRequestPO.setFreebieGoodsYn(ogVO.getFreebieGoodsYn());
                  cancelRequestPO.setSvmnAmt(ogVO.getSvmnAmt());
                  cancelRequestPO.setExtraSvmnAmt(ogVO.getExtraSvmnAmt());
                  cancelRequestPO.setSetNo(ogVO.getSetNo());
                  cancelRequestPO.setRegDt(today);
                  cancelRequestList.add(cancelRequestPO);
                  log.debug("======= cancelRequestPO : {}", cancelRequestPO);
                  cancelGrpNoList.add(prmtGrpNo);
                }
              }
            }
          }
        }
      }
      // 주문 취소 사은품 데이터 추가
      if (po.getCancelOrdPrmtNo() != null && po.getCancelOrdPrmtNo() > 0) {
        long prmtNo = po.getCancelOrdPrmtNo();
        PromotionSO promotionSO = new PromotionSO();
        promotionSO.setPrmtNo(prmtNo);
        PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
        if ("03".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
          for (OrderGoodsVO ogVO : goodsList) {
            if (ogVO.getOrdPrmtGrpNo() != null) {
              if (ogVO.getOrdPrmtNo() == prmtNo
                  && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                OrderGoodsPO cancelRequestPO = new OrderGoodsPO();
                cancelRequestPO.setOrdNo(Long.parseLong(ogVO.getOrdNo()));
                cancelRequestPO.setOrdDtlSeq(Long.parseLong(ogVO.getOrdDtlSeq()));
                cancelRequestPO.setClaimTurn(po.getClaimTurn());
                cancelRequestPO.setAccountStatusCd("05"); // 환불
                cancelRequestPO.setClaimGbCd("70"); // 반품요청
                cancelRequestPO.setGoodsNo(ogVO.getGoodsNo());
                cancelRequestPO.setItemNo(ogVO.getItemNo());
                cancelRequestPO.setQtt(ogVO.getQtt() * (-1));
                cancelRequestPO.setGiftPackQtt(ogVO.getGiftPackQtt() * (-1));
                cancelRequestPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
                cancelRequestPO.setStoreNo(ogVO.getStoreNo());
                cancelRequestPO.setGoodsSetNo(ogVO.getGoodsSetNo());
                cancelRequestPO.setPlusGoodsYn(ogVO.getPlusGoodsYn());
                cancelRequestPO.setFreebieGoodsYn(ogVO.getFreebieGoodsYn());
                cancelRequestPO.setSvmnAmt(ogVO.getSvmnAmt());
                cancelRequestPO.setExtraSvmnAmt(ogVO.getExtraSvmnAmt());
                cancelRequestPO.setSetNo(ogVO.getSetNo());
                cancelRequestPO.setRegDt(today);
                cancelRequestList.add(cancelRequestPO);
                cancelGrpNoList.add(ogVO.getOrdPrmtGrpNo());
              }
            }
          }
        }
      }
      insertOrderSalesAccount(cancelRequestList);
      break;

    case "79": // 반품철회
      log.debug("============= 매출 정산 테이블 process : 반품철회 ==================");
      po.setClaimGbCd("70");
      if (po.getOrdNo() != po.getOrgOrdNo() && po.getOrgOrdNo() != 0) {
        po.setOrdNo(po.getOrgOrdNo());
      }
      goodsList = selectSalesAccountRequestList(po); // 매출정산 클레임 요청 목록 조회
      for (OrderGoodsVO vo : goodsList) {
        OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
        BeanUtils.copyProperties(vo, orderGoodsPO);
        orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
        orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
        orderGoodsPO.setClaimTurn(po.getClaimTurn());
        orderGoodsPO.setClaimGbCd("79"); // 환불철회
        orderGoodsPO.setAccountStatusCd("05"); // 환불
        orderGoodsPO.setAccountAmt(0f);
        orderGoodsPO.setSaleAmt(0f);
        orderGoodsPO.setQtt((int) vo.getQtt() * (-1));
        orderGoodsPO.setShoppingbagAmt(0f);
        orderGoodsPO.setGiftPackQtt(0);
        orderGoodsPO.setGiftPackAmt(0f);
        if (vo.getDlvrAmt() > 0) {
          orderGoodsPO.setDlvrcGbCd("02"); // 추가 배송비
          orderGoodsPO.setDlvrAmt(vo.getDlvrAmt() * (-1));
          orderGoodsPO.setAreaAddDlvrAmt(vo.getAreaAddDlvrAmt() * (-1));
        } else {
          orderGoodsPO.setDlvrAmt(0f);
          orderGoodsPO.setAreaAddDlvrAmt(0f);
        }
        orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
        orderGoodsPO.setRegDt(today);
        accountList.add(orderGoodsPO);
      }
      insertOrderSalesAccount(accountList);
      break;

    case "90": // 환불완료
      log.debug("============= 매출 정산 테이블 process : 환불완료 ==================");
      // 추가 배송비 결제 취소 정보 조회
      orderInfoVO = new OrderInfoVO();
      orderInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      orderInfoVO.setSiteNo(po.getSiteNo());
      orderInfoVO.setClaimTurn(po.getClaimTurn());
      addPayVO = selectOrderDlvrPayInfo(orderInfoVO); // 추가배송비 결제 데이터
      Float dlvrPartCancelAmt = 0f;// 추가 배송비 부분취소 금액(출고배송비)
      if (po.getDlvrPartCancelAmt() != null && po.getDlvrPartCancelAmt() > 0) {
        if ("Y".equals(po.getDlvrPartCancelYn())) {
          dlvrPartCancelAmt = po.getDlvrPartCancelAmt();
        }
      }
      if (addPayVO != null) {
        addDlvrAmt = addPayVO.getDlvrAmt();
        addAreaAddDlvrAmt = addPayVO.getAreaAddDlvrc();
      }
      orderInfoVO.setPaymentStatusCd("03");
      OrderPayVO cancelAddPayVO = selectOrderDlvrPayInfo(orderInfoVO); // 추가배송비 취소 데이터
      if (cancelAddPayVO != null) {
        cancelAddDlvrAmt = cancelAddPayVO.getDlvrAmt();
        cancelAreaAddDlvrAmt = cancelAddPayVO.getAreaAddDlvrc();
      }

      int refundCnt = selectRefundCount(po); // 환불 카운트

      k = 0;
      dlvrAmt = 0f;
      areaAddDlvrc = 0f;
      shoppingbagAmt = 0f;

      if (refundCnt > 0) {
        po.setExchangeDataYn("Y");
      } else {
        po.setExchangeDataYn("N");
      }
      goodsList = selectSalesAccountList(po); // 매출정산 목록 조회
      for (OrderGoodsVO vo : goodsList) {
        if (vo.getDlvrAmt() > 0) {
          dlvrAmt += vo.getDlvrAmt();
        }
        areaAddDlvrc += vo.getAreaAddDlvrAmt();
        shoppingbagAmt += vo.getShoppingbagAmt();
      }

      // 상품 취소 사은품,추가상품 데이터 추가
      cancelGrpNoList = new ArrayList<>(); // 취소 프로모션 그룹 리스트
      if (po.getCancelGoodsPrmtInfo() != null && po.getCancelGoodsPrmtInfo().size() > 0) {
        for (OrderGoodsVO vo : po.getCancelGoodsPrmtInfo()) {
          long prmtNo = vo.getGoodsPrmtNo();
          long prmtGrpNo = vo.getGoodsPrmtGrpNo();
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(prmtNo);
          PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
          if ("04".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
            for (OrderGoodsVO ogVO : goodsList) {
              if (ogVO.getGoodsPrmtGrpNo() != null) {
                if (ogVO.getGoodsPrmtGrpNo() == prmtGrpNo
                    && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                  cancelGrpNoList.add(prmtGrpNo);
                }
              }
            }
          }
        }
      }
      // 주문 취소 사은품 데이터 추가
      if (po.getCancelOrdPrmtNo() != null && po.getCancelOrdPrmtNo() > 0) {
        long prmtNo = po.getCancelOrdPrmtNo();
        PromotionSO promotionSO = new PromotionSO();
        promotionSO.setPrmtNo(prmtNo);
        PromotionVO prmtVO = selectOrdPromotionInfo(promotionSO);
        if ("04".equals(prmtVO.getPrmtBnfCd2()) || "08".equals(prmtVO.getPrmtBnfCd3())) {
          for (OrderGoodsVO ogVO : goodsList) {
            if (ogVO.getOrdPrmtGrpNo() != null) {
              if (ogVO.getOrdPrmtNo() == prmtNo
                  && ("Y".equals(ogVO.getPlusGoodsYn()) || "Y".equals(ogVO.getFreebieGoodsYn()))) {
                cancelGrpNoList.add(ogVO.getOrdPrmtGrpNo());
              }
            }
          }
        }
      }

      // 반품 후 남은 데이터
      reInfoVO = new OrderInfoVO();
      reInfoVO.setSiteNo((!StringUtil.isEmpty(po.getSiteNo())) ? po.getSiteNo() : siteService.getSiteNo());
      reInfoVO.setOrdNo(Long.toString(po.getOrdNo()));
      reInfoVO.setPartnerNo(po.getPartnerNo());
      reInfoVO.setClaimTurn(po.getClaimTurn()); // 재주문 조회시 필수
      reOrderGoodsList = selectInsertAccountDtlInfoList(reInfoVO); // 재주문 데이터 조회
      po.setAccountStatusCd("01");
      List<OrderGoodsVO> goodsExchangeList = selectSalesAccountExchangeList(po); // 이전 교환된 데이터 조회(플러스 데이터)

      k = 0;
      // 기취소 데이터 제거
      for (int s = 0; s < reOrderGoodsList.size(); s++) {
        OrderGoodsVO vo = reOrderGoodsList.get(s);
        if ("21".equals(vo.getOrdDtlStatusCd())) {
          reOrderGoodsList.remove(s);
          s--;
        }
      }
      // 주문 남은 수량 셋팅
      List<OrderGoodsVO> goodsRemainList = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdRemainQtt", po);
      // int refundCnt = selectRefundCount(po); // 환불 카운트
      for (OrderGoodsVO vo : reOrderGoodsList) {
        for (OrderGoodsVO reVO : goodsRemainList) {
          if (vo.getOrdDtlSeq().equals(reVO.getOrdDtlSeq())) {
            vo.setRemainQtt(reVO.getRemainQtt());
          }
        }
      }
      for (OrderGoodsVO vo : goodsList) {
        for (OrderGoodsVO reVO : goodsRemainList) {
          if (vo.getOrdDtlSeq().equals(reVO.getOrdDtlSeq())) {
            vo.setRemainQtt(reVO.getRemainQtt());
          }
        }
      }
      // 상품 전체 취소 데이터 제거
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (int s = 0; s < reOrderGoodsList.size(); s++) { // 상품 전체 취소 데이터 제거
          OrderGoodsVO vo = reOrderGoodsList.get(s);
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            if (vo.getRemainQtt() - Integer.parseInt(po.getClaimQttArr()[k]) == 0) {
              reOrderGoodsList.remove(s);
              s--;
            } else {
              vo.setClaimQtt(Integer.parseInt(po.getClaimQttArr()[k]));
              vo.setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]));
            }
          }
        }
        k++;
      }
      // 상품 취소 데이터 셋팅
      k = 0;
      for (String ordDtlSeq : po.getOrdDtlSeqArr()) {
        for (int s = 0; s < goodsList.size(); s++) {
          OrderGoodsVO vo = goodsList.get(s);
          if (vo.getClaimQtt() == null)
            vo.setClaimQtt(0);
          if (vo.getAddOptClaimQtt() == null)
            vo.setAddOptClaimQtt(0);
          if (ordDtlSeq.equals(vo.getOrdDtlSeq())) {
            vo.setClaimQtt(Integer.parseInt(po.getClaimQttArr()[k]));
            vo.setAddOptClaimQtt(Integer.parseInt(po.getAddOptClaimQttArr()[k]));
          }
        }
        k++;
      }
      log.debug("======-- reOrderGoodsList.size() : {}", reOrderGoodsList.size());
      // 취소인 상품 사은품 제거
      log.debug("=== cancelGrpNoList : {}", cancelGrpNoList);
      if (cancelGrpNoList != null && cancelGrpNoList.size() > 0) {
        OrderPO addPO = new OrderPO();
        addPO.setOrdNo(po.getOrdNo());
        addPO.setCancelGrpNoList(cancelGrpNoList);
        List<OrderGoodsVO> orgFreebieList = selectSalesAccountEtcFreebieList(addPO);
        if (orgFreebieList != null && orgFreebieList.size() > 0) {
          for (OrderGoodsVO orgVO : orgFreebieList) {
            for (int s = 0; s < reOrderGoodsList.size(); s++) {
              OrderGoodsVO vo = reOrderGoodsList.get(s);
              log.debug("=== vo.getOrdDtlSeq() : {}", vo.getOrdDtlSeq());
              log.debug("=== orgVO.getOrdDtlSeq() : {}", orgVO.getOrdDtlSeq());
              log.debug("=== vo.getFreebieGoodsYn() : {}", vo.getFreebieGoodsYn());
              if (vo.getOrdDtlSeq().equals(orgVO.getOrdDtlSeq())) {
                if ("Y".equals(vo.getPlusGoodsYn()) || "Y".equals(vo.getFreebieGoodsYn())) {
                  log.debug("==== 여기여기");
                  reOrderGoodsList.remove(s);
                  s--;
                }
              }
            }
          }
        }
      }
      log.debug("======++ reOrderGoodsList.size() : {}", reOrderGoodsList.size());
      // 취소가 아닌 일반 사은품 정보 조회
      if (cancelGrpNoList != null && cancelGrpNoList.size() > 0) {
        OrderPO addPO = new OrderPO();
        addPO.setOrdNo(po.getOrdNo());
        addPO.setCancelGrpNoList(cancelGrpNoList);
        List<OrderGoodsVO> addFreebieList = selectSalesAccountEtcList(addPO);
        if (addFreebieList != null && addFreebieList.size() > 0) {
          for (OrderGoodsVO addVO : addFreebieList) {
            addVO.setRemainQtt(addVO.getQtt());
            addVO.setClaimQtt(0);
            addVO.setRemainAddOptQtt(0);
            addVO.setAddOptClaimQtt(0);
            addVO.setAddOptAmt(0f);
            addVO.setExceptYn("Y");
            reOrderGoodsList.add(addVO);
          }
        }
      } else {
        OrderPO addPO = new OrderPO();
        addPO.setOrdNo(po.getOrdNo());
        List<OrderGoodsVO> addFreebieList = selectSalesAccountEtcList(addPO);
        if (addFreebieList != null && addFreebieList.size() > 0) {
          for (OrderGoodsVO addVO : addFreebieList) {
            addVO.setRemainQtt(addVO.getQtt());
            addVO.setClaimQtt(0);
            addVO.setRemainAddOptQtt(0);
            addVO.setAddOptClaimQtt(0);
            addVO.setAddOptAmt(0f);
            addVO.setExceptYn("Y");
            reOrderGoodsList.add(addVO);
          }
        }
      }
      for (OrderGoodsVO vo : goodsList) {
        for (OrderGoodsVO reVO : reOrderGoodsList) {
          if (reVO.getClaimQtt() == null)
            reVO.setClaimQtt(0);
          if (reVO.getAddOptClaimQtt() == null)
            reVO.setAddOptClaimQtt(0);
          if (vo.getOrdDtlSeq().equals(reVO.getOrdDtlSeq())) {
            reVO.setOrdQtt(vo.getQtt() - reVO.getClaimQtt());
            reVO.setAddOptQtt(vo.getGiftPackQtt() - reVO.getAddOptClaimQtt());
          }
        }
      }
      for (OrderGoodsVO exVO : goodsList) {
        log.debug("===== ordDtlSeq : {} / claimQtt : {}", exVO.getOrdDtlSeq(), exVO.getClaimQtt());
      }
      // 세트 상품 조회
      for (OrderGoodsVO gvo : reOrderGoodsList) {
        if (!StringUtil.isEmpty(gvo.getGoodsSetNo())) {
          gvo.setGoodsSetYn("Y");
          List<OrderGoodsVO> goodsSetList = new ArrayList<>();
          goodsSetList = selectOrdGoodsSetList(gvo);
          for (OrderGoodsVO goodsSetVO : goodsSetList) {
            goodsSetVO.setRemainQtt(gvo.getRemainQtt());
            goodsSetVO.setClaimQtt(gvo.getClaimQtt());
          }
          gvo.setGoodsSetList(goodsSetList);
        }
      }
      ordCnt = 0;
      for (OrderGoodsVO cvo : reOrderGoodsList) {
        if (StringUtil.isEmpty(cvo.getGoodsSetNo())) {
          if (!"Y".equals(cvo.getExceptYn()) && (cvo.getRemainQtt() - cvo.getClaimQtt() > 0)) {
            ordCnt++;
          }
        } else {
          if (!"Y".equals(cvo.getExceptYn())) {
            for (OrderGoodsVO svo : cvo.getGoodsSetList()) {
              ordCnt++;
            }
          }
        }
      }

      // 전체 취소 데이터 등록
      List<OrderGoodsVO> newGoodsList = new ArrayList<>();
      for (int s = goodsList.size() - 1; s > -1; s--) {
        OrderGoodsVO vo = (OrderGoodsVO) goodsList.get(s);
        if (refundCnt > 0) {
          OrderGoodsVO newVO = vo.clone();
          newGoodsList.add(newVO);
        } else {
          if (!"Y".equals(vo.getExchangeYn())) {
            OrderGoodsVO newVO = vo.clone();
            newGoodsList.add(newVO);
          }
        }
      }
      tmpOrdDtlSeq = "";
      for (OrderGoodsVO vo : newGoodsList) {
        String giftPackNm = null;
        int giftPackQtt = 0;
        Float giftPackAmt = 0f;
        OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
        BeanUtils.copyProperties(vo, orderGoodsPO);
        orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
        orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
        orderGoodsPO.setClaimTurn(po.getClaimTurn());
        orderGoodsPO.setClaimGbCd("90"); // 환불완료
        orderGoodsPO.setAccountStatusCd("05"); // 환불
        orderGoodsPO.setAccountAmt(vo.getAccountAmt() * (-1));
        orderGoodsPO.setSaleAmt(vo.getSaleAmt() * (-1));
        orderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt() * (-1));
        orderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt() * (-1));
        orderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt() * (-1));
        orderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt() * (-1));
        orderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt() * (-1));
        orderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt() * (-1));
        orderGoodsPO.setQtt((int) vo.getQtt() * (-1));
        orderGoodsPO.setCancelableQtt(vo.getRemainQtt() * (-1)); // 교환을 포함한 남은 수량
        orderGoodsPO.setDlvrAmt(0f);
        orderGoodsPO.setAreaAddDlvrAmt(0f);
        if (reOrderGoodsList != null && reOrderGoodsList.size() > 0) {
          orderGoodsPO.setShoppingbagAmt(vo.getShoppingbagAmt() * (-1));
        } else {
          orderGoodsPO.setShoppingbagAmt(0f);
        }
        // 선물포장 금액 셋팅
        for (OrderGoodsVO ogVO : goodsList) {
          if (ogVO.getOrdDtlSeq().equals(vo.getOrdDtlSeq())) {
            if (ogVO.getGiftPackQtt() > 0) {
              giftPackNm = ogVO.getGiftPackNm();
              giftPackQtt = ogVO.getGiftPackQtt();
              giftPackAmt = ogVO.getGiftPackAmt();
            }
          }
        }
        if (!vo.getOrdDtlSeq().equals(tmpOrdDtlSeq)) {
          if (vo.getRemainQtt() == vo.getClaimQtt() && giftPackQtt != 0) {
            // 해당상품 전체 취소인경우 선물포장 클레임 수량만큼만 취소 처리 한다.
            if (vo.getAddOptClaimQtt() > 0) {
              orderGoodsPO.setGiftPackNm(giftPackNm);
            } else {
              orderGoodsPO.setGiftPackNm(null);
            }
            orderGoodsPO.setGiftPackQtt(vo.getAddOptClaimQtt() * (-1));
            orderGoodsPO.setGiftPackAmt((giftPackAmt / giftPackQtt) * vo.getAddOptClaimQtt() * (-1));
          } else {
            // 해당상품 전체 취소가 아닌 경우 선물포장 주문수량을 전체 취소 처리 한다.
            orderGoodsPO.setGiftPackNm(giftPackNm);
            orderGoodsPO.setGiftPackQtt(giftPackQtt * (-1));
            orderGoodsPO.setGiftPackAmt(giftPackAmt * (-1));
          }
        } else {
          orderGoodsPO.setGiftPackNm(null);
          orderGoodsPO.setGiftPackQtt(0);
          orderGoodsPO.setGiftPackAmt(0f);
        }
        orderGoodsPO.setDlvrcGbCd(vo.getDlvrcGbCd()); // 일반
        orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
        orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
        orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
        orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
        orderGoodsPO.setSvmnAmt(0f);
        orderGoodsPO.setExtraSvmnAmt(0f);
        orderGoodsPO.setSetNo(vo.getSetNo());
        orderGoodsPO.setExchangeYn(vo.getExchangeYn());
        orderGoodsPO.setRegDt(today);
        accountList.add(orderGoodsPO);
        tmpOrdDtlSeq = vo.getOrdDtlSeq();
      }

      for (OrderGoodsPO acVO : accountList) {
        log.debug(
            "======== acVO.getAccountAmt() : {} / acVO.getItemNo() : {} / acVO.getQtt() : {} / acVO.getCancelableQtt() : {}",
            acVO.getAccountAmt(), acVO.getItemNo(), acVO.getQtt(), acVO.getCancelableQtt());
      }

      // 교환 데이터가 있고 환불한 적이 없는 경우 전체취소 교환 데이터 분배
      List<OrderGoodsPO> newAccountList = new ArrayList<>();
      if (goodsExchangeList != null && goodsExchangeList.size() > 0 && refundCnt == 0) {
        for (OrderGoodsPO orderGoodsPO : accountList) {
          List<OrderGoodsVO> newReOrderGoodsList = new ArrayList<>();
          Float sumSaleAmt = 0f;
          Float sumAccountAmt = 0f;
          Float sumGoodsCpDcAmt = 0f;
          Float sumGoodsPrmtDcAmt = 0f;
          Float sumOrdCpDcAmt = 0f;
          Float sumOrdPrmtDcAmt = 0f;
          Float sumOrdDupltCpDcAmt = 0f;
          Float sumOrdDupltPrmtDcAmt = 0f;
          Float sumSvmnAmt = 0f;
          Float sumExtraSvmnAmt = 0f;
          sumShoppingbagAmt = 0f;
          sumDlvrAmt = 0f;
          sumAreaAddDlvrc = 0f;
          int remainQtt = 0;
          // 교환된 데이터 추가
          for (OrderGoodsVO exVO : goodsExchangeList) {
            if (Long.toString(orderGoodsPO.getOrdDtlSeq()).equals(exVO.getOrdDtlSeq())
                && orderGoodsPO.getGoodsNo().equals(exVO.getGoodsNo())) {
              OrderGoodsVO newExVO = new OrderGoodsVO();
              newExVO = exVO.clone();
              newExVO.setQtt(newExVO.getQtt() * (-1));
              newExVO.setAccountAmt(newExVO.getAccountAmt() * (-1));
              newExVO.setSaleAmt(newExVO.getSaleAmt() * (-1));
              newExVO.setGoodsCpDcAmt(newExVO.getGoodsCpDcAmt() * (-1));
              newExVO.setGoodsPrmtDcAmt(newExVO.getGoodsPrmtDcAmt() * (-1));
              newExVO.setOrdCpDcAmt(newExVO.getOrdCpDcAmt() * (-1));
              newExVO.setOrdPrmtDcAmt(newExVO.getOrdPrmtDcAmt() * (-1));
              newExVO.setOrdDupltCpDcAmt(newExVO.getOrdDupltCpDcAmt() * (-1));
              newExVO.setOrdDupltPrmtDcAmt(newExVO.getOrdDupltPrmtDcAmt() * (-1));
              newExVO.setGiftPackNm(orderGoodsPO.getGiftPackNm());
              newExVO.setGiftPackQtt(orderGoodsPO.getGiftPackQtt());
              newExVO.setGiftPackAmt(orderGoodsPO.getGiftPackAmt());
              newExVO.setExchangeYn("Y");
              remainQtt = (int) orderGoodsPO.getCancelableQtt() - newExVO.getQtt();
              log.debug("======== newExVO.getAccountAmt() : {} / remainQtt : {}", newExVO.getAccountAmt(), remainQtt);
              newReOrderGoodsList.add(newExVO);
            }
          }
          // 교환 원본 데이터 추가
          for (OrderGoodsVO exVO : goodsExchangeList) {
            if (Long.toString(orderGoodsPO.getOrdDtlSeq()).equals(exVO.getOrdDtlSeq())
                && orderGoodsPO.getGoodsNo().equals(exVO.getGoodsNo()) && !"Y".equals(orderGoodsPO.getExchangeYn())) {
              if (remainQtt != 0) {
                OrderGoodsVO vo = new OrderGoodsVO();
                BeansUtil.copyProperties(orderGoodsPO, vo);
                vo.setExchangeYn("N");
                vo.setOrdDtlSeq(Long.toString(orderGoodsPO.getOrdDtlSeq()));
                vo.setGiftPackNm(null);
                vo.setGiftPackQtt(0);
                vo.setGiftPackAmt(0f);
                vo.setQtt(remainQtt);
                newReOrderGoodsList.add(vo);
              }
            }
          }

          k = 0;
          for (OrderGoodsVO exVO : newReOrderGoodsList) {
            OrderGoodsPO newPO = new OrderGoodsPO();
            newPO.setOrdNo(orderGoodsPO.getOrdNo());
            newPO.setOrdDtlSeq(orderGoodsPO.getOrdDtlSeq());
            newPO.setClaimTurn(po.getClaimTurn());
            newPO.setClaimGbCd("90"); // 환불완료
            newPO.setAccountStatusCd("05"); // 환불
            newPO.setGoodsNo(exVO.getGoodsNo());
            newPO.setItemNo(exVO.getItemNo());
            newPO.setQtt(exVO.getQtt());
            newPO.setGoodsPrmtGrpNo(orderGoodsPO.getGoodsPrmtGrpNo());
            newPO.setGoodsPrmtNo(orderGoodsPO.getGoodsPrmtNo());
            newPO.setOrdPrmtGrpNo(orderGoodsPO.getOrdPrmtGrpNo());
            newPO.setOrdPrmtNo(orderGoodsPO.getOrdPrmtNo());
            newPO.setDupltPrmtGrpNo(orderGoodsPO.getDupltPrmtGrpNo());
            newPO.setDupltPrmtNo(orderGoodsPO.getDupltPrmtNo());
            newPO.setDlvrcPrmtGrpNo(orderGoodsPO.getDlvrcPrmtGrpNo());
            newPO.setDlvrcPrmtNo(orderGoodsPO.getDlvrcPrmtNo());
            Float eachSaleAmt = (float) Math.round((orderGoodsPO.getSaleAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachGoodsCpDcAmt = (float) Math
                .round((orderGoodsPO.getGoodsCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachGoodsPrmtDcAmt = (float) Math
                .round((orderGoodsPO.getGoodsPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachOrdCpDcAmt = (float) Math
                .round((orderGoodsPO.getOrdCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachOrdPrmtDcAmt = (float) Math
                .round((orderGoodsPO.getOrdPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachOrdDupltCpDcAmt = (float) Math
                .round((orderGoodsPO.getOrdDupltCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachOrdDupltPrmtDcAmt = (float) Math
                .round((orderGoodsPO.getOrdDupltPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachAccountAmt = (float) Math
                .round((orderGoodsPO.getAccountAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachSvmnAmt = (float) Math.round((orderGoodsPO.getSvmnAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            Float eachExtraSvmnAmt = (float) Math
                .round((orderGoodsPO.getExtraSvmnAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            eachShoppingbagAmt = (float) Math
                .round((orderGoodsPO.getShoppingbagAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            eachDlvrAmt = (float) Math.round((orderGoodsPO.getDlvrAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
            eachAreaAddDlvrc = (float) Math
                .round((orderGoodsPO.getAreaAddDlvrAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());

            if (!StringUtil.isEmpty(orderGoodsPO.getGoodsSetNo()) && orderGoodsPO.getQtt() != -1) {
              if (k == newReOrderGoodsList.size() - 1) {
                newPO.setGoodsCpDcAmt((orderGoodsPO.getGoodsCpDcAmt() - sumGoodsCpDcAmt));
                newPO.setGoodsPrmtDcAmt((orderGoodsPO.getGoodsPrmtDcAmt() - sumGoodsPrmtDcAmt));
                newPO.setOrdCpDcAmt((orderGoodsPO.getOrdCpDcAmt() - sumOrdCpDcAmt));
                newPO.setOrdPrmtDcAmt((orderGoodsPO.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt));
                newPO.setOrdDupltCpDcAmt((orderGoodsPO.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt));
                newPO.setOrdDupltPrmtDcAmt((orderGoodsPO.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt));
                newPO.setAccountAmt(orderGoodsPO.getAccountAmt() - sumAccountAmt);
                newPO.setSaleAmt(orderGoodsPO.getSaleAmt() - sumSaleAmt);
                newPO.setSvmnAmt(orderGoodsPO.getSvmnAmt() - sumSvmnAmt);
                newPO.setExtraSvmnAmt(orderGoodsPO.getExtraSvmnAmt() - sumExtraSvmnAmt);
                newPO.setShoppingbagAmt(orderGoodsPO.getShoppingbagAmt() - sumShoppingbagAmt);
                newPO.setDlvrAmt(orderGoodsPO.getDlvrAmt() - sumDlvrAmt);
                newPO.setAreaAddDlvrAmt(orderGoodsPO.getAreaAddDlvrAmt() - sumAreaAddDlvrc);
              } else {
                newPO.setGoodsCpDcAmt(eachGoodsCpDcAmt);
                newPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt);
                newPO.setOrdCpDcAmt(eachOrdCpDcAmt);
                newPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt);
                newPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt);
                newPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt);
                newPO.setAccountAmt(eachAccountAmt);
                newPO.setSaleAmt(eachSaleAmt);
                newPO.setSvmnAmt(eachSvmnAmt);
                newPO.setExtraSvmnAmt(eachExtraSvmnAmt);
                newPO.setShoppingbagAmt(eachShoppingbagAmt);
                newPO.setDlvrAmt(eachDlvrAmt);
                newPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
              }
            } else {
              newPO.setGoodsCpDcAmt(eachGoodsCpDcAmt);
              newPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt);
              newPO.setOrdCpDcAmt(eachOrdCpDcAmt);
              newPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt);
              newPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt);
              newPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt);
              newPO.setAccountAmt(eachAccountAmt);
              newPO.setSaleAmt(eachSaleAmt);
              newPO.setSvmnAmt(eachSvmnAmt);
              newPO.setExtraSvmnAmt(eachExtraSvmnAmt);
              newPO.setShoppingbagAmt(eachShoppingbagAmt);
              newPO.setDlvrAmt(eachDlvrAmt);
              newPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
            }
            newPO.setGiftPackNm(exVO.getGiftPackNm());
            newPO.setGiftPackQtt(exVO.getGiftPackQtt());
            newPO.setGiftPackAmt(exVO.getGiftPackAmt());
            newPO.setDlvrcGbCd(orderGoodsPO.getDlvrcGbCd());
            newPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            newPO.setStoreNo(orderGoodsPO.getStoreNo());
            newPO.setGoodsSetNo(orderGoodsPO.getGoodsSetNo());
            newPO.setPlusGoodsYn(orderGoodsPO.getPlusGoodsYn());
            newPO.setFreebieGoodsYn(orderGoodsPO.getFreebieGoodsYn());
            newPO.setSetNo(orderGoodsPO.getSetNo());
            newPO.setExchangeYn(exVO.getExchangeYn());
            newPO.setRegDt(today);
            newAccountList.add(newPO);

            sumAccountAmt += eachAccountAmt;
            sumSaleAmt += eachSaleAmt;
            sumGoodsCpDcAmt += eachGoodsCpDcAmt;
            sumGoodsPrmtDcAmt += eachGoodsPrmtDcAmt;
            sumOrdCpDcAmt += eachOrdCpDcAmt;
            sumOrdPrmtDcAmt += eachOrdPrmtDcAmt;
            sumOrdDupltCpDcAmt += eachOrdDupltCpDcAmt;
            sumOrdDupltPrmtDcAmt += eachOrdDupltPrmtDcAmt;
            sumSvmnAmt += eachSvmnAmt;
            sumExtraSvmnAmt += eachExtraSvmnAmt;
            sumShoppingbagAmt += eachShoppingbagAmt;
            sumDlvrAmt += eachDlvrAmt;
            sumAreaAddDlvrc += eachAreaAddDlvrc;
            k++;
          }
        }

        for (OrderGoodsVO vo : goodsExchangeList) {
          for (int s = accountList.size() - 1; s > -1; s--) {
            OrderGoodsPO ogPO = (OrderGoodsPO) accountList.get(s);
            if (Long.toString(ogPO.getOrdDtlSeq()).equals(vo.getOrdDtlSeq())
                && ogPO.getGoodsNo().equals(vo.getGoodsNo())) {
              accountList.remove(s);
            }
          }
        }
        if (accountList != null && accountList.size() > 0) {
          newAccountList.addAll(accountList);
        }
      } else {
        newAccountList = accountList;
      }

      // 전체 취소 데이터 배송비, 지역배송비, 쇼핑백 금액 재세팅
      int cancelOrdCnt = 0;
      for (OrderGoodsPO orderGoodsPO : newAccountList) {
        cancelOrdCnt++;
      }
      int j = 1;
      sumShoppingbagAmt = 0f;
      sumDlvrAmt = 0f;
      sumAreaAddDlvrc = 0f;
      String dlvrcGbCd = "01";
      Float tempDlvrAmt = dlvrAmt;
      Float tempAreaAddDlvrc = areaAddDlvrc;
      Float tempCancelRlsDlvrAmt = 0f;
      Float tempAddRlsDlvrAmt = 0f;
      Float tempRlsDlvrAmt = 0f;
      if (cancelAddDlvrAmt > 2500f) {
        cancelAddDlvrAmt = cancelAddDlvrAmt / 2;
        tempCancelRlsDlvrAmt = cancelAddDlvrAmt;
      }
      if (addDlvrAmt > 2500f) {
        addDlvrAmt = addDlvrAmt / 2;
        tempAddRlsDlvrAmt = addDlvrAmt;
      }
      boolean partCancelYn = false;
      for (OrderGoodsVO reVO : reOrderGoodsList) {
        log.debug("==== remainQtt : {}", reVO.getRemainQtt());
        if (reVO.getRemainQtt() > 0) {
          partCancelYn = true;
        }
      }
      if (partCancelYn) { // 전체취소가 아니면
        if (po.getRlsDlvrAmt() == 0f) {
          if (("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
              || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd()))) { // 소비자 과실일 경우 출고배송비 추가
            tempRlsDlvrAmt = tempAddRlsDlvrAmt;
          }
        }
        tempDlvrAmt = (tempDlvrAmt * (-1)) + po.getRefundDlvrAmt() - cancelAddDlvrAmt - tempRlsDlvrAmt;
        tempAreaAddDlvrc = (tempAreaAddDlvrc * (-1)) + po.getRefundAreaAddDlvrc() - cancelAreaAddDlvrAmt;
      } else { // 전체취소 이면
        if (("11".equals(po.getClaimReasonCd()) || "13".equals(po.getClaimReasonCd())
            || "22".equals(po.getClaimReasonCd()) || "90".equals(po.getClaimReasonCd()))) { // 소비자 과실일 경우 출고배송비 추가
          tempRlsDlvrAmt = tempDlvrAmt;
        }
        tempDlvrAmt = (tempDlvrAmt * (-1)) + po.getRefundDlvrAmt() - cancelAddDlvrAmt + tempRlsDlvrAmt
            - tempCancelRlsDlvrAmt;
        tempAreaAddDlvrc = (tempAreaAddDlvrc * (-1)) + po.getRefundAreaAddDlvrc() - cancelAreaAddDlvrAmt;
      }
      if (po.getRefundDlvrAmt() != null && po.getRefundDlvrAmt() > 0) {
        dlvrcGbCd = "02";
      }
      if (addDlvrAmt > 0 || cancelAddDlvrAmt > 0) {
        dlvrcGbCd = "02";
      }
      log.debug("+++ tempDlvramt : {}", tempDlvrAmt);
      log.debug("=== dlvrAmt : {}", dlvrAmt);
      log.debug("=== areaAddDlvrc : {}", areaAddDlvrc);
      log.debug("=== addDlvrAmt : {}", addDlvrAmt);
      log.debug("=== addAreaAddDlvrAmt : {}", addAreaAddDlvrAmt);
      log.debug("=== refundDlvrAmt : {}", po.getRefundDlvrAmt());
      log.debug("=== refundAreaDlvrAmt : {}", po.getRefundAreaAddDlvrc());
      log.debug("=== cancelAddDlvrAmt : {}", cancelAddDlvrAmt);
      log.debug("=== tempRlsDlvrAmt : {}", tempRlsDlvrAmt);
      log.debug("=== tempCancelRlsDlvrAmt : {}", tempCancelRlsDlvrAmt);
      log.debug("=== dlvrPartCancelYn : {}", po.getDlvrPartCancelYn());
      log.debug("=== dlvrPartCancelAmt : {}", dlvrPartCancelAmt);
      for (OrderGoodsPO orderGoodsPO : newAccountList) {
        if (shoppingbagAmt != 0) {
          eachShoppingbagAmt = (float) Math.floor(shoppingbagAmt / cancelOrdCnt);
        }
        if (tempDlvrAmt != 0) {
          eachDlvrAmt = (float) Math.floor(tempDlvrAmt / cancelOrdCnt);
        }
        if (tempAreaAddDlvrc != 0) {
          eachAreaAddDlvrc = (float) Math.floor(tempAreaAddDlvrc / cancelOrdCnt);
        }
        orderGoodsPO.setDlvrcGbCd(dlvrcGbCd);
        if (j == cancelOrdCnt) {
          orderGoodsPO.setShoppingbagAmt((shoppingbagAmt - sumShoppingbagAmt) * (-1));
          orderGoodsPO.setDlvrAmt((tempDlvrAmt - sumDlvrAmt));
          orderGoodsPO.setAreaAddDlvrAmt((tempAreaAddDlvrc - sumAreaAddDlvrc));
        } else {
          orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt * (-1));
          orderGoodsPO.setDlvrAmt(eachDlvrAmt);
          orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
        }
        sumShoppingbagAmt += eachShoppingbagAmt;
        sumDlvrAmt += eachDlvrAmt;
        sumAreaAddDlvrc += eachAreaAddDlvrc;
        j++;
      }
      insertOrderSalesAccount(newAccountList);

      k = 0;
      sumShoppingbagAmt = 0f;
      sumDlvrAmt = 0f;
      sumAreaAddDlvrc = 0f;
      accountList = new ArrayList();
      dlvrAmt = dlvrAmt - tempCancelRlsDlvrAmt + po.getRlsDlvrAmt() + tempRlsDlvrAmt - dlvrPartCancelAmt;
      log.debug("======== shoppingbagAmt : {}", shoppingbagAmt);
      log.debug("======== dlvrAmt : {}", dlvrAmt);
      log.debug("======== areaAddDlvrc : {}", areaAddDlvrc);
      log.debug("======== reOrderGoodsList.size()2 : {}", reOrderGoodsList.size());
      log.debug("======== reOrderGoodsList2 : {}", reOrderGoodsList);
      if (reOrderGoodsList != null && reOrderGoodsList.size() > 0) {
        if (shoppingbagAmt > 0) {
          eachShoppingbagAmt = (float) Math.floor(shoppingbagAmt / ordCnt);
        }
        if (dlvrAmt > 0) {
          eachDlvrAmt = (float) Math.floor(dlvrAmt / ordCnt);
        }
        if (areaAddDlvrc > 0) {
          eachAreaAddDlvrc = (float) Math.floor(areaAddDlvrc / ordCnt);
        }
        if (po.getNewOrdNo() != 0) { // 재주문 환불
          // 재주문 환불 관련 남은 데이터 셋팅
          po.setClaimGbCd("70");
          List<OrderGoodsVO> refundRequestList = selectSalesAccountRequestList(po); // 환불 요청 목록 조회
          po.setClaimGbCd("90");
          for (OrderGoodsVO requestVO : refundRequestList) {
            for (int s = goodsExchangeList.size() - 1; s >= 0; s--) {
              OrderGoodsVO exVO = (OrderGoodsVO) goodsExchangeList.get(s);
              if (requestVO.getOrdDtlSeq().equals(exVO.getOrdDtlSeq())
                  && requestVO.getItemNo().equals(exVO.getItemNo())) {
                if (exVO.getQtt() == (requestVO.getQtt() * (-1))) {
                  goodsExchangeList.remove(s);
                } else {
                  exVO.setQtt(exVO.getQtt() - (requestVO.getQtt() * (-1)));
                }
              }
            }
          }
        }
        for (OrderGoodsVO exVO : goodsExchangeList) {
          log.debug("===== exVO.getOrdDtlSeq() : {} / exVO.getItemNo() : {} / exVO.getQtt() : {}", exVO.getOrdDtlSeq(),
              exVO.getItemNo(), exVO.getQtt());
        }
        for (OrderGoodsVO vo : reOrderGoodsList) {
          if (vo.getClaimQtt() == null)
            vo.setClaimQtt(0);
          if (vo.getAddOptClaimQtt() == null)
            vo.setAddOptClaimQtt(0);
          if (StringUtil.isEmpty(vo.getGoodsSetNo()) || "Y".equals(vo.getExceptYn())) { // 일반상품
            OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
            BeanUtils.copyProperties(vo, orderGoodsPO);
            orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
            orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
            orderGoodsPO.setClaimTurn(po.getClaimTurn());
            orderGoodsPO.setClaimGbCd("90"); // 환불완료
            orderGoodsPO.setAccountStatusCd("06"); // 변경

            orderGoodsPO.setSaleAmt(vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt()));
            orderGoodsPO.setGoodsCpDcAmt(vo.getGoodsCpDcAmt() * (-1));
            orderGoodsPO.setGoodsPrmtDcAmt(vo.getGoodsPrmtDcAmt() * (-1));
            orderGoodsPO.setOrdCpDcAmt(vo.getOrdCpDcAmt() * (-1));
            orderGoodsPO.setOrdPrmtDcAmt(vo.getOrdPrmtDcAmt() * (-1));
            orderGoodsPO.setOrdDupltCpDcAmt(vo.getOrdDupltCpDcAmt() * (-1));
            orderGoodsPO.setOrdDupltPrmtDcAmt(vo.getOrdDupltPrmtDcAmt() * (-1));
            orderGoodsPO.setQtt((vo.getRemainQtt() - vo.getClaimQtt()));
            orderGoodsPO.setAccountAmt((vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) - vo.getGoodsCpDcAmt()
                - vo.getGoodsPrmtDcAmt() - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt()
                - vo.getOrdDupltPrmtDcAmt());
            orderGoodsPO.setDlvrcGbCd("01");
            if (!"Y".equals(vo.getExceptYn())) {
              if (i == ordCnt) {
                orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
              } else {
                orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(eachDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
              }
            }
            orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
            orderGoodsPO.setGiftPackQtt(vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt());
            orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
            orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
            orderGoodsPO.setStoreNo(vo.getStoreNo());
            orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
            orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
            orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
            orderGoodsPO.setSvmnAmt(vo.getPvdSvmn());
            orderGoodsPO.setExtraSvmnAmt(vo.getExtraSvmnAmt());
            orderGoodsPO.setExchangeYn(vo.getExchangeYn());
            orderGoodsPO.setSetNo(vo.getSetNo());
            orderGoodsPO.setRegDt(today);
            accountList.add(orderGoodsPO);
            if (!"Y".equals(vo.getExceptYn())) {
              sumShoppingbagAmt += eachShoppingbagAmt;
              sumDlvrAmt += eachDlvrAmt;
              sumAreaAddDlvrc += eachAreaAddDlvrc;
              i++;
            }
          } else {
            k = 0;
            boolean giftPackApplyYn = false;
            Float sumSaleAmt = 0f;
            Float sumAccountAmt = 0f;
            Float sumGoodsCpDcAmt = 0f;
            Float sumGoodsPrmtDcAmt = 0f;
            Float sumOrdCpDcAmt = 0f;
            Float sumOrdPrmtDcAmt = 0f;
            Float sumOrdDupltCpDcAmt = 0f;
            Float sumOrdDupltPrmtDcAmt = 0f;
            Float sumDlvrcCpDcAmt = 0f;
            Float sumDlvrcPrmtDcAmt = 0f;
            Float sumSvmnAmt = 0f;
            Float sumExtraSvmnAmt = 0f;
            // 세트상품 원본 금액
            Float orgSaleAmt = (vo.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) - vo.getGoodsCpDcAmt()
                - vo.getGoodsPrmtDcAmt() - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt() - vo.getOrdDupltCpDcAmt()
                - vo.getOrdDupltPrmtDcAmt();
            List<OrderGoodsVO> goodsSetList = vo.getGoodsSetList();
            for (OrderGoodsVO goodsSetVO : goodsSetList) {
              sumSaleAmt += (goodsSetVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt()));
            }
            for (OrderGoodsVO setVO : goodsSetList) {
              setVO.setClaimQtt(vo.getClaimQtt());
              setVO.setAddOptClaimQtt(vo.getAddOptClaimQtt());
              OrderGoodsPO orderGoodsPO = new OrderGoodsPO();
              BeanUtils.copyProperties(setVO, orderGoodsPO);
              orderGoodsPO.setOrdNo(Long.parseLong(vo.getOrdNo()));
              orderGoodsPO.setOrdDtlSeq(Long.parseLong(vo.getOrdDtlSeq()));
              orderGoodsPO.setClaimTurn(po.getClaimTurn());
              orderGoodsPO.setClaimGbCd("90"); // 환불완료
              orderGoodsPO.setAccountStatusCd("06"); // 변경
              Float eachSaleAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getSaleAmt());
              Float eachGoodsCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getGoodsCpDcAmt());
              Float eachGoodsPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getGoodsPrmtDcAmt());
              Float eachOrdCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdCpDcAmt());
              Float eachOrdPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdPrmtDcAmt());
              Float eachOrdDupltCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getOrdDupltCpDcAmt());
              Float eachOrdDupltPrmtDcAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt
                      * vo.getOrdDupltPrmtDcAmt());
              Float eachDlvrcCpDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getDlvrcCpDcAmt());
              Float eachDlvrcPrmtDcAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getDlvrcPrmtDcAmt());
              Float eachAccountAmt = (eachSaleAmt * (vo.getRemainQtt() - vo.getClaimQtt())) - eachGoodsCpDcAmt
                  - eachGoodsPrmtDcAmt - eachOrdCpDcAmt - eachOrdPrmtDcAmt - eachOrdDupltCpDcAmt
                  - eachOrdDupltPrmtDcAmt;
              Float eachSvmnAmt = (float) Math
                  .round((setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getPvdSvmn());
              Float eachExtraSvmnAmt = (float) Math.round(
                  (setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt())) / sumSaleAmt * vo.getExtraSvmnAmt());
              if (k == goodsSetList.size() - 1) {
                orderGoodsPO.setGoodsCpDcAmt((vo.getGoodsCpDcAmt() - sumGoodsCpDcAmt) * (-1));
                orderGoodsPO.setGoodsPrmtDcAmt((vo.getGoodsPrmtDcAmt() - sumGoodsPrmtDcAmt) * (-1));
                orderGoodsPO.setOrdCpDcAmt((vo.getOrdCpDcAmt() - sumOrdCpDcAmt) * (-1));
                orderGoodsPO.setOrdPrmtDcAmt((vo.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt) * (-1));
                orderGoodsPO.setOrdDupltCpDcAmt((vo.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt) * (-1));
                orderGoodsPO.setOrdDupltPrmtDcAmt((vo.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt) * (-1));
                orderGoodsPO.setDlvrcCpDcAmt((vo.getDlvrcCpDcAmt() - sumDlvrcCpDcAmt) * (-1));
                orderGoodsPO.setDlvrcPrmtDcAmt((vo.getDlvrcPrmtDcAmt() - sumDlvrcPrmtDcAmt) * (-1));
                orderGoodsPO.setAccountAmt(orgSaleAmt - sumAccountAmt);
                orderGoodsPO.setSvmnAmt((vo.getPvdSvmn() - sumSvmnAmt));
                orderGoodsPO.setExtraSvmnAmt((vo.getExtraSvmnAmt() - sumExtraSvmnAmt));
              } else {
                orderGoodsPO.setGoodsCpDcAmt(eachGoodsCpDcAmt * (-1));
                orderGoodsPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt * (-1));
                orderGoodsPO.setOrdCpDcAmt(eachOrdCpDcAmt * (-1));
                orderGoodsPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt * (-1));
                orderGoodsPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt * (-1));
                orderGoodsPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt * (-1));
                orderGoodsPO.setDlvrcCpDcAmt(eachDlvrcCpDcAmt * (-1));
                orderGoodsPO.setDlvrcPrmtDcAmt(eachDlvrcPrmtDcAmt * (-1));
                orderGoodsPO.setAccountAmt(eachAccountAmt);
                orderGoodsPO.setSvmnAmt(eachSvmnAmt);
                orderGoodsPO.setExtraSvmnAmt(eachExtraSvmnAmt);
              }
              orderGoodsPO.setGoodsPrmtGrpNo(vo.getGoodsPrmtGrpNo());
              orderGoodsPO.setGoodsPrmtNo(vo.getGoodsPrmtNo());
              orderGoodsPO.setOrdPrmtGrpNo(vo.getOrdPrmtGrpNo());
              orderGoodsPO.setOrdPrmtNo(vo.getOrdPrmtNo());
              orderGoodsPO.setDupltPrmtGrpNo(vo.getDupltPrmtGrpNo());
              orderGoodsPO.setDupltPrmtNo(vo.getDupltPrmtNo());
              orderGoodsPO.setDlvrcPrmtGrpNo(vo.getDlvrcPrmtGrpNo());
              orderGoodsPO.setDlvrcPrmtNo(vo.getDlvrcPrmtNo());
              orderGoodsPO.setQtt((vo.getRemainQtt() - vo.getClaimQtt()));
              orderGoodsPO.setSaleAmt(setVO.getSaleAmt() * (vo.getRemainQtt() - vo.getClaimQtt()));
              if ("Y".equals(vo.getAddOptYn()) && !giftPackApplyYn) {
                orderGoodsPO.setGiftPackNm(vo.getAddOptNm());
                orderGoodsPO.setGiftPackQtt(vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt());
                orderGoodsPO.setGiftPackAmt(vo.getAddOptAmt() * (vo.getRemainAddOptQtt() - vo.getAddOptClaimQtt()));
                giftPackApplyYn = true;
              } else {
                orderGoodsPO.setGiftPackNm(null);
                orderGoodsPO.setGiftPackQtt(0);
                orderGoodsPO.setGiftPackAmt(0f);
              }
              orderGoodsPO.setDlvrcGbCd("01");
              if (i == ordCnt) {
                orderGoodsPO.setShoppingbagAmt(shoppingbagAmt - sumShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(dlvrAmt - sumDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(areaAddDlvrc - sumAreaAddDlvrc);
              } else {
                orderGoodsPO.setShoppingbagAmt(eachShoppingbagAmt);
                orderGoodsPO.setDlvrAmt(eachDlvrAmt);
                orderGoodsPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
              }
              orderGoodsPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
              orderGoodsPO.setStoreNo(vo.getStoreNo());
              orderGoodsPO.setGoodsSetNo(vo.getGoodsSetNo());
              orderGoodsPO.setPlusGoodsYn(vo.getPlusGoodsYn());
              orderGoodsPO.setFreebieGoodsYn(vo.getFreebieGoodsYn());
              orderGoodsPO.setSetNo(vo.getSetNo());
              orderGoodsPO.setRegDt(today);
              accountList.add(orderGoodsPO);
              sumAccountAmt += eachAccountAmt;
              sumGoodsCpDcAmt += eachGoodsCpDcAmt;
              sumGoodsPrmtDcAmt += eachGoodsPrmtDcAmt;
              sumOrdCpDcAmt += eachOrdCpDcAmt;
              sumOrdPrmtDcAmt += eachOrdPrmtDcAmt;
              sumOrdDupltCpDcAmt += eachOrdDupltCpDcAmt;
              sumOrdDupltPrmtDcAmt += eachOrdDupltPrmtDcAmt;
              sumDlvrcCpDcAmt += eachDlvrcCpDcAmt;
              sumDlvrcPrmtDcAmt += eachDlvrcPrmtDcAmt;
              sumSvmnAmt += eachSvmnAmt;
              sumExtraSvmnAmt += eachExtraSvmnAmt;

              sumShoppingbagAmt += eachShoppingbagAmt;
              sumDlvrAmt += eachDlvrAmt;
              sumAreaAddDlvrc += eachAreaAddDlvrc;
              k++;
              i++;
            }
          }
        }
        // 교환 데이터 분배
        newAccountList = new ArrayList<>();
        if (goodsExchangeList != null && goodsExchangeList.size() > 0) {
          for (OrderGoodsPO orderGoodsPO : accountList) {
            List<OrderGoodsVO> newReOrderGoodsList = new ArrayList<>();
            Float sumSaleAmt = 0f;
            Float sumAccountAmt = 0f;
            Float sumGoodsCpDcAmt = 0f;
            Float sumGoodsPrmtDcAmt = 0f;
            Float sumOrdCpDcAmt = 0f;
            Float sumOrdPrmtDcAmt = 0f;
            Float sumOrdDupltCpDcAmt = 0f;
            Float sumOrdDupltPrmtDcAmt = 0f;
            Float sumSvmnAmt = 0f;
            Float sumExtraSvmnAmt = 0f;
            sumShoppingbagAmt = 0f;
            sumDlvrAmt = 0f;
            sumAreaAddDlvrc = 0f;
            int remainQtt = 0;
            for (OrderGoodsVO exVO : goodsExchangeList) {
              if (Long.toString(orderGoodsPO.getOrdDtlSeq()).equals(exVO.getOrdDtlSeq())
                  && orderGoodsPO.getGoodsNo().equals(exVO.getGoodsNo())) {
                exVO.setExchangeYn("Y");
                exVO.setGiftPackNm(orderGoodsPO.getGiftPackNm());
                exVO.setGiftPackQtt(orderGoodsPO.getGiftPackQtt());
                exVO.setGiftPackAmt(orderGoodsPO.getGiftPackAmt());
                newReOrderGoodsList.add(exVO);
                remainQtt = orderGoodsPO.getQtt() - exVO.getQtt();
              }
            }
            for (OrderGoodsVO exVO : goodsExchangeList) {
              if (Long.toString(orderGoodsPO.getOrdDtlSeq()).equals(exVO.getOrdDtlSeq())
                  && orderGoodsPO.getGoodsNo().equals(exVO.getGoodsNo())) {
                if (remainQtt > 0) {
                  OrderGoodsVO vo = new OrderGoodsVO();
                  BeansUtil.copyProperties(orderGoodsPO, vo);
                  vo.setExchangeYn("N");
                  vo.setGiftPackNm(null);
                  vo.setGiftPackQtt(0);
                  vo.setGiftPackAmt(0f);
                  vo.setQtt(remainQtt);
                  newReOrderGoodsList.add(vo);
                }
              }
            }
            k = 0;
            boolean giftPackApplyYn = false;
            for (OrderGoodsVO exVO : newReOrderGoodsList) {
              OrderGoodsPO newPO = new OrderGoodsPO();
              newPO.setOrdNo(orderGoodsPO.getOrdNo());
              newPO.setOrdDtlSeq(orderGoodsPO.getOrdDtlSeq());
              newPO.setClaimTurn(po.getClaimTurn());
              newPO.setClaimGbCd("90"); // 환불완료
              newPO.setAccountStatusCd("06"); // 변경
              newPO.setGoodsNo(exVO.getGoodsNo());
              newPO.setItemNo(exVO.getItemNo());
              newPO.setQtt(exVO.getQtt());
              newPO.setGoodsPrmtGrpNo(orderGoodsPO.getGoodsPrmtGrpNo());
              newPO.setGoodsPrmtNo(orderGoodsPO.getGoodsPrmtNo());
              newPO.setOrdPrmtGrpNo(orderGoodsPO.getOrdPrmtGrpNo());
              newPO.setOrdPrmtNo(orderGoodsPO.getOrdPrmtNo());
              newPO.setDupltPrmtGrpNo(orderGoodsPO.getDupltPrmtGrpNo());
              newPO.setDupltPrmtNo(orderGoodsPO.getDupltPrmtNo());
              newPO.setDlvrcPrmtGrpNo(orderGoodsPO.getDlvrcPrmtGrpNo());
              newPO.setDlvrcPrmtNo(orderGoodsPO.getDlvrcPrmtNo());
              Float eachSaleAmt = (float) Math
                  .round((orderGoodsPO.getSaleAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachGoodsCpDcAmt = (float) Math
                  .round((orderGoodsPO.getGoodsCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachGoodsPrmtDcAmt = (float) Math
                  .round((orderGoodsPO.getGoodsPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachOrdCpDcAmt = (float) Math
                  .round((orderGoodsPO.getOrdCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachOrdPrmtDcAmt = (float) Math
                  .round((orderGoodsPO.getOrdPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachOrdDupltCpDcAmt = (float) Math
                  .round((orderGoodsPO.getOrdDupltCpDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachOrdDupltPrmtDcAmt = (float) Math
                  .round((orderGoodsPO.getOrdDupltPrmtDcAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachAccountAmt = (float) Math
                  .round((orderGoodsPO.getAccountAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachSvmnAmt = (float) Math
                  .round((orderGoodsPO.getSvmnAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              Float eachExtraSvmnAmt = (float) Math
                  .round((orderGoodsPO.getExtraSvmnAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              eachShoppingbagAmt = (float) Math
                  .round((orderGoodsPO.getShoppingbagAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              eachDlvrAmt = (float) Math.round((orderGoodsPO.getDlvrAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());
              eachAreaAddDlvrc = (float) Math
                  .round((orderGoodsPO.getAreaAddDlvrAmt() / orderGoodsPO.getQtt()) * exVO.getQtt());

              if (!StringUtil.isEmpty(orderGoodsPO.getGoodsSetNo())) {
                if (k == newReOrderGoodsList.size() - 1) {
                  newPO.setGoodsCpDcAmt((orderGoodsPO.getGoodsCpDcAmt() - sumGoodsCpDcAmt));
                  newPO.setGoodsPrmtDcAmt((orderGoodsPO.getGoodsPrmtDcAmt() - sumGoodsPrmtDcAmt));
                  newPO.setOrdCpDcAmt((orderGoodsPO.getOrdCpDcAmt() - sumOrdCpDcAmt));
                  newPO.setOrdPrmtDcAmt((orderGoodsPO.getOrdPrmtDcAmt() - sumOrdPrmtDcAmt));
                  newPO.setOrdDupltCpDcAmt((orderGoodsPO.getOrdDupltCpDcAmt() - sumOrdDupltCpDcAmt));
                  newPO.setOrdDupltPrmtDcAmt((orderGoodsPO.getOrdDupltPrmtDcAmt() - sumOrdDupltPrmtDcAmt));
                  newPO.setAccountAmt(orderGoodsPO.getAccountAmt() - sumAccountAmt);
                  newPO.setSaleAmt(orderGoodsPO.getSaleAmt() - sumSaleAmt);
                  newPO.setSvmnAmt(orderGoodsPO.getSvmnAmt() - sumSvmnAmt);
                  newPO.setExtraSvmnAmt(orderGoodsPO.getExtraSvmnAmt() - sumExtraSvmnAmt);
                  newPO.setShoppingbagAmt(orderGoodsPO.getShoppingbagAmt() - sumShoppingbagAmt);
                  newPO.setDlvrAmt(orderGoodsPO.getDlvrAmt() - sumDlvrAmt);
                  newPO.setAreaAddDlvrAmt(orderGoodsPO.getAreaAddDlvrAmt() - sumAreaAddDlvrc);
                } else {
                  newPO.setGoodsCpDcAmt(eachGoodsCpDcAmt);
                  newPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt);
                  newPO.setOrdCpDcAmt(eachOrdCpDcAmt);
                  newPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt);
                  newPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt);
                  newPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt);
                  newPO.setAccountAmt(eachAccountAmt);
                  newPO.setSaleAmt(eachSaleAmt);
                  newPO.setSvmnAmt(eachSvmnAmt);
                  newPO.setExtraSvmnAmt(eachExtraSvmnAmt);
                  newPO.setShoppingbagAmt(eachShoppingbagAmt);
                  newPO.setDlvrAmt(eachDlvrAmt);
                  newPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
                }
              } else {
                newPO.setGoodsCpDcAmt(eachGoodsCpDcAmt);
                newPO.setGoodsPrmtDcAmt(eachGoodsPrmtDcAmt);
                newPO.setOrdCpDcAmt(eachOrdCpDcAmt);
                newPO.setOrdPrmtDcAmt(eachOrdPrmtDcAmt);
                newPO.setOrdDupltCpDcAmt(eachOrdDupltCpDcAmt);
                newPO.setOrdDupltPrmtDcAmt(eachOrdDupltPrmtDcAmt);
                newPO.setAccountAmt(eachAccountAmt);
                newPO.setSaleAmt(eachSaleAmt);
                newPO.setSvmnAmt(eachSvmnAmt);
                newPO.setExtraSvmnAmt(eachExtraSvmnAmt);
                newPO.setShoppingbagAmt(eachShoppingbagAmt);
                newPO.setDlvrAmt(eachDlvrAmt);
                newPO.setAreaAddDlvrAmt(eachAreaAddDlvrc);
              }
              if (exVO.getGiftPackQtt() > 0 && !giftPackApplyYn) {
                newPO.setGiftPackNm(exVO.getGiftPackNm());
                newPO.setGiftPackQtt(exVO.getGiftPackQtt());
                newPO.setGiftPackAmt(exVO.getGiftPackAmt());
                giftPackApplyYn = true;
              } else {
                newPO.setGiftPackNm(null);
                newPO.setGiftPackQtt(0);
                newPO.setGiftPackAmt(0f);
              }
              newPO.setDlvrcGbCd(orderGoodsPO.getDlvrcGbCd());
              newPO.setRegrNo(orderDtl.getOrderInfoVO().getMemberNo());
              newPO.setStoreNo(orderGoodsPO.getStoreNo());
              newPO.setGoodsSetNo(orderGoodsPO.getGoodsSetNo());
              newPO.setPlusGoodsYn(orderGoodsPO.getPlusGoodsYn());
              newPO.setFreebieGoodsYn(orderGoodsPO.getFreebieGoodsYn());
              newPO.setSetNo(orderGoodsPO.getSetNo());
              newPO.setExchangeYn(exVO.getExchangeYn());
              newPO.setRegDt(today);
              newAccountList.add(newPO);

              sumAccountAmt += eachAccountAmt;
              sumSaleAmt += eachSaleAmt;
              sumGoodsCpDcAmt += eachGoodsCpDcAmt;
              sumGoodsPrmtDcAmt += eachGoodsPrmtDcAmt;
              sumOrdCpDcAmt += eachOrdCpDcAmt;
              sumOrdPrmtDcAmt += eachOrdPrmtDcAmt;
              sumOrdDupltCpDcAmt += eachOrdDupltCpDcAmt;
              sumOrdDupltPrmtDcAmt += eachOrdDupltPrmtDcAmt;
              sumSvmnAmt += eachSvmnAmt;
              sumExtraSvmnAmt += eachExtraSvmnAmt;
              sumShoppingbagAmt += eachShoppingbagAmt;
              sumDlvrAmt += eachDlvrAmt;
              sumAreaAddDlvrc += eachAreaAddDlvrc;
              k++;
            }
          }
          for (OrderGoodsVO vo : goodsExchangeList) {
            for (int s = accountList.size() - 1; s > -1; s--) {
              OrderGoodsPO orderGoodsPO = (OrderGoodsPO) accountList.get(s);
              if (Long.toString(orderGoodsPO.getOrdDtlSeq()).equals(vo.getOrdDtlSeq())
                  && orderGoodsPO.getGoodsNo().equals(vo.getGoodsNo())) {
                accountList.remove(s);
              }
            }
          }
          if (accountList != null && accountList.size() > 0) {
            for (OrderGoodsPO acPO : accountList) {
              if (acPO.getQtt() > 0) {
                newAccountList.add(acPO);
              }
            }
          }
        } else {
          for (OrderGoodsPO acPO : accountList) {
            if (acPO.getQtt() > 0) {
              newAccountList.add(acPO);
            }
          }
        }
        insertOrderSalesAccount(newAccountList);
      }
      break;
    }

  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 12. 19.
   * 작성자 : zouki
   * 설명   : 주문 상품 테이블의 구매 확정 처리
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 12. 19. zouki - 최초생성
   * </pre>
   *
   * @param vo
   * @return
   * @throws CustomException
   */
  @Override
  public ResultModel<OrderInfoVO> updateOrdDtlStatusCdConfirm(OrderGoodsVO vo) throws Exception {

    ResultModel<OrderInfoVO> result = new ResultModel<>();

    if (vo.getRegrNo() == null || ("").equals(vo.getRegrNo())) {
      vo.setRegrNo(SessionDetailHelper.getDetails().getSession().getMemberNo());
      vo.setSiteNo(siteService.getSiteNo());
    }

    int cnt = proxyDao.update(MapperConstants.ORDER_MANAGE + "updateOrdDtlStatusCdConfirm", vo);
    if (cnt > 0) {

      Long siteNo = (!StringUtil.isEmpty(vo.getSiteNo())) ? vo.getSiteNo() : siteService.getSiteNo();
      Integer partnerNo = (!StringUtil.isEmpty(vo.getPartnerNo())) ? vo.getPartnerNo() : siteService.getPartnerNo();

      SiteVO siteVO = cacheService.selectBasicInfo(siteNo, partnerNo);
      // if ("Y".equals(siteVO.getSvmnPvdYn())) {
      OrderInfoVO orderInfoVO = new OrderInfoVO();
      orderInfoVO.setOrdNo(vo.getOrdNo());
      orderInfoVO.setOrdDtlSeq(vo.getOrdDtlSeq());
      OrderGoodsVO orderGoodsVO = this.selectOrdDtlConfirmInfo(orderInfoVO);
      if (orderGoodsVO.getSvmnAmt() > 0 && orderGoodsVO.getMemberNo() > 0l) {
        String validPeriod = DateUtil.getNowDate();
        if (siteVO.getSvmnUseLimitday() > 0) {
          validPeriod = DateUtil.addMonths(validPeriod, siteVO.getSvmnUseLimitday());
        }

        // 적립금 사용 정보 등록
        SavedmnPointPO savedmnPointPO = new SavedmnPointPO();
        savedmnPointPO.setSiteNo(vo.getSiteNo());
        savedmnPointPO.setPartnerNo(orderGoodsVO.getPartnerNo());
        savedmnPointPO.setOrdNo(orderGoodsVO.getOrdNo());
        savedmnPointPO.setOrdDtlSeq(orderGoodsVO.getOrdDtlSeq());
        savedmnPointPO.setGbCd("10"); // 지급
        if (siteVO.getSvmnUseLimitday() > 0) {
          savedmnPointPO.setEtcValidPeriod(validPeriod); // 유효기간
        } else {
          savedmnPointPO.setEtcValidPeriod("99991231"); // 유효기간
        }
        savedmnPointPO.setMemberNo(orderGoodsVO.getMemberNo()); // 회원번호
        savedmnPointPO.setTypeCd("A"); // 유형코드(A:자동, M:수동)
        savedmnPointPO.setReasonCd("02"); // 사유코드(상품구매 추가 지급)
        savedmnPointPO.setEtcReason(""); // 기타사유
        savedmnPointPO.setPrcAmt(orderGoodsVO.getSvmnAmt());
        savedmnPointPO.setSvmnUsePsbYn("Y"); // 적립금 사용 가능 여부
        savedMnPointService.insertSavedMn(savedmnPointPO);
      }
      result.setMessage(MessageUtil.getMessage("biz.common.update"));
      // }
    }
    return result;
  }

  /**
   *
   * <pre>
   * 작성일 : 2017. 12. 19.
   * 작성자 : zouki
   * 설명   : 주문 상품 구매확정 정보 조회
   *
   * 수정내역(수정일 수정자 - 수정내용)
   * -------------------------------------------------------------------------
   * 2017. 12. 19. zouki- 최초생성
   * </pre>
   *
   * @param vo
   * @return
   */
  public OrderGoodsVO selectOrdDtlConfirmInfo(OrderInfoVO vo) {
    return proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdDtlConfirmInfo", vo);
  }

  @Override
  public ResultModel<OrderInfoPO> updateStoreSendCnt(OrderInfoPO po) throws Exception {
    ResultModel<OrderInfoPO> result = new ResultModel<OrderInfoPO>();
    proxyDao.update(MapperConstants.ORDER_MANAGE + "updateStoreSendCnt", po);
    result.setSuccess(true);
    return result;
  }

  /** 프로모션 할인 정보 계산 **/
  @Override
  public List<OrderGoodsVO> calcPrmtDiscount(List<OrderGoodsVO> list, Long ordPrmtNo, Long dupltPrmtNo)
      throws Exception {

    List<OrderGoodsVO> resultList = new ArrayList<OrderGoodsVO>();
    log.debug("========= 프로모션 할인 정보 계산 ==========");
    if (list != null && list.size() > 0) {
      Float dcAmt = 0f; // 주문 쿠폰/프로모션 할인금액
      // 할인금액 초기화
      for (OrderGoodsVO vo : list) {
        if (vo.getOrdPrmtDcAmt() == null)
          vo.setOrdPrmtDcAmt(0f);
        if (vo.getOrdCpDcAmt() == null)
          vo.setOrdCpDcAmt(0f);
        if (vo.getOrdDupltPrmtDcAmt() == null)
          vo.setOrdDupltPrmtDcAmt(0f);
        if (vo.getOrdDupltCpDcAmt() == null)
          vo.setOrdDupltCpDcAmt(0f);
        if (vo.getDlvrcPrmtDcAmt() == null)
          vo.setDlvrcPrmtDcAmt(0f);
        if (vo.getDlvrcCpDcAmt() == null)
          vo.setDlvrcCpDcAmt(0f);
      }
      if (ordPrmtNo != 0) {
        log.debug("========= 주문 쿠폰/프로모션 할인 계산==========");
        // 프로모션 정보 조회
        PromotionSO promotionSO = new PromotionSO();
        promotionSO.setPrmtNo(ordPrmtNo);
        PromotionVO promotionVO = selectOrdPromotionInfo(promotionSO);

        int i = 1;
        Float sumSaleAmt = 0f;
        Float sumPrmtDcAmt = 0f;
        Float totalDcAmt = 0f;
        int listSize = 0;
        for (OrderGoodsVO vo : list) {
          log.debug("===== vo.getGoodsPrmtNo() : {}", vo.getGoodsPrmtNo());
          if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
              && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
            sumSaleAmt += (vo.getSaleAmt() * vo.getOrdQtt());
            listSize++;
          }
        }
        String prmtKindCd = promotionVO.getPrmtKindCd();
        log.debug("========= prmtKindCd : {}", prmtKindCd);
        if ("01".equals(promotionVO.getPrmtBnfCd2())) { // 정률
          for (OrderGoodsVO vo : list) {
            if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
                && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
              totalDcAmt += (float) Math
                  .round((vo.getSaleAmt() * vo.getOrdQtt()) * (promotionVO.getPrmtBnfDcRate() / 100));
            }
          }
          for (OrderGoodsVO vo : list) {
            if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
                && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
              log.debug("========= vo.getCustomerAmt : {}", vo.getCustomerAmt());
              log.debug("========= vo.getSaleAmt() : {}", vo.getSaleAmt());
              log.debug("=== saleAmt : {}", vo.getSaleAmt());
              log.debug("=== qtt : {}", vo.getOrdQtt());
              log.debug("=== sumSaleAmt : {}", sumSaleAmt);
              // Float dcRate = promotionVO.getPrmtBnfDcRate();
              // Float totalDcAmt = (float) Math.round(sumSaleAmt * (dcRate / 100));
              Float eachDcAmt = (float) Math
                  .round((vo.getSaleAmt() * vo.getOrdQtt()) * (promotionVO.getPrmtBnfDcRate() / 100));
              log.debug("=== totalDcAmt : {}", totalDcAmt);
              log.debug("=== eachDcAmt : {}", eachDcAmt);
              if (i == listSize) {
                if ("06".equals(prmtKindCd)) {
                  vo.setOrdCpDcAmt(totalDcAmt - sumPrmtDcAmt);
                } else {
                  vo.setOrdPrmtDcAmt(totalDcAmt - sumPrmtDcAmt);
                }
              } else {
                if ("06".equals(prmtKindCd)) {
                  vo.setOrdCpDcAmt(eachDcAmt);
                } else {
                  vo.setOrdPrmtDcAmt(eachDcAmt);
                }
              }
              vo.setOrdPrmtNo(ordPrmtNo);
              sumPrmtDcAmt += eachDcAmt;
              dcAmt = totalDcAmt;
              i++;
            }
          }
        } else if ("03".equals(promotionVO.getPrmtBnfCd2())) { // 정액
          for (OrderGoodsVO vo : list) {
            if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
                && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
              Float eachDcAmt = (float) Math
                  .round(((vo.getSaleAmt() * vo.getOrdQtt()) / sumSaleAmt) * promotionVO.getPrmtBnfValue());
              log.debug("========= vo.getCustomerAmt : {}", vo.getCustomerAmt());
              log.debug("========= vo.getSaleAmt() : {}", vo.getSaleAmt());
              log.debug("=== qtt : {}", vo.getOrdQtt());
              log.debug("=== sumSaleAmt : {}", sumSaleAmt);
              log.debug("=== promotionVO.getPrmtBnfValue() : {}", promotionVO.getPrmtBnfValue());
              log.debug("=== eachDcAmt : {}", eachDcAmt);
              log.debug("=== promotionVO.getPrmtBnfValue() < sumSaleAmt : {}",
                  promotionVO.getPrmtBnfValue() < sumSaleAmt);
              if (promotionVO.getPrmtBnfValue() < sumSaleAmt) {
                if (i == listSize) {
                  if ("06".equals(prmtKindCd)) {
                    vo.setOrdCpDcAmt(promotionVO.getPrmtBnfValue() - sumPrmtDcAmt);
                  } else {
                    vo.setOrdPrmtDcAmt(promotionVO.getPrmtBnfValue() - sumPrmtDcAmt);
                  }
                } else {
                  if ("06".equals(prmtKindCd)) {
                    vo.setOrdCpDcAmt(eachDcAmt);
                  } else {
                    vo.setOrdPrmtDcAmt(eachDcAmt);
                  }
                }
                vo.setOrdPrmtNo(ordPrmtNo);
                log.debug("=== i : {}", i);
                sumPrmtDcAmt += eachDcAmt;
                dcAmt = promotionVO.getPrmtBnfValue();
                i++;
              } else {
                if ("06".equals(prmtKindCd)) {
                  vo.setOrdCpDcAmt(0f);
                } else {
                  vo.setOrdPrmtDcAmt(0f);
                }
              }
            }
          }
        } else if ("04".equals(promotionVO.getPrmtBnfCd2())) { // 사은품
          for (OrderGoodsVO vo : list) {
            if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
                && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
              if ("06".equals(prmtKindCd)) {
                vo.setOrdCpDcAmt(0f);
              } else {
                vo.setOrdPrmtDcAmt(0f);
              }
              vo.setOrdPrmtNo(ordPrmtNo);
            }
          }
        } else if ("05".equals(promotionVO.getPrmtBnfCd2())) { // 무료배송
          SiteVO siteVO = ServiceUtil.getSiteBasicInfo(siteService.getSiteNo(), 0);
          Float dlvrAmt = siteVO.getDefaultDlvrMinDlvrc();
          for (OrderGoodsVO vo : list) {
            if (vo.getGoodsPrmtNo() != null && vo.getGoodsPrmtNo() == 0
                && (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0)) {
              vo.setOrdCpDcAmt(0f);
              vo.setOrdPrmtDcAmt(0f);
              vo.setOrdPrmtNo(ordPrmtNo);
            }
          }
        }
      }

      for (OrderGoodsVO vo : list) {
        resultList.add(vo.clone());
      }
      log.debug("========= 주문 중복 쿠폰/프로모션 할인 계산==========");
      if (dupltPrmtNo != 0) {
        // 할인금액 초기화
        if (dupltPrmtNo == 1) { // 임직원 할인
          log.debug("========= 임직원 프로모션 ==========");
          SiteVO siteVO = new SiteVO();
          for (OrderGoodsVO vo : resultList) {
            log.debug("========== vo.getPlusGoodsYn() : {}", vo.getPlusGoodsYn());
            log.debug("========== vo.getFreebieGoodsYn() : {}", vo.getFreebieGoodsYn());
            if ("N".equals(vo.getPlusGoodsYn()) && "N".equals(vo.getFreebieGoodsYn())) {
              Float sumSaleAmt = (vo.getSaleAmt() * (int) vo.getOrdQtt()) - vo.getGoodsCpDcAmt()
                  - vo.getGoodsPrmtDcAmt() - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt();
              Float customerAmt = vo.getCustomerAmt();
              int partnerNo = vo.getPartnerNo();
              vo.setDcRate(100f - (int) (sumSaleAmt / (vo.getCustomerAmt() * (int) vo.getOrdQtt()) * 100));
              Float orgDcRate = vo.getDcRate();
              siteVO = ServiceUtil.getSiteBasicInfo(vo.getSiteNo(), partnerNo);
              Float dcRate = siteVO.getDiscount(); // 임직원 할인율
              log.debug("======= siteVO.getDistinction() : {}", siteVO.getDistinction());
              if (Float.compare(siteVO.getDistinction(), orgDcRate) >= 0) {
                if ("02".equals(siteVO.getEmployeeBnfTypeCd())) { // 소비자가
                  Float reSaleAmt = (customerAmt * (int) vo.getOrdQtt())
                      - ((float) Math.round((customerAmt * (int) vo.getOrdQtt()) * (dcRate / 100)));
                  if (Float.compare(reSaleAmt, sumSaleAmt) >= 0) {
                    vo.setOrdDupltPrmtDcAmt(0f);
                  } else {
                    vo.setOrdDupltPrmtDcAmt(sumSaleAmt - reSaleAmt);
                    vo.setDupltPrmtNo(dupltPrmtNo);
                  }
                } else { // 판매가
                  vo.setOrdDupltPrmtDcAmt((float) Math.round(sumSaleAmt * (dcRate / 100)));
                  vo.setDupltPrmtNo(dupltPrmtNo);
                }
              } else {
                vo.setOrdDupltPrmtDcAmt(0f);
              }
            }
          }
        } else {
          log.debug("========= 일반 프로모션 ==========");
          // 프로모션 정보 조회
          PromotionSO promotionSO = new PromotionSO();
          promotionSO.setPrmtNo(dupltPrmtNo);
          PromotionVO promotionVO = selectOrdPromotionInfo(promotionSO);

          int i = 1;
          Float sumSaleAmt = 0f;
          Float sumPrmtDcAmt = 0f;
          Float totalDcAmt = 0f;
          for (OrderGoodsVO vo : resultList) {
            if (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0) {
              sumSaleAmt += (vo.getSaleAmt() * vo.getOrdQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt();
            }
          }
          String prmtKindCd = promotionVO.getPrmtKindCd();
          log.debug("========= prmtKindCd : {}", prmtKindCd);
          if ("01".equals(promotionVO.getPrmtBnfCd2())) { // 정률
            for (OrderGoodsVO vo : resultList) {
              if (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0) {
                totalDcAmt += (float) Math
                    .round(((vo.getSaleAmt() * vo.getOrdQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt()
                        - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt()) * (promotionVO.getPrmtBnfDcRate() / 100));
              }
            }
            for (OrderGoodsVO vo : resultList) {
              if (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0) {
                log.debug("=== saleAmt : {}", vo.getSaleAmt());
                log.debug("=== qtt : {}", vo.getOrdQtt());
                log.debug("=== sumSaleAmt : {}", sumSaleAmt);
                log.debug("=== promotionVO.getPrmtBnfValue() : {}", promotionVO.getPrmtBnfValue());
                log.debug("=== dcAmt : {}", dcAmt);
                // Float dcRate = promotionVO.getPrmtBnfDcRate();
                // Float totalDcAmt = (float) Math.round((sumSaleAmt - dcAmt) * (dcRate / 100));
                Float eachDcAmt = (float) Math
                    .round(((vo.getSaleAmt() * vo.getOrdQtt()) - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt()
                        - vo.getOrdCpDcAmt() - vo.getOrdPrmtDcAmt()) * (promotionVO.getPrmtBnfDcRate() / 100));
                log.debug("=== duplt totalDcAmt : {}", totalDcAmt);
                log.debug("=== duplt eachDcAmt : {}", eachDcAmt);
                if (i == resultList.size()) {
                  if ("06".equals(prmtKindCd)) {
                    vo.setOrdDupltCpDcAmt(totalDcAmt - sumPrmtDcAmt);
                  } else {
                    vo.setOrdDupltPrmtDcAmt(totalDcAmt - sumPrmtDcAmt);
                  }
                } else {
                  if ("06".equals(prmtKindCd)) {
                    vo.setOrdDupltCpDcAmt(eachDcAmt);
                  } else {
                    vo.setOrdDupltPrmtDcAmt(eachDcAmt);
                  }
                }
                vo.setDupltPrmtNo(dupltPrmtNo);
                sumPrmtDcAmt += eachDcAmt;
                i++;
              }
            }
          } else if ("03".equals(promotionVO.getPrmtBnfCd2())) { // 정액
            for (OrderGoodsVO vo : resultList) {
              if (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0) {
                Float eachDcAmt = (float) Math.round(
                    ((vo.getSaleAmt() * vo.getOrdQtt() - vo.getGoodsCpDcAmt() - vo.getGoodsPrmtDcAmt()) / sumSaleAmt)
                        * promotionVO.getPrmtBnfValue());
                log.debug("=== saleAmt : {}", vo.getSaleAmt());
                log.debug("=== qtt : {}", vo.getOrdQtt());
                log.debug("=== sumSaleAmt : {}", sumSaleAmt);
                log.debug("=== promotionVO.getPrmtBnfValue() : {}", promotionVO.getPrmtBnfValue());
                log.debug("=== eachDcAmt : {}", eachDcAmt);
                log.debug("=== promotionVO.getPrmtBnfValue() < sumSaleAmt : {}",
                    promotionVO.getPrmtBnfValue() < sumSaleAmt);
                if (promotionVO.getPrmtBnfValue() < sumSaleAmt) {
                  if (i == resultList.size()) {
                    if ("06".equals(prmtKindCd)) {
                      vo.setOrdDupltCpDcAmt(promotionVO.getPrmtBnfValue() - sumPrmtDcAmt);
                    } else {
                      vo.setOrdDupltPrmtDcAmt(promotionVO.getPrmtBnfValue() - sumPrmtDcAmt);
                    }
                  } else {
                    if ("06".equals(prmtKindCd)) {
                      vo.setOrdDupltCpDcAmt(eachDcAmt);
                    } else {
                      vo.setOrdDupltPrmtDcAmt(eachDcAmt);
                    }
                  }
                  vo.setDupltPrmtNo(dupltPrmtNo);
                  log.debug("=== i : {}", i);
                  sumPrmtDcAmt += eachDcAmt;
                  i++;
                } else {
                  if ("06".equals(prmtKindCd)) {
                    vo.setOrdDupltCpDcAmt(0f);
                  } else {
                    vo.setOrdDupltPrmtDcAmt(0f);
                  }
                }
              }
            }
          } else if ("05".equals(promotionVO.getPrmtBnfCd2())) { // 무료배송
            SiteVO siteVO = ServiceUtil.getSiteBasicInfo(siteService.getSiteNo(), 0);
            Float dlvrAmt = siteVO.getDefaultDlvrMinDlvrc();
            for (OrderGoodsVO vo : resultList) {
              if (promotionVO.getPartnerNo() == vo.getPartnerNo() || promotionVO.getPartnerNo() == 0) {
                if (promotionVO.getPrmtBnfValue() < sumSaleAmt) {
                  vo.setOrdDupltCpDcAmt(0f);
                  vo.setOrdDupltPrmtDcAmt(0f);
                  vo.setDupltPrmtNo(dupltPrmtNo);
                }
              }
            }
          }
        }

      }
    }
    log.debug("===== resultList : {}", resultList);
    return resultList;
  }

  /** 주문 사용 가능 쿠폰/프로모션 조회 **/
  @Override
  public ResultListModel<PromotionVO> selectOrdPromotionList(PromotionSO so) throws Exception {
    ResultListModel<PromotionVO> resultList = new ResultListModel<>();

    if (SiteUtil.isMobile()) {
      // 모바일
      so.setPrmtUseScopeCd("03");
    } else {
      // PC
      so.setPrmtUseScopeCd("02");
    }

    List<PromotionVO> list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdPromotionList", so);
    resultList.setResultList(list);
    return resultList;
  }

  /** 쿠폰/프로모션 상세 조회 **/
  @Override
  public PromotionVO selectOrdPromotionInfo(PromotionSO so) throws Exception {
    PromotionVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectOrdPromotionInfo", so);
    log.debug("========= vo.getPrmtBnfCd1() : {}", vo.getPrmtBnfCd1());
    if ("02".equals(vo.getPrmtBnfCd1())) {
      ExhibitionTargetSO exhibitionSo = new ExhibitionTargetSO();
      exhibitionSo.setPrmtNo(new Long(vo.getPrmtNo()).intValue());
      List<ExhibitionTargetVO> prmtSetVOList = proxyDao
          .selectList(MapperConstants.PROMOTION_SPECIAL + "selectPrmtTargetSetList", exhibitionSo);
      vo.setGoodsList(prmtSetVOList);
    }
    return vo;
  }

  /** 주문 적용 가능 사은품 조회 **/
  @Override
  public ResultListModel<PrmtFreebieVO> selectPrmtFreebieList(PromotionSO so) throws Exception {
    ResultListModel<PrmtFreebieVO> resultList = new ResultListModel<>();
    List<PrmtFreebieVO> list = proxyDao.selectList(MapperConstants.BASKET + "selectPrmtFreebieList", so);
    if (list != null && list.size() > 0) {
      for (PrmtFreebieVO vo : list) {
        if ("1".equals(vo.getFreebieTypeCd())) {
          BasketSO basketSO = new BasketSO();
          basketSO.setGoodsNo(vo.getFreebieNo());
          basketSO.setStoreRecptYn("N");
          ResultListModel<GoodsSizeVO> sizeListModel = frontBasketService.selectGoodsSizeList(basketSO);
          List<GoodsSizeVO> sizeList = sizeListModel.getResultList();
          vo.setGoodsSizeVOList(sizeList);
        }
      }
    }
    resultList.setResultList(list);
    return resultList;
  }

  /** 적용 프로모션 수량 업데이트 **/
  @Override
  public void updateApplyPromotionCnt(List<PromotionPO> list) throws Exception {
    try {
      for (PromotionPO po : list) {
        proxyDao.update(MapperConstants.ORDER_MANAGE + "updateApplyPromotionCnt", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
  }

  /** 부가비용 취소 플래그 업데이트 **/
  @Override
  public void updateAddedAmountCancel(List<OrderGoodsVO> list) throws Exception {
    try {
      for (OrderGoodsVO po : list) {
        proxyDao.update(MapperConstants.ORDER_MANAGE + "updateAddedAmountCancel", po);
      }
    } catch (Exception e) {
      log.error("ERROR : {}", e);
      throw new Exception(e);
    }
  }

  /** 주문 사은품 조회 **/
  @Override
  public List<OrderGoodsVO> selectOrdFreebieList(OrderSO so) throws Exception {
    List<OrderGoodsVO> list = new ArrayList<>();
    list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectOrdFreebieList", so);
    return list;
  }

  /** 상품 프로모션 그룹별 목록 조회 **/
  @Override
  public List<OrderGoodsVO> selectPrmtAccountGoodsGroupList(OrderInfoVO vo) {
    List<OrderGoodsVO> list = new ArrayList<>();
    list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectPrmtAccountGoodsGroupList", vo);
    return list;
  }

  /** 정산정보 등록용 주문 프로모션(증정) 그룹별 목록 조회 **/
  @Override
  public List<OrderGoodsVO> selectPrmtAccountOrdGroupList(OrderInfoVO vo) {
    List<OrderGoodsVO> list = new ArrayList<>();
    list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectPrmtAccountOrdGroupList", vo);
    return list;
  }

  /** 정산정보 등록용 사은품 가격 조회 **/
  @Override
  public Float selectPrmtFreebieAmt(OrderGoodsVO vo) {
    Float amt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectPrmtFreebieAmt", vo);
    return amt;
  }

  /** 매장수령 자동취소 배치 **/
  @Override
  @Transactional(rollbackFor = Exception.class)
  public ResultModel<OrderPayPO> cancelOrderBatch(OrderPO po) throws Exception {
    ResultModel<OrderPayPO> result = cancelOrder(po);
    return result;
  }

  /** 교환 데이터 조회 **/
  @Override
  public List<OrderGoodsVO> selectExchangeCountList(OrderPO po) {
    List<OrderGoodsVO> list = new ArrayList<>();
    list = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectExchangeCountList", po);
    return list;
  }

  /** 환불 카운트 조회 **/
  @Override
  public Integer selectRefundCount(OrderPO po) {
    int refundCnt = 0;
    refundCnt = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectRefundCount", po);
    return refundCnt;
  }

  public OrderInfoVO selectPaymentDoneStatus(Long ordNo) {
    OrderInfoVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectPaymentDoneStatus", ordNo);
    return vo;
  }

  public ResultModel<OrderVO> selectCsOrderCount(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectCsOrderCount", so);
    result.setData(vo);
    return result;
  }

  public ResultModel<OrderVO> selectCsExchangeCount(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectCsExchangeCount", so);
    result.setData(vo);
    return result;
  }

  public ResultModel<OrderVO> selectCsRefundCount(OrderSO so) {
    ResultModel<OrderVO> result = new ResultModel<OrderVO>();
    OrderVO vo = proxyDao.selectOne(MapperConstants.ORDER_MANAGE + "selectCsRefundCount", so);
    result.setData(vo);
    return result;
  }

  /** 취소 일반 사은품 목록 조회 **/
  public List<OrderGoodsVO> selectCancelFreebieList(OrderSO so) {
    List<OrderGoodsVO> result = new ArrayList<>();
    result = proxyDao.selectList(MapperConstants.ORDER_MANAGE + "selectCancelFreebieList", so);
    return result;
  }

  /** 취소 사은품 클레임 업데이트 **/
  public void updateFreebieClaim(OrderGoodsPO po) {
    proxyDao.update(MapperConstants.ORDER_MANAGE + "updateFreebieClaim", po);
  }

  /** 취소 사은품 클레임 업데이트(철회) **/
  public void updateFreebieClaimRevert(OrderGoodsPO po) {
    proxyDao.update(MapperConstants.ORDER_MANAGE + "updateFreebieClaimRevert", po);
  }

}
